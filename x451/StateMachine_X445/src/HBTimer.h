/*****************************************************************
* Project        Harman Car Multimedia System
* (c) copyright  2018
* Company        Harman/Becker Automotive Systems GmbH
*                All rights reserved
* Secrecy Level  STRICTLY CONFIDENTIAL
****************************************************************/
/**
* @file         HBTimer.h
* @ingroup      HMIComponent
* @author       Rahul Madan
* TMLTimer      Class to implement class TimerInterface(which is auto generated by Yakindu)
*/

#ifndef HBTIMER_H_
#define HBTIMER_H_

#include <QObject>
#include <QMap>
#include "sc_types.h"
#include "TimeEvent.h"
#include "StateMachine_X445/src-gen/TML_HMI_SM.h"

/**
 * @class TMLTimer
 * @brief Class to implement class TimerInterface(which is auto generated by Yakindu)
 */
class HBTimer: public QObject, public TimerInterface {

    Q_OBJECT

public:
    HBTimer();
    virtual ~HBTimer();

    /**
     * @brief  Method to start the timing for a time event
     * @param  statemachine- Instance of class TimedStatemachineInterface
     * @param  eventId- Timer event Id
     * @param  time- time(in ms) for which the event should run
     * @param  isPeriodic- bool value that tells if the event is periodic or not
     * @return void
     */
    virtual void setTimer(TimedStatemachineInterface* statemachine, sc_eventid eventId, sc_integer time, sc_boolean isPeriodic) override;

    /**
     * @brief  Method to unset the given time event
     * @param  statemachine- Instance of class TimedStatemachineInterface
     * @param  eventId- Timer event Id
     * @return void
     */
    virtual void unsetTimer(TimedStatemachineInterface* statemachine, sc_eventid eventId) override;

    /**
     * @brief  Cancel timer service. Use this to end possible timing threads and free
     *         memory resources.
     * @param  void
     * @return void
     */
    virtual void cancel() override;

public slots:
    /**
     * @brief Method to call raiseTimeEvent() method of Statemachine when the time is complete for a particular Time event
     * @param eventId- Timer event Id
     * @return void
     */
    void sltRaiseTimeEvent(sc_eventid eventId);

private:
    /** Map to store all the TimeEvents(value) against their event Id **/
    QMap<sc_eventid, TimeEvent*> m_mapTimerMap;

    /** Instance of class TimedStatemachineInterface **/
    TimedStatemachineInterface* m_pTimedSCTHandle;

};

#endif  /*HBTIMER_H_*/
