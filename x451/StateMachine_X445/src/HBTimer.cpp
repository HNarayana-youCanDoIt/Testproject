/*****************************************************************
* Project        Harman Car Multimedia System
* (c) copyright  2018
* Company        Harman/Becker Automotive Systems GmbH
*                All rights reserved
* Secrecy Level  STRICTLY CONFIDENTIAL
****************************************************************/
/**
* @file         TMLTimer.cpp
* @ingroup      HMIComponent
* @author       Rahul Madan
* TMLTimer      Class to implement class TimerInterface(which is auto generated by Yakindu)
*/

#include "HBTimer.h"
#include <logging.h>
#include "HMIIncludes.h"

HBTimer::HBTimer() : QObject()
{
    LOG_INFO(Log::e_LOG_CONTEXT_SYSTEM,__FUNCTION__);
    this->m_pTimedSCTHandle = NULL;
}

void HBTimer::setTimer(TimedStatemachineInterface* statemachine, sc_eventid eventId, sc_integer time, sc_boolean isPeriodic)
{
    LOG_INFO(Log::e_LOG_CONTEXT_SYSTEM,"%s event:%Id time:%d",__FUNCTION__,eventId,time);
    this->m_pTimedSCTHandle = statemachine;
    TimeEvent *pTimeEvent = new TimeEvent(eventId, time, isPeriodic);
    m_mapTimerMap.insert(eventId, pTimeEvent);
    connect(pTimeEvent, SIGNAL(sigTimeout(sc_eventid)), this, SLOT(sltRaiseTimeEvent(sc_eventid)));
}

void HBTimer::unsetTimer(TimedStatemachineInterface* statemachine, sc_eventid eventId)
{
    LOG_INFO(Log::e_LOG_CONTEXT_SYSTEM,"%s event:%Id",__FUNCTION__,eventId);
    this->m_pTimedSCTHandle = statemachine;
    if (m_mapTimerMap.contains(eventId))
    {
        TimeEvent *pTimeEvent = m_mapTimerMap.value(eventId);
        disconnect(pTimeEvent, SIGNAL(sigTimeout(sc_eventid)), this, SLOT(sltRaiseTimeEvent(sc_eventid)));
        delete pTimeEvent;
        m_mapTimerMap.remove(eventId);
    }
    else
    {
        LOG_WARNING(Log::e_LOG_CONTEXT_SYSTEM,"%s event:%Id not available in the map",__FUNCTION__,eventId)
    }
}

void HBTimer::sltRaiseTimeEvent(sc_eventid eventId)
{
    LOG_INFO(Log::e_LOG_CONTEXT_SYSTEM,"%s event:%Id",__FUNCTION__,eventId);
    this->m_pTimedSCTHandle->raiseTimeEvent(eventId);
}

void HBTimer::cancel()
{
    LOG_INFO(Log::e_LOG_CONTEXT_SYSTEM,__FUNCTION__);
}

HBTimer::~HBTimer()
{
    LOG_INFO(Log::e_LOG_CONTEXT_SYSTEM,__FUNCTION__);
}

