/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_HMI_hmi_VR_DBUS_STUB_ADAPTER_HPP_
#define V0_COM_HARMAN_HMI_hmi_VR_DBUS_STUB_ADAPTER_HPP_

#include <v0/com/harman/hmi/hmiVRStub.hpp>
#include "v0/com/harman/hmi/hmiVRDBusDeployment.hpp"        
#include <v0/com/harman/hmi/hmiVRTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace hmi {

typedef CommonAPI::DBus::DBusStubAdapterHelper<hmiVRStub> hmiVRDBusStubAdapterHelper;

class hmiVRDBusStubAdapterInternal
    : public virtual hmiVRStubAdapter,
      public hmiVRDBusStubAdapterHelper
{
public:
    hmiVRDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~hmiVRDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return hmiVR::getInterface();
    }


    /**
     * description: Signal shall be broadcast to activate VR.
     */
    void fireActivateVREvent(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState& eKeyState, const ::v0::com::harman::hmi::hmiVRTypes::EScreenName& eScreenName);
    /**
     * description: Signal shall be broadcast to activate VR.
     */
    void fireActivateVREvent(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState& eKeyState);
    /**
     * description: Signal shall be broadcast to de-activate VR.
     */
    void fireCancelVREvent();
    /**
     * description: Signal shall be broadcast when ever any pick list item is selected from HMI.
     */
    void fireListItemTouchEvent(const int32_t& iFocusedItem);


    const hmiVRDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::hmi::hmiVRStub,
        CommonAPI::Version
        > gethmiVRInterfaceVersionStubDispatcher;



/**
 * description: Method to be invoked to display teleprompter list in HMI.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::vector<std::string>>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > showTelePrompterListStubDispatcher;
/**
 * description: Method to be invoked to display picklist in HMI.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::vector<std::string>, std::string>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > showPickListStubDispatcher;
/**
 * description: Method to be invoked to display picklist in HMI.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::vector<std::string>>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > showPickListStubDispatcher1;
/**
 * description: Method to be invoked to remove the picklist from HMI.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hidePickListStubDispatcher;
/**
 * description: Method to be invoked to select an item from the pick list.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<int32_t>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setFocusedItemStubDispatcher;
/**
 * description: Method to be invoked to switch to the required HMI screen.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::string>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > setScreenStubDispatcher;
/**
 * description: Method to be invoked to switch to different categories during media browse.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EFilterIDType, int64_t>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > mediaFilterListShowStubDispatcher;
/**
 * description: Method to be invoked to display contact details of the particular contact.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::string, int32_t>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > showContactStubDispatcher;
/**
 * description: Method to be invoked to set the focus on a particular category.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::string>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > focusSelectedCategoryStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    hmiVRDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class hmiVRDBusStubAdapter
    : public hmiVRDBusStubAdapterInternal,
      public std::enable_shared_from_this<hmiVRDBusStubAdapter> {
public:
    hmiVRDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          hmiVRDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace hmi
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_HMI_hmi_VR_DBUS_STUB_ADAPTER_HPP_
