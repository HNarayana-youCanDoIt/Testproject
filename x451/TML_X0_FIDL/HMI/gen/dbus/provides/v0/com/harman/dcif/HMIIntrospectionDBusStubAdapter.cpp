/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/dcif/HMIIntrospection.hpp>
#include <v0/com/harman/dcif/HMIIntrospectionDBusStubAdapter.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createHMIIntrospectionDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<HMIIntrospectionDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerHMIIntrospectionDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	HMIIntrospection::getInterface(), &createHMIIntrospectionDBusStubAdapter);
}

HMIIntrospectionDBusStubAdapterInternal::~HMIIntrospectionDBusStubAdapterInternal() {
    deactivateManagedInstances();
    HMIIntrospectionDBusStubAdapterHelper::deinit();
}

void HMIIntrospectionDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* HMIIntrospectionDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"getTopScreenAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onTopScreenAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getDrawerTopScreenAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onDrawerTopScreenAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getPopupTopScreenAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onPopupTopScreenAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        "<method name=\"getOverlayTopScreenAttribute\">\n"
            "<arg name=\"value\" type=\"s\" direction=\"out\" />"
        "</method>\n"
        "<signal name=\"onOverlayTopScreenAttributeChanged\">\n"
            "<arg name=\"changedValue\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: Indicates that a screen in the HMI has changed.
         */
        "<signal name=\"screenChange\">\n"
            "<arg name=\"screenInformation\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: Indicates that a drawer screen in the HMI has changed.
         */
        "<signal name=\"drawerScreenChange\">\n"
            "<arg name=\"drawerScreenInformation\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: Indicates that a popup screen in the HMI has changed.
         */
        "<signal name=\"popupScreenChange\">\n"
            "<arg name=\"popupScreenInformation\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: Indicates that a popup screen in the HMI has changed.
         */
        "<signal name=\"overlayScreenChange\">\n"
            "<arg name=\"overlayScreenInformation\" type=\"s\" />\n"
        "</signal>\n"
        /**
         * description: This method allows for querying the current layout of 		the entire HMI.
         * param: inspectItemType (String) : It tells whether the inspection is for screen or
         *   drawers or popup [DRAWER/POPUP/SCREEN/OVERLAYS]
         * param: screenName (String) : It tells which screen needs to be inspected, if it is
         *   loaded then inspect data is returned otherwise returns null         returns:
         *   success (InspectionResponseCode) : Indicates the success or failure
         *   													of the request         returns: screenInformation (String) :
         *   JSON-encoded data string for inspectionResults
         */
        "<method name=\"inspectScreen\">\n"
            "<arg name=\"_type\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_screenName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_status\" type=\"i\" direction=\"out\" />\n"
            "<arg name=\"_screenInformation\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        CommonAPI::Version
        > HMIIntrospectionDBusStubAdapterInternal::getHMIIntrospectionInterfaceVersionStubDispatcher(&HMIIntrospectionStub::getInterfaceVersion, "uu");

/**
 * description: data string describing the top-most screen 	being shown currently to the user. 
 *   By convention, screen changes which	 	occur underneath the current topScreen
 *   will not be reported.
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > HMIIntrospectionDBusStubAdapterInternal::getTopScreenAttributeStubDispatcher(
            &::v0::com::harman::dcif::HMIIntrospectionStub::getTopScreenAttribute
            , "s"
            );
/**
 * description: data string describing the top-most drawer screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > HMIIntrospectionDBusStubAdapterInternal::getDrawerTopScreenAttributeStubDispatcher(
            &::v0::com::harman::dcif::HMIIntrospectionStub::getDrawerTopScreenAttribute
            , "s"
            );
/**
 * description: data string describing the top-most popup screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > HMIIntrospectionDBusStubAdapterInternal::getPopupTopScreenAttributeStubDispatcher(
            &::v0::com::harman::dcif::HMIIntrospectionStub::getPopupTopScreenAttribute
            , "s"
            );
/**
 * description: data string describing the top-most popup screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        std::string,
        CommonAPI::DBus::StringDeployment
        > HMIIntrospectionDBusStubAdapterInternal::getOverlayTopScreenAttributeStubDispatcher(
            &::v0::com::harman::dcif::HMIIntrospectionStub::getOverlayTopScreenAttribute
            , "s"
            );



/**
 * description: This method allows for querying the current layout of 		the entire HMI.
 * param: inspectItemType (String) : It tells whether the inspection is for screen or
 *   drawers or popup [DRAWER/POPUP/SCREEN/OVERLAYS]
 * param: screenName (String) : It tells which screen needs to be inspected, if it is
 *   loaded then inspect data is returned otherwise returns null         returns:
 *   success (InspectionResponseCode) : Indicates the success or failure
 *   													of the request         returns: screenInformation (String) :
 *   JSON-encoded data string for inspectionResults
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::dcif::HMIIntrospectionStub,
    std::tuple<::v0::com::harman::dcif::HMIIntrospectionTypes::ScreenItemType, std::string>,
    std::tuple<::v0::com::harman::dcif::HMIIntrospectionTypes::InspectionResponseCode, std::string>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>
    
    > HMIIntrospectionDBusStubAdapterInternal::inspectScreenStubDispatcher(
    &HMIIntrospectionStub::inspectScreen, "is",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));


/**
 * description: data string describing the top-most screen 	being shown currently to the user. 
 *   By convention, screen changes which	 	occur underneath the current topScreen
 *   will not be reported.
 */
void HMIIntrospectionDBusStubAdapterInternal::fireTopScreenAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onTopScreenAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: data string describing the top-most drawer screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
void HMIIntrospectionDBusStubAdapterInternal::fireDrawerTopScreenAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onDrawerTopScreenAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: data string describing the top-most popup screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
void HMIIntrospectionDBusStubAdapterInternal::firePopupTopScreenAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onPopupTopScreenAttributeChanged",
            "s",
            deployedValue
    
    );
}
/**
 * description: data string describing the top-most popup screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
void HMIIntrospectionDBusStubAdapterInternal::fireOverlayTopScreenAttributeChanged(const std::string& value) {
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deployedValue(value, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<
        std::string,
        CommonAPI::DBus::StringDeployment
    >
    >>
        ::sendSignal(
            *this,
            "onOverlayTopScreenAttributeChanged",
            "s",
            deployedValue
    
    );
}

/**
 * description: Indicates that a screen in the HMI has changed.
 */
void HMIIntrospectionDBusStubAdapterInternal::fireScreenChangeEvent(const std::string& screenInformation) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "screenChange",
            "s",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(screenInformation, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}
/**
 * description: Indicates that a drawer screen in the HMI has changed.
 */
void HMIIntrospectionDBusStubAdapterInternal::fireDrawerScreenChangeEvent(const std::string& drawerScreenInformation) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "drawerScreenChange",
            "s",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(drawerScreenInformation, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}
/**
 * description: Indicates that a popup screen in the HMI has changed.
 */
void HMIIntrospectionDBusStubAdapterInternal::firePopupScreenChangeEvent(const std::string& popupScreenInformation) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "popupScreenChange",
            "s",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(popupScreenInformation, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}
/**
 * description: Indicates that a popup screen in the HMI has changed.
 */
void HMIIntrospectionDBusStubAdapterInternal::fireOverlayScreenChangeEvent(const std::string& overlayScreenInformation) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>
    >>::sendSignal(
            *this,
            "overlayScreenChange",
            "s",
    CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>(overlayScreenInformation, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
    );
}


const HMIIntrospectionDBusStubAdapterHelper::StubDispatcherTable& HMIIntrospectionDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& HMIIntrospectionDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

HMIIntrospectionDBusStubAdapterInternal::HMIIntrospectionDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      HMIIntrospectionDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<HMIIntrospectionStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: data string describing the top-most screen 	being shown currently to the user. 
             *   By convention, screen changes which	 	occur underneath the current topScreen
             *   will not be reported.
             */
            { { "getTopScreenAttribute", "" }, &com::harman::dcif::HMIIntrospectionDBusStubAdapterInternal::getTopScreenAttributeStubDispatcher },
            /**
             * description: data string describing the top-most drawer screen 	being shown currently to the
             *   user.  By convention, screen changes which	 	occur underneath the current
             *   topScreen will not be reported.
             */
            { { "getDrawerTopScreenAttribute", "" }, &com::harman::dcif::HMIIntrospectionDBusStubAdapterInternal::getDrawerTopScreenAttributeStubDispatcher },
            /**
             * description: data string describing the top-most popup screen 	being shown currently to the
             *   user.  By convention, screen changes which	 	occur underneath the current
             *   topScreen will not be reported.
             */
            { { "getPopupTopScreenAttribute", "" }, &com::harman::dcif::HMIIntrospectionDBusStubAdapterInternal::getPopupTopScreenAttributeStubDispatcher },
            /**
             * description: data string describing the top-most popup screen 	being shown currently to the
             *   user.  By convention, screen changes which	 	occur underneath the current
             *   topScreen will not be reported.
             */
            { { "getOverlayTopScreenAttribute", "" }, &com::harman::dcif::HMIIntrospectionDBusStubAdapterInternal::getOverlayTopScreenAttributeStubDispatcher }
            ,
            /**
             * description: This method allows for querying the current layout of 		the entire HMI.
             * param: inspectItemType (String) : It tells whether the inspection is for screen or
             *   drawers or popup [DRAWER/POPUP/SCREEN/OVERLAYS]
             * param: screenName (String) : It tells which screen needs to be inspected, if it is
             *   loaded then inspect data is returned otherwise returns null         returns:
             *   success (InspectionResponseCode) : Indicates the success or failure
             *   													of the request         returns: screenInformation (String) :
             *   JSON-encoded data string for inspectionResults
             */
            { { "inspectScreen", "is" }, &com::harman::dcif::HMIIntrospectionDBusStubAdapterInternal::inspectScreenStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::dcif::HMIIntrospectionDBusStubAdapterInternal::getHMIIntrospectionInterfaceVersionStubDispatcher });
}

bool HMIIntrospectionDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0
