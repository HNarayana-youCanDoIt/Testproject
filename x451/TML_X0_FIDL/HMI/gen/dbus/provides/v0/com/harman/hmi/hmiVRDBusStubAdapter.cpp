/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/hmi/hmiVR.hpp>
#include <v0/com/harman/hmi/hmiVRDBusStubAdapter.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace hmi {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createhmiVRDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<hmiVRDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerhmiVRDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	hmiVR::getInterface(), &createhmiVRDBusStubAdapter);
}

hmiVRDBusStubAdapterInternal::~hmiVRDBusStubAdapterInternal() {
    deactivateManagedInstances();
    hmiVRDBusStubAdapterHelper::deinit();
}

void hmiVRDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* hmiVRDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: Signal shall be broadcast to activate VR.
         */
        "<signal name=\"activateVR\">\n"
            "<arg name=\"eKeyState\" type=\"i\" />\n"
            "<arg name=\"eScreenName\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: Signal shall be broadcast to activate VR.
         */
        "<signal name=\"activateVR\">\n"
            "<arg name=\"eKeyState\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: Signal shall be broadcast to de-activate VR.
         */
        "<signal name=\"cancelVR\">\n"
        "</signal>\n"
        /**
         * description: Signal shall be broadcast when ever any pick list item is selected from HMI.
         */
        "<signal name=\"listItemTouch\">\n"
            "<arg name=\"iFocusedItem\" type=\"i\" />\n"
        "</signal>\n"
        /**
         * description: Method to be invoked to display teleprompter list in HMI.
         */
        "<method name=\"showTelePrompterList\">\n"
            "<arg name=\"_strAryTelePrompterlist\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Method to be invoked to display picklist in HMI.
         */
        "<method name=\"showPickList\">\n"
            "<arg name=\"_strAryPicklist\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_strContextTitle\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Method to be invoked to display picklist in HMI.
         */
        "<method name=\"showPickList\">\n"
            "<arg name=\"_strAryPicklist\" type=\"as\" direction=\"in\" />\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Method to be invoked to remove the picklist from HMI.
         */
        "<method name=\"hidePickList\">\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Method to be invoked to select an item from the pick list.
         */
        "<method name=\"setFocusedItem\">\n"
            "<arg name=\"_iLineNo\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Method to be invoked to switch to the required HMI screen.
         */
        "<method name=\"setScreen\">\n"
            "<arg name=\"_strScreenName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Method to be invoked to switch to different categories during media browse.
         */
        "<method name=\"mediaFilterListShow\">\n"
            "<arg name=\"_eFilterType\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_iFilterId\" type=\"x\" direction=\"in\" />\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Method to be invoked to display contact details of the particular contact.
         */
        "<method name=\"showContact\">\n"
            "<arg name=\"_strDatabaseType\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_iContactId\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"
        /**
         * description: Method to be invoked to set the focus on a particular category.
         */
        "<method name=\"focusSelectedCategory\">\n"
            "<arg name=\"_strCategory\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_eResp\" type=\"i\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::hmi::hmiVRStub,
        CommonAPI::Version
        > hmiVRDBusStubAdapterInternal::gethmiVRInterfaceVersionStubDispatcher(&hmiVRStub::getInterfaceVersion, "uu");




/**
 * description: Method to be invoked to display teleprompter list in HMI.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::vector<std::string>>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::showTelePrompterListStubDispatcher(
    &hmiVRStub::showTelePrompterList, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Method to be invoked to display picklist in HMI.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::vector<std::string>, std::string>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::showPickListStubDispatcher(
    &hmiVRStub::showPickList, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Method to be invoked to display picklist in HMI.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::vector<std::string>>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::showPickListStubDispatcher1(&hmiVRStub::showPickList, "i",
    std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<CommonAPI::DBus::StringDeployment>*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Method to be invoked to remove the picklist from HMI.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::hidePickListStubDispatcher(
    &hmiVRStub::hidePickList, "i",
					std::make_tuple(),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Method to be invoked to select an item from the pick list.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<int32_t>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::setFocusedItemStubDispatcher(
    &hmiVRStub::setFocusedItem, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Method to be invoked to switch to the required HMI screen.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::string>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::setScreenStubDispatcher(
    &hmiVRStub::setScreen, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Method to be invoked to switch to different categories during media browse.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EFilterIDType, int64_t>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::mediaFilterListShowStubDispatcher(
    &hmiVRStub::mediaFilterListShow, "i",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Method to be invoked to display contact details of the particular contact.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::string, int32_t>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::showContactStubDispatcher(
    &hmiVRStub::showContact, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));

/**
 * description: Method to be invoked to set the focus on a particular category.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::hmi::hmiVRStub,
    std::tuple<std::string>,
    std::tuple<::v0::com::harman::hmi::hmiVRTypes::EResponseType>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment>
    
    > hmiVRDBusStubAdapterInternal::focusSelectedCategoryStubDispatcher(
    &hmiVRStub::focusSelectedCategory, "i",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)));



/**
 * description: Signal shall be broadcast to activate VR.
 */
void hmiVRDBusStubAdapterInternal::fireActivateVREvent(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState& eKeyState, const ::v0::com::harman::hmi::hmiVRTypes::EScreenName& eScreenName) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v0::com::harman::hmi::hmiVRTypes::EKeyState,
    ::v0::com::harman::hmi::hmiVRTypes::EScreenName
    >>::sendSignal(
            *this,
            "activateVR",
            "ii",
    eKeyState,
    eScreenName
    );
}
/**
 * description: Signal shall be broadcast to activate VR.
 */
void hmiVRDBusStubAdapterInternal::fireActivateVREvent(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState& eKeyState) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    ::v0::com::harman::hmi::hmiVRTypes::EKeyState
    >>::sendSignal(
            *this,
            "activateVR",
            "i",
    eKeyState
    );
}
/**
 * description: Signal shall be broadcast to de-activate VR.
 */
void hmiVRDBusStubAdapterInternal::fireCancelVREvent() {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    >>::sendSignal(
            *this,
            "cancelVR",
            ""
    );
}
/**
 * description: Signal shall be broadcast when ever any pick list item is selected from HMI.
 */
void hmiVRDBusStubAdapterInternal::fireListItemTouchEvent(const int32_t& iFocusedItem) {
    CommonAPI::DBus::DBusStubSignalHelper<CommonAPI::DBus::DBusSerializableArguments<
    int32_t
    >>::sendSignal(
            *this,
            "listItemTouch",
            "i",
    iFocusedItem
    );
}


const hmiVRDBusStubAdapterHelper::StubDispatcherTable& hmiVRDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& hmiVRDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

hmiVRDBusStubAdapterInternal::hmiVRDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      hmiVRDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<hmiVRStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: Method to be invoked to display teleprompter list in HMI.
             */
            { { "showTelePrompterList", "as" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::showTelePrompterListStubDispatcher },
            /**
             * description: Method to be invoked to display picklist in HMI.
             */
            { { "showPickList", "ass" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::showPickListStubDispatcher },
            /**
             * description: Method to be invoked to display picklist in HMI.
             */
            { { "showPickList", "as" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::showPickListStubDispatcher1 },
            /**
             * description: Method to be invoked to remove the picklist from HMI.
             */
            { { "hidePickList", "" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::hidePickListStubDispatcher },
            /**
             * description: Method to be invoked to select an item from the pick list.
             */
            { { "setFocusedItem", "i" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::setFocusedItemStubDispatcher },
            /**
             * description: Method to be invoked to switch to the required HMI screen.
             */
            { { "setScreen", "s" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::setScreenStubDispatcher },
            /**
             * description: Method to be invoked to switch to different categories during media browse.
             */
            { { "mediaFilterListShow", "ix" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::mediaFilterListShowStubDispatcher },
            /**
             * description: Method to be invoked to display contact details of the particular contact.
             */
            { { "showContact", "si" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::showContactStubDispatcher },
            /**
             * description: Method to be invoked to set the focus on a particular category.
             */
            { { "focusSelectedCategory", "s" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::focusSelectedCategoryStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &com::harman::hmi::hmiVRDBusStubAdapterInternal::gethmiVRInterfaceVersionStubDispatcher });
}

bool hmiVRDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace hmi
} // namespace harman
} // namespace com
} // namespace v0
