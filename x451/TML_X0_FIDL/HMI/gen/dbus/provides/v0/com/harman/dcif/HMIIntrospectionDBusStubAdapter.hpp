/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: The HMI Service is responsible for providing the information to its consumers
 *   about the screen changes in HMI      and the information about the components
 *   present in the screen           Version: 1.0     Reason:         - Initial
 *   Version     Changes:         1. readonly attributes: topScreen         2.
 *   methods: inspectScreen         3. signal : screenChange
 * author: Gaurav Garg
 */
#ifndef V0_COM_HARMAN_DCIF_HMI_Introspection_DBUS_STUB_ADAPTER_HPP_
#define V0_COM_HARMAN_DCIF_HMI_Introspection_DBUS_STUB_ADAPTER_HPP_

#include <v0/com/harman/dcif/HMIIntrospectionStub.hpp>
#include "v0/com/harman/dcif/HMIIntrospectionDBusDeployment.hpp"        
#include <v0/com/harman/dcif/HMIIntrospectionTypesDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

typedef CommonAPI::DBus::DBusStubAdapterHelper<HMIIntrospectionStub> HMIIntrospectionDBusStubAdapterHelper;

class HMIIntrospectionDBusStubAdapterInternal
    : public virtual HMIIntrospectionStubAdapter,
      public HMIIntrospectionDBusStubAdapterHelper
{
public:
    HMIIntrospectionDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~HMIIntrospectionDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return HMIIntrospection::getInterface();
    }

    /**
     * description: data string describing the top-most screen 	being shown currently to the user. 
     *   By convention, screen changes which	 	occur underneath the current topScreen
     *   will not be reported.
     */
    void fireTopScreenAttributeChanged(const std::string& value);
    /**
     * description: data string describing the top-most drawer screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    void fireDrawerTopScreenAttributeChanged(const std::string& value);
    /**
     * description: data string describing the top-most popup screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    void firePopupTopScreenAttributeChanged(const std::string& value);
    /**
     * description: data string describing the top-most popup screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    void fireOverlayTopScreenAttributeChanged(const std::string& value);

    /**
     * description: Indicates that a screen in the HMI has changed.
     */
    void fireScreenChangeEvent(const std::string& screenInformation);
    /**
     * description: Indicates that a drawer screen in the HMI has changed.
     */
    void fireDrawerScreenChangeEvent(const std::string& drawerScreenInformation);
    /**
     * description: Indicates that a popup screen in the HMI has changed.
     */
    void firePopupScreenChangeEvent(const std::string& popupScreenInformation);
    /**
     * description: Indicates that a popup screen in the HMI has changed.
     */
    void fireOverlayScreenChangeEvent(const std::string& overlayScreenInformation);


    const HMIIntrospectionDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        CommonAPI::Version
        > getHMIIntrospectionInterfaceVersionStubDispatcher;

/**
 * description: data string describing the top-most screen 	being shown currently to the user. 
 *   By convention, screen changes which	 	occur underneath the current topScreen
 *   will not be reported.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getTopScreenAttributeStubDispatcher;
/**
 * description: data string describing the top-most drawer screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getDrawerTopScreenAttributeStubDispatcher;
/**
 * description: data string describing the top-most popup screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getPopupTopScreenAttributeStubDispatcher;
/**
 * description: data string describing the top-most popup screen 	being shown currently to the
 *   user.  By convention, screen changes which	 	occur underneath the current
 *   topScreen will not be reported.
 */
static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v0::com::harman::dcif::HMIIntrospectionStub,
        std::string,
        CommonAPI::DBus::StringDeployment                
        > getOverlayTopScreenAttributeStubDispatcher;


/**
 * description: This method allows for querying the current layout of 		the entire HMI.
 * param: inspectItemType (String) : It tells whether the inspection is for screen or
 *   drawers or popup [DRAWER/POPUP/SCREEN/OVERLAYS]
 * param: screenName (String) : It tells which screen needs to be inspected, if it is
 *   loaded then inspect data is returned otherwise returns null         returns:
 *   success (InspectionResponseCode) : Indicates the success or failure
 *   													of the request         returns: screenInformation (String) :
 *   JSON-encoded data string for inspectionResults
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v0::com::harman::dcif::HMIIntrospectionStub,
    std::tuple<::v0::com::harman::dcif::HMIIntrospectionTypes::ScreenItemType, std::string>,
    std::tuple<::v0::com::harman::dcif::HMIIntrospectionTypes::InspectionResponseCode, std::string>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>
    
    > inspectScreenStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    HMIIntrospectionDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class HMIIntrospectionDBusStubAdapter
    : public HMIIntrospectionDBusStubAdapterInternal,
      public std::enable_shared_from_this<HMIIntrospectionDBusStubAdapter> {
public:
    HMIIntrospectionDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          HMIIntrospectionDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_DCIF_HMI_Introspection_DBUS_STUB_ADAPTER_HPP_
