/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v1/com/harman/pres/UserPreferenceHandlerDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace pres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createUserPreferenceHandlerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<UserPreferenceHandlerDBusProxy>(_address, _connection);
}

INITIALIZER(registerUserPreferenceHandlerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		UserPreferenceHandler::getInterface(),
		&createUserPreferenceHandlerDBusProxy);
}

UserPreferenceHandlerDBusProxy::UserPreferenceHandlerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		userPrefByDevType_(*this, "onUserPrefByDevTypeAttributeChanged", "a(ii)", "getUserPrefByDevTypeAttribute", static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::devprestypes_::sPrefByDevTypeDeployment_t>*>(nullptr)),
		userPrefByDevName_(*this, "onUserPrefByDevNameAttributeChanged", "a(ysi)", "getUserPrefByDevNameAttribute", static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::devprestypes_::sPrefByDevNameDeployment_t>*>(nullptr))
{
}

      UserPreferenceHandlerDBusProxy::UserPrefByDevTypeAttribute& UserPreferenceHandlerDBusProxy::getUserPrefByDevTypeAttribute() {
          return userPrefByDevType_;
      }
      UserPreferenceHandlerDBusProxy::UserPrefByDevNameAttribute& UserPreferenceHandlerDBusProxy::getUserPrefByDevNameAttribute() {
          return userPrefByDevName_;
      }

    
    /**
     * description: This method to be called to set user preference by device type. 		As
     *   confirmation to this request, attribute "userPrefByDevType" gets updated. 	
     *   		parameters are explained in devprestypes FIDL.
     */
    void UserPreferenceHandlerDBusProxy::setUserPrefByDevType(const ::v1::com::harman::pres::devprestypes::eDeviceType &_devType, const ::v1::com::harman::pres::devprestypes::eModeName &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eDeviceType, CommonAPI::EmptyDeployment> deploy_devType(_devType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eModeName, CommonAPI::EmptyDeployment> deploy_mode(_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement, CommonAPI::EmptyDeployment> deploy_ackStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eDeviceType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eModeName, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setUserPrefByDevType",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_devType, deploy_mode,
_internalCallStatus,
deploy_ackStatus);
_ackStatus = deploy_ackStatus.getValue();
}
    std::future<CommonAPI::CallStatus> UserPreferenceHandlerDBusProxy::setUserPrefByDevTypeAsync(const ::v1::com::harman::pres::devprestypes::eDeviceType &_devType, const ::v1::com::harman::pres::devprestypes::eModeName &_mode, SetUserPrefByDevTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eDeviceType, CommonAPI::EmptyDeployment> deploy_devType(_devType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eModeName, CommonAPI::EmptyDeployment> deploy_mode(_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement, CommonAPI::EmptyDeployment> deploy_ackStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eDeviceType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eModeName, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setUserPrefByDevType",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_devType, deploy_mode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement, CommonAPI::EmptyDeployment> _ackStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _ackStatus.getValue());
        },
        std::make_tuple(deploy_ackStatus));
    }
    /**
     * description: This method to be called to set user preference by device name. 		As
     *   confirmation to this request, attribute "userPrefByDevName" gets updated. 	
     *   		parameters are explained in devprestypes FIDL.
     */
    void UserPreferenceHandlerDBusProxy::setUserPrefByDevName(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_Id(_Id, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eModeName, CommonAPI::EmptyDeployment> deploy_mode(_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement, CommonAPI::EmptyDeployment> deploy_ackStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eModeName, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setUserPrefByDevName",
        "yi",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_Id, deploy_mode,
_internalCallStatus,
deploy_ackStatus);
_ackStatus = deploy_ackStatus.getValue();
}
    std::future<CommonAPI::CallStatus> UserPreferenceHandlerDBusProxy::setUserPrefByDevNameAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_mode, SetUserPrefByDevNameAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_Id(_Id, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eModeName, CommonAPI::EmptyDeployment> deploy_mode(_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement, CommonAPI::EmptyDeployment> deploy_ackStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eModeName, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setUserPrefByDevName",
        "yi",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_Id, deploy_mode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eAcknowledgement, CommonAPI::EmptyDeployment> _ackStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _ackStatus.getValue());
        },
        std::make_tuple(deploy_ackStatus));
    }
    /**
     * description: This method to be called to clear all user preferences  		including both by
     *   device name & by device type. 	 		parameters are explained in devprestypes
     *   FIDL.
     */
    void UserPreferenceHandlerDBusProxy::clearAllPreferences(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eRequestStatus &_reqStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eRequestStatus, CommonAPI::EmptyDeployment> deploy_reqStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eRequestStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "clearAllPreferences",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_reqStatus);
_reqStatus = deploy_reqStatus.getValue();
}
    std::future<CommonAPI::CallStatus> UserPreferenceHandlerDBusProxy::clearAllPreferencesAsync(ClearAllPreferencesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eRequestStatus, CommonAPI::EmptyDeployment> deploy_reqStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eRequestStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "clearAllPreferences",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eRequestStatus, CommonAPI::EmptyDeployment> _reqStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _reqStatus.getValue());
        },
        std::make_tuple(deploy_reqStatus));
    }


void UserPreferenceHandlerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace pres
      } // namespace harman
      } // namespace com
      } // namespace v1
