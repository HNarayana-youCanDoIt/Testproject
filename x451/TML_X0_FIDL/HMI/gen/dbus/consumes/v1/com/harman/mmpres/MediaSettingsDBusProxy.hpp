/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Settings_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Settings_DBUS_PROXY_HPP_

#include <v1/com/harman/mmpres/MediaSettingsProxyBase.hpp>
#include "v1/com/harman/mmpres/MediaSettingsDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

class MediaSettingsDBusProxy
    : virtual public MediaSettingsProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    MediaSettingsDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~MediaSettingsDBusProxy() { }



    /**
     * description: reset all the Media related settings to the default.  		e: error code.
     */
    virtual void masterMediaReset(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> masterMediaResetAsync(MasterMediaResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: removes the database file of specified device on device ejection.
     * param: slotId: the specified slot id         returns:	  eCallResult:	Result of the API
     *   call
     */
    virtual void resetMediaIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> resetMediaIndexAsync(const uint8_t &_slotId, ResetMediaIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Updates the index of a device
     * param: slotId: the specified slot id         returns:	  e:	Result of the API call
     */
    virtual void updateIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> updateIndexAsync(const uint8_t &_slotId, UpdateIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Set Subtitle ON or OFF
     * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
     *   to disable subtitle
     */
    virtual void setSubtitle(const ::v1::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSubtitleAsync(const ::v1::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, SetSubtitleAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Set the display window coordinates of video playback
     * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
     *   manually assign by screeenDimension                 screeenDimension  Screen
     *   coordinates
     */
    virtual void setDisplayWindow(const bool &_isFullscreen, const ::v1::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setDisplayWindowAsync(const bool &_isFullscreen, const ::v1::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, SetDisplayWindowAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   


};

} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_MMPRES_Media_Settings_DBUS_PROXY_HPP_

