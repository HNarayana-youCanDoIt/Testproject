/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: This new interface is an extension of existing CallManager interface. 	This new
 *   interface is added to provide a common interface which will handles various
 *   	voice call scenarios from different modules like BT, Carplay etc.
 */
#include <v1/com/harman/btpres/CallManagerV2DBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCallManagerV2DBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<CallManagerV2DBusProxy>(_address, _connection);
}

INITIALIZER(registerCallManagerV2DBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		CallManagerV2::getInterface(),
		&createCallManagerV2DBusProxy);
}

CallManagerV2DBusProxy::CallManagerV2DBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		networkoperator_(*this, "onNetworkoperatorAttributeChanged", "a(siibssi)", "getNetworkoperatorAttribute", static_cast<::v7::com::harman::btpres::BTPresTypes_::networkOperatorListDeployment_t*>(nullptr)),
		signalCharge_(*this, "onSignalChargeAttributeChanged", "a(siii)", "getSignalChargeAttribute", static_cast<::v7::com::harman::btpres::BTPresTypes_::signalChargeListDeployment_t*>(nullptr)),
		handsfreeFeatures_(*this, "onHandsfreeFeaturesAttributeChanged", "a(sia{ib})", "getHandsfreeFeaturesAttribute", static_cast<::v7::com::harman::btpres::BTPresTypes_::hfpFeatureListDeployment_t*>(nullptr)),
		handsfreeModeStatus_(*this, "onHandsfreeModeStatusAttributeChanged", "a(sii)", "getHandsfreeModeStatusAttribute", static_cast<::v7::com::harman::btpres::BTPresTypes_::modeStatusListDeployment_t*>(nullptr)),
		audioModeStatus_(*this, "onAudioModeStatusAttributeChanged", "a(sii)", "getAudioModeStatusAttribute", static_cast<::v7::com::harman::btpres::BTPresTypes_::modeStatusListDeployment_t*>(nullptr)),
		vrModeStatus_(*this, "onVrModeStatusAttributeChanged", "a(sii)", "getVrModeStatusAttribute", static_cast<::v7::com::harman::btpres::BTPresTypes_::modeStatusListDeployment_t*>(nullptr)),
		callStates_(*this, "onCallStatesAttributeChanged", "a(sisssiybuiiss)", "getCallStatesAttribute", static_cast<::v7::com::harman::btpres::BTPresTypes_::callStateListDeployment_t*>(nullptr)),
		callDurations_(*this, "onCallDurationsAttributeChanged", "a(siyu)", "getCallDurationsAttribute", static_cast<::v7::com::harman::btpres::BTPresTypes_::callsDurationListDeployment_t*>(nullptr))
{
}

      CallManagerV2DBusProxy::NetworkoperatorAttribute& CallManagerV2DBusProxy::getNetworkoperatorAttribute() {
          return networkoperator_;
      }
      CallManagerV2DBusProxy::SignalChargeAttribute& CallManagerV2DBusProxy::getSignalChargeAttribute() {
          return signalCharge_;
      }
      CallManagerV2DBusProxy::HandsfreeFeaturesAttribute& CallManagerV2DBusProxy::getHandsfreeFeaturesAttribute() {
          return handsfreeFeatures_;
      }
      CallManagerV2DBusProxy::HandsfreeModeStatusAttribute& CallManagerV2DBusProxy::getHandsfreeModeStatusAttribute() {
          return handsfreeModeStatus_;
      }
      CallManagerV2DBusProxy::AudioModeStatusAttribute& CallManagerV2DBusProxy::getAudioModeStatusAttribute() {
          return audioModeStatus_;
      }
      CallManagerV2DBusProxy::VrModeStatusAttribute& CallManagerV2DBusProxy::getVrModeStatusAttribute() {
          return vrModeStatus_;
      }
      CallManagerV2DBusProxy::CallStatesAttribute& CallManagerV2DBusProxy::getCallStatesAttribute() {
          return callStates_;
      }
      CallManagerV2DBusProxy::CallDurationsAttribute& CallManagerV2DBusProxy::getCallDurationsAttribute() {
          return callDurations_;
      }

    
    /**
     * description: Clients should use this API to control voice calls from different modules
     * param: actionType (ePhoneCallActionType): Actions like Accept, Reject, EndCall etc.
     * param: callerInfo (sVoiceCallInfo)		 : contains caller informations like number,
     *   contactName etc. 		returns: errorCode (eErrorType)	: API execution output
     */
    void CallManagerV2DBusProxy::controlVoiceCall(const ::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType &_actionType, const ::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo &_callerInfo, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType, CommonAPI::EmptyDeployment> deploy_actionType(_actionType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo, ::v7::com::harman::btpres::BTPresTypes_::sVoiceCallInfoDeployment_t> deploy_callerInfo(_callerInfo, static_cast<::v7::com::harman::btpres::BTPresTypes_::sVoiceCallInfoDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo, ::v7::com::harman::btpres::BTPresTypes_::sVoiceCallInfoDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "controlVoiceCall",
        "i(sisssiyb)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_actionType, deploy_callerInfo,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CallManagerV2DBusProxy::controlVoiceCallAsync(const ::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType &_actionType, const ::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo &_callerInfo, ControlVoiceCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType, CommonAPI::EmptyDeployment> deploy_actionType(_actionType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo, ::v7::com::harman::btpres::BTPresTypes_::sVoiceCallInfoDeployment_t> deploy_callerInfo(_callerInfo, static_cast<::v7::com::harman::btpres::BTPresTypes_::sVoiceCallInfoDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo, ::v7::com::harman::btpres::BTPresTypes_::sVoiceCallInfoDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "controlVoiceCall",
        "i(sisssiyb)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_actionType, deploy_callerInfo,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }


void CallManagerV2DBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace btpres
      } // namespace harman
      } // namespace com
      } // namespace v1
