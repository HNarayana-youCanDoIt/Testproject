/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v1/com/harman/pres/cppresmediaDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace pres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createcppresmediaDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<cppresmediaDBusProxy>(_address, _connection);
}

INITIALIZER(registercppresmediaDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		cppresmedia::getInterface(),
		&createcppresmediaDBusProxy);
}

cppresmediaDBusProxy::cppresmediaDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		artWorkFilePath_(*this, "onArtWorkFilePathAttributeChanged", "s", "getArtWorkFilePathAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		nowPlayingArtworkStatus_(*this, "onNowPlayingArtworkStatusAttributeChanged", "i", "getNowPlayingArtworkStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		nowPlayingData_(*this, "onNowPlayingDataAttributeChanged", "(sssssssssstbtttbi)", "getNowPlayingDataAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sNowPlayingInfoDeployment_t*>(nullptr)),
		trackTimePosition_(*this, "onTrackTimePositionAttributeChanged", "(uu)", "getTrackTimePositionAttribute", static_cast<::v1::com::harman::pres::pprestypes_::tTrackTimePositionDeployment_t*>(nullptr)),
		playState_(*this, "onPlayStateAttributeChanged", "i", "getPlayStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
{
}

      cppresmediaDBusProxy::ArtWorkFilePathAttribute& cppresmediaDBusProxy::getArtWorkFilePathAttribute() {
          return artWorkFilePath_;
      }
      cppresmediaDBusProxy::NowPlayingArtworkStatusAttribute& cppresmediaDBusProxy::getNowPlayingArtworkStatusAttribute() {
          return nowPlayingArtworkStatus_;
      }
      cppresmediaDBusProxy::NowPlayingDataAttribute& cppresmediaDBusProxy::getNowPlayingDataAttribute() {
          return nowPlayingData_;
      }
      cppresmediaDBusProxy::TrackTimePositionAttribute& cppresmediaDBusProxy::getTrackTimePositionAttribute() {
          return trackTimePosition_;
      }
      cppresmediaDBusProxy::PlayStateAttribute& cppresmediaDBusProxy::getPlayStateAttribute() {
          return playState_;
      }

    
    void cppresmediaDBusProxy::getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::pprestypes::sAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::pres::pprestypes::sAlbumArtInformation, ::v1::com::harman::pres::pprestypes_::sAlbumArtInformationDeployment_t> deploy_albumArtInfo(static_cast<::v1::com::harman::pres::pprestypes_::sAlbumArtInformationDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::pprestypes::sAlbumArtInformation,::v1::com::harman::pres::pprestypes_::sAlbumArtInformationDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getNowPlayingAlbumArtInformation",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_albumArtInfo);
_albumArtInfo = deploy_albumArtInfo.getValue();
}
    std::future<CommonAPI::CallStatus> cppresmediaDBusProxy::getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v1::com::harman::pres::pprestypes::sAlbumArtInformation, ::v1::com::harman::pres::pprestypes_::sAlbumArtInformationDeployment_t> deploy_albumArtInfo(static_cast<::v1::com::harman::pres::pprestypes_::sAlbumArtInformationDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::pres::pprestypes::sAlbumArtInformation,::v1::com::harman::pres::pprestypes_::sAlbumArtInformationDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getNowPlayingAlbumArtInformation",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::pres::pprestypes::sAlbumArtInformation, ::v1::com::harman::pres::pprestypes_::sAlbumArtInformationDeployment_t> _albumArtInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _albumArtInfo.getValue());
        },
        std::make_tuple(deploy_albumArtInfo));
    }
    /**
     * description: This request method allow client to  retrieves the album art image path for the
     *   currently playing track.      Here HMI has to pass the number of the album
     *   art.The total available artworks would have already supplied in the previous
     *   call      to getNowPlayingAlbumArtInformation.
     */
    void cppresmediaDBusProxy::getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_imageNumber(_imageNumber, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getNowPlayingAlbumArtPath",
        "y",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_imageNumber,
_internalCallStatus,
deploy_path);
_path = deploy_path.getValue();
}
    std::future<CommonAPI::CallStatus> cppresmediaDBusProxy::getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_imageNumber(_imageNumber, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_path(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getNowPlayingAlbumArtPath",
        "y",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_imageNumber,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _path) {
        	if (_callback)
        		_callback(_internalCallStatus, _path.getValue());
        },
        std::make_tuple(deploy_path));
    }


void cppresmediaDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 1;
      }

      } // namespace pres
      } // namespace harman
      } // namespace com
      } // namespace v1
