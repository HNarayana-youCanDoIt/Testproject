/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_aaprescontrols_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_PRES_aaprescontrols_DBUS_PROXY_HPP_

#include <v1/com/harman/pres/aaprescontrolsProxyBase.hpp>
#include "v1/com/harman/pres/aaprescontrolsDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace pres {

class aaprescontrolsDBusProxy
    : virtual public aaprescontrolsProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    aaprescontrolsDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~aaprescontrolsDBusProxy() { }

    virtual SessionAttribute& getSessionAttribute();
    virtual DeviceInfoAttribute& getDeviceInfoAttribute();
    virtual BatteryInfoAttribute& getBatteryInfoAttribute();
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute();
    virtual SongNodeAttribute& getSongNodeAttribute();
    virtual MetadataAttribute& getMetadataAttribute();
    virtual TurnInfoAttribute& getTurnInfoAttribute();
    virtual TurnDistInfoAttribute& getTurnDistInfoAttribute();
    virtual NavFocusTypeAttribute& getNavFocusTypeAttribute();
    virtual NavStatusTypeAttribute& getNavStatusTypeAttribute();


    /**
     * description: Message indicates that the AndroidAuto session is requested
     */
    virtual void startProjection(const std::string &_appUrl, const ::v2::com::harman::pres::aaprestypes::sTransportInfo &_tranportInfo, const ::v2::com::harman::pres::aaprestypes::enTransportType &_type, CommonAPI::CallStatus &_internalCallStatus);
    virtual void stopProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This request method allows client to request for the Projection screen        
     *   	show : true - show 		false - hide , If false client can disregard layer and
     *   appUrl 	appUrl : URL identifier of the desired application to launch 	  Blank
     *   String: native screen will be launched 	  other apps: tbd
     */
    virtual void requestProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method to request for the screen hide 	switchReason : reason for switching out
     *   of the android auto screen , refer enum values
     */
    virtual void requestNative(const ::v2::com::harman::pres::aaprestypes::eScreenSwitchReason &_switchReason, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: WIFI_AA Method to request connection to a wireless android device
     */
    virtual void connect(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: WIFI_AA  Method allows client to request for disconnection of current active
     *   device
     */
    virtual void disconnect(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: WIFI_AA  Method allows client to request for the deletion of the device from
     *   the wireless androidauto device list
     */
    virtual void deleteDevice(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: WIFI_AA  This request method allows client to request for cancelling the
     *   ongoing connect process.
     */
    virtual void cancelConnect(CommonAPI::CallStatus &_internalCallStatus);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SessionAttribute, ::v1::com::harman::pres::pprestypes_::sSessionDetailsDeployment_t>> session_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DeviceInfoAttribute, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t>>> deviceInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BatteryInfoAttribute, ::v1::com::harman::pres::pprestypes_::sBatteryLevelInfoDeployment_t>> batteryInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlaybackStatusAttribute, ::v1::com::harman::pres::pprestypes_::sMediaPlaybackStatusUpdateDeployment_t>> playbackStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SongNodeAttribute, ::v1::com::harman::pres::pprestypes_::sSongNodeUpdateDeployment_t>> songNode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MetadataAttribute, ::v1::com::harman::pres::pprestypes_::sMetaDataUpdateDeployment_t>> metadata_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TurnInfoAttribute, ::v1::com::harman::pres::pprestypes_::sNaviNextTurnInfoDeployment_t>> turnInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TurnDistInfoAttribute, ::v1::com::harman::pres::pprestypes_::sNaviNextTurnDistInfoDeployment_t>> turnDistInfo_;
    class DBusnavFocusType_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NavFocusTypeAttribute>> {
    public:
    template <typename... _A>
    	DBusnavFocusType_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NavFocusTypeAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusnavFocusType_Attribute navFocusType_;
    class DBusnavStatusType_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NavStatusTypeAttribute>> {
    public:
    template <typename... _A>
    	DBusnavStatusType_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NavStatusTypeAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusnavStatusType_Attribute navStatusType_;


};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_PRES_aaprescontrols_DBUS_PROXY_HPP_

