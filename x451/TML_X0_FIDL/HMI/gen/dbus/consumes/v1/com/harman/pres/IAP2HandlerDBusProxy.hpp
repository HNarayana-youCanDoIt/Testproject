/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_IAP2_Handler_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_PRES_IAP2_Handler_DBUS_PROXY_HPP_

#include <v1/com/harman/pres/IAP2HandlerProxyBase.hpp>
#include "v1/com/harman/pres/IAP2HandlerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace pres {

class IAP2HandlerDBusProxy
    : virtual public IAP2HandlerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    IAP2HandlerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~IAP2HandlerDBusProxy() { }


    virtual IAP2StartedEvent& getIAP2StartedEvent();
    virtual IAP2StoppedEvent& getIAP2StoppedEvent();

    /**
     * description: This method to be called to start IAP2 driver. 	 		This is to be called for
     *   transport over BT & WIFI.  		For USB_HOST & USB_DEVICE transports,
     *   devPresCntrl itself starts IAP2 driver. 		 		dbus instanceName of launched
     *   IAP2 driver can be found with broadcast "IAP2Started".
     */
    virtual void startIAP2(const ::v1::com::harman::pres::devprestypes::eIAP2Transport &_transport, const std::vector<::v1::com::harman::pres::devprestypes::eIAP2Mode> &_modes, const std::string &_devicePath, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startIAP2Async(const ::v1::com::harman::pres::devprestypes::eIAP2Transport &_transport, const std::vector<::v1::com::harman::pres::devprestypes::eIAP2Mode> &_modes, const std::string &_devicePath, StartIAP2AsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method to be called to stop IAP2 driver. 	 		"instanceName" : dbus
     *   instanceName of IAP2 driver to be terminated.
     */
    virtual void stopIAP2(const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopIAP2Async(const std::string &_instanceName, StopIAP2AsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This getter notifies dbus instanceName of IAP2 currently launched. 
     *   	"devicepath" is only applicable for USB_HOST, BT & WIFI transports.
     *   	"deviceId" is only applicable for USB_HOST & USB_DEVICE.  	instanceName and
     *   devicePath will be null if iap2 is not active
     */
    virtual void getIAP2Started(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::vIAP2Info &_iap2StackInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getIAP2StartedAsync(GetIAP2StartedAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<IAP2StartedEvent, CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::eIAP2Transport, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v1::com::harman::pres::devprestypes::eIAP2Mode>, CommonAPI::DBus::ArrayDeployment<CommonAPI::EmptyDeployment>>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> iAP2Started_;
    CommonAPI::DBus::DBusEvent<IAP2StoppedEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> iAP2Stopped_;

};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_PRES_IAP2_Handler_DBUS_PROXY_HPP_

