/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v1/com/harman/UISpeechService/UISpeechIntfDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace UISpeechService {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createUISpeechIntfDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<UISpeechIntfDBusProxy>(_address, _connection);
}

INITIALIZER(registerUISpeechIntfDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		UISpeechIntf::getInterface(),
		&createUISpeechIntfDBusProxy);
}

UISpeechIntfDBusProxy::UISpeechIntfDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		ttsAvailableState_(*this, "onTtsAvailableStateAttributeChanged", "(bs)", "getTtsAvailableStateAttribute", static_cast<::v1::com::harman::UISpeechService::UISSTypes_::sTTSAvailableDeployment_t*>(nullptr)),
		ttsPlayState_(*this, "onTtsPlayStateAttributeChanged", "(is)", "getTtsPlayStateAttribute", static_cast<::v1::com::harman::UISpeechService::UISSTypes_::sTTSPlayStateDeployment_t*>(nullptr)),
		voiceRecognitionState_(*this, "onVoiceRecognitionStateAttributeChanged", "i", "getVoiceRecognitionStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		vrDialogActiveState_(*this, "onVrDialogActiveStateAttributeChanged", "i", "getVrDialogActiveStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		vrAvailableState_(*this, "onVrAvailableStateAttributeChanged", "(bs)", "getVrAvailableStateAttribute", static_cast<::v1::com::harman::UISpeechService::UISSTypes_::sVRAvailableDeployment_t*>(nullptr))
{
}

      UISpeechIntfDBusProxy::TtsAvailableStateAttribute& UISpeechIntfDBusProxy::getTtsAvailableStateAttribute() {
          return ttsAvailableState_;
      }
      UISpeechIntfDBusProxy::TtsPlayStateAttribute& UISpeechIntfDBusProxy::getTtsPlayStateAttribute() {
          return ttsPlayState_;
      }
      UISpeechIntfDBusProxy::VoiceRecognitionStateAttribute& UISpeechIntfDBusProxy::getVoiceRecognitionStateAttribute() {
          return voiceRecognitionState_;
      }
      UISpeechIntfDBusProxy::VrDialogActiveStateAttribute& UISpeechIntfDBusProxy::getVrDialogActiveStateAttribute() {
          return vrDialogActiveState_;
      }
      UISpeechIntfDBusProxy::VrAvailableStateAttribute& UISpeechIntfDBusProxy::getVrAvailableStateAttribute() {
          return vrAvailableState_;
      }

    
    /**
     * description: The interface provides text readout and prompt readout
     * author: Shrinivas Kulkarni
     */
    void UISpeechIntfDBusProxy::ttsReadOut(const std::string &_data, const bool &_dataisFile, const std::string &_domain, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::UISpeechService::UISSTypes::eReturnCode &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_data(_data, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_dataisFile(_dataisFile, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_domain(_domain, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::UISpeechService::UISSTypes::eReturnCode, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::UISpeechService::UISSTypes::eReturnCode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "ttsReadOut",
        "sbs",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_data, deploy_dataisFile, deploy_domain,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> UISpeechIntfDBusProxy::ttsReadOutAsync(const std::string &_data, const bool &_dataisFile, const std::string &_domain, TtsReadOutAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_data(_data, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_dataisFile(_dataisFile, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_domain(_domain, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v1::com::harman::UISpeechService::UISSTypes::eReturnCode, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v1::com::harman::UISpeechService::UISSTypes::eReturnCode,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "ttsReadOut",
        "sbs",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_data, deploy_dataisFile, deploy_domain,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v1::com::harman::UISpeechService::UISSTypes::eReturnCode, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }


void UISpeechIntfDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace UISpeechService
      } // namespace harman
      } // namespace com
      } // namespace v1
