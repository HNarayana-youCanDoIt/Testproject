/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: This new interface is an extension of existing CallManager interface. 	This new
 *   interface is added to provide a common interface which will handles various
 *   	voice call scenarios from different modules like BT, Carplay etc.
 */
#ifndef V1_COM_HARMAN_BTPRES_Call_Manager_V2_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_BTPRES_Call_Manager_V2_DBUS_PROXY_HPP_

#include <v1/com/harman/btpres/CallManagerV2ProxyBase.hpp>
#include "v1/com/harman/btpres/CallManagerV2DBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

class CallManagerV2DBusProxy
    : virtual public CallManagerV2ProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    CallManagerV2DBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~CallManagerV2DBusProxy() { }

    virtual NetworkoperatorAttribute& getNetworkoperatorAttribute();
    virtual SignalChargeAttribute& getSignalChargeAttribute();
    virtual HandsfreeFeaturesAttribute& getHandsfreeFeaturesAttribute();
    virtual HandsfreeModeStatusAttribute& getHandsfreeModeStatusAttribute();
    virtual AudioModeStatusAttribute& getAudioModeStatusAttribute();
    virtual VrModeStatusAttribute& getVrModeStatusAttribute();
    virtual CallStatesAttribute& getCallStatesAttribute();
    virtual CallDurationsAttribute& getCallDurationsAttribute();


    /**
     * description: Clients should use this API to control voice calls from different modules
     * param: actionType (ePhoneCallActionType): Actions like Accept, Reject, EndCall etc.
     * param: callerInfo (sVoiceCallInfo)		 : contains caller informations like number,
     *   contactName etc. 		returns: errorCode (eErrorType)	: API execution output
     */
    virtual void controlVoiceCall(const ::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType &_actionType, const ::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo &_callerInfo, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> controlVoiceCallAsync(const ::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType &_actionType, const ::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo &_callerInfo, ControlVoiceCallAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NetworkoperatorAttribute, ::v7::com::harman::btpres::BTPresTypes_::networkOperatorListDeployment_t>> networkoperator_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SignalChargeAttribute, ::v7::com::harman::btpres::BTPresTypes_::signalChargeListDeployment_t>> signalCharge_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HandsfreeFeaturesAttribute, ::v7::com::harman::btpres::BTPresTypes_::hfpFeatureListDeployment_t>> handsfreeFeatures_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HandsfreeModeStatusAttribute, ::v7::com::harman::btpres::BTPresTypes_::modeStatusListDeployment_t>> handsfreeModeStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AudioModeStatusAttribute, ::v7::com::harman::btpres::BTPresTypes_::modeStatusListDeployment_t>> audioModeStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VrModeStatusAttribute, ::v7::com::harman::btpres::BTPresTypes_::modeStatusListDeployment_t>> vrModeStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CallStatesAttribute, ::v7::com::harman::btpres::BTPresTypes_::callStateListDeployment_t>> callStates_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CallDurationsAttribute, ::v7::com::harman::btpres::BTPresTypes_::callsDurationListDeployment_t>> callDurations_;


};

} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_BTPRES_Call_Manager_V2_DBUS_PROXY_HPP_

