/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Orinoco specific tuner introspection interface. This interface is a facade to a
 *   bunch of platform     interfaces in order to provide a simplified access to
 *   tuner diagnosis/engineering data and functionality.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2016
 */
#ifndef V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_DBUS_PROXY_HPP_

#include <v1/com/harman/tuner/OrinocoTunerIntrospectionProxyBase.hpp>
#include "v1/com/harman/tuner/OrinocoTunerIntrospectionDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace tuner {

class OrinocoTunerIntrospectionDBusProxy
    : virtual public OrinocoTunerIntrospectionProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    OrinocoTunerIntrospectionDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~OrinocoTunerIntrospectionDBusProxy() { }

    virtual PowerSyncAttribute& getPowerSyncAttribute();
    virtual AntennaInfosAttribute& getAntennaInfosAttribute();
    virtual DevicesInIntrospectionModeAttribute& getDevicesInIntrospectionModeAttribute();
    virtual VersionInfosAttribute& getVersionInfosAttribute();
    virtual ActiveErrorsAttribute& getActiveErrorsAttribute();

    virtual FactoryResetEvent& getFactoryResetEvent();
    virtual QualityMonitorEvent& getQualityMonitorEvent();

    /**
     * description: Perform factory reset of peristent data, broadcast factoryReset will be called
     *   when done
     */
    virtual void performFactoryReset(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode &_factoryResetMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> performFactoryResetAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode &_factoryResetMode, PerformFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Disable/enable antenna power supply. After toggling the power supply the
     *   corresponding "antennaInfo"        entry will change
     */
    virtual void switchAntennaPowerSupply(const std::string &_name, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> switchAntennaPowerSupplyAsync(const std::string &_name, const bool &_enable, SwitchAntennaPowerSupplyAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Enable introspection mode        CAUTION: The introspection mode can lead to
     *   unexspected behavior and reduced functionality, don't forget to disable again!
     */
    virtual void switchIntrospectionMode(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> switchIntrospectionModeAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const bool &_enable, SwitchIntrospectionModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: 
     */
    virtual void tune(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const uint8_t &_deviceInstance, const uint32_t &_frequency, const std::string &_frequencyLabel, const bool &_automaticServiceSelection, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> tuneAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const uint8_t &_deviceInstance, const uint32_t &_frequency, const std::string &_frequencyLabel, const bool &_automaticServiceSelection, TuneAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Start/stop sending the quality values for a specific device incl. cyclic
     *   updates (via qualityMonitor).
     */
    virtual void controlQualityMonitor(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> controlQualityMonitorAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, ControlQualityMonitorAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PowerSyncAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::UInt32sDeployment_t>> powerSync_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AntennaInfosAttribute, ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes_::AntennaInfosDeployment_t>> antennaInfos_;
    class DBusdevicesInIntrospectionMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DevicesInIntrospectionModeAttribute>> {
    public:
    template <typename... _A>
    	DBusdevicesInIntrospectionMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DevicesInIntrospectionModeAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusdevicesInIntrospectionMode_Attribute devicesInIntrospectionMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VersionInfosAttribute, ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes_::VersionInfosDeployment_t>> versionInfos_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ActiveErrorsAttribute, ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes_::ErrorElementsDeployment_t>> activeErrors_;

    CommonAPI::DBus::DBusEvent<FactoryResetEvent, CommonAPI::Deployable<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode, CommonAPI::EmptyDeployment>> factoryReset_;
    CommonAPI::DBus::DBusEvent<QualityMonitorEvent, CommonAPI::Deployable<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::QualityAmFms, ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes_::QualityAmFmsDeployment_t>, CommonAPI::Deployable<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::QualityDabs, ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes_::QualityDabsDeployment_t>, CommonAPI::Deployable<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::QualityDrms, ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes_::QualityDrmsDeployment_t>> qualityMonitor_;

};

} // namespace tuner
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_DBUS_PROXY_HPP_

