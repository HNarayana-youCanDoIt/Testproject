/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_cppresmedia_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_PRES_cppresmedia_DBUS_PROXY_HPP_

#include <v1/com/harman/pres/cppresmediaProxyBase.hpp>
#include "v1/com/harman/pres/cppresmediaDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace pres {

class cppresmediaDBusProxy
    : virtual public cppresmediaProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    cppresmediaDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~cppresmediaDBusProxy() { }

    virtual ArtWorkFilePathAttribute& getArtWorkFilePathAttribute();
    virtual NowPlayingArtworkStatusAttribute& getNowPlayingArtworkStatusAttribute();
    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute();
    virtual TrackTimePositionAttribute& getTrackTimePositionAttribute();
    virtual PlayStateAttribute& getPlayStateAttribute();


    virtual void getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::pprestypes::sAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This request method allow client to  retrieves the album art image path for the
     *   currently playing track.      Here HMI has to pass the number of the album
     *   art.The total available artworks would have already supplied in the previous
     *   call      to getNowPlayingAlbumArtInformation.
     */
    virtual void getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ArtWorkFilePathAttribute, CommonAPI::DBus::StringDeployment>> artWorkFilePath_;
    class DBusnowPlayingArtworkStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NowPlayingArtworkStatusAttribute>> {
    public:
    template <typename... _A>
    	DBusnowPlayingArtworkStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NowPlayingArtworkStatusAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusnowPlayingArtworkStatus_Attribute nowPlayingArtworkStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NowPlayingDataAttribute, ::v1::com::harman::pres::pprestypes_::sNowPlayingInfoDeployment_t>> nowPlayingData_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TrackTimePositionAttribute, ::v1::com::harman::pres::pprestypes_::tTrackTimePositionDeployment_t>> trackTimePosition_;
    class DBusplayState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlayStateAttribute>> {
    public:
    template <typename... _A>
    	DBusplayState_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PlayStateAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusplayState_Attribute playState_;


};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_PRES_cppresmedia_DBUS_PROXY_HPP_

