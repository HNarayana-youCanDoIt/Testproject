/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v1/com/harman/dcif/RCAServiceDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace dcif {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createRCAServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<RCAServiceDBusProxy>(_address, _connection);
}

INITIALIZER(registerRCAServiceDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		RCAService::getInterface(),
		&createRCAServiceDBusProxy);
}

RCAServiceDBusProxy::RCAServiceDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		actionInitiatedFromTSR_(*this, "actionInitiatedFromTSR", "iy", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}


RCAServiceDBusProxy::ActionInitiatedFromTSREvent& RCAServiceDBusProxy::getActionInitiatedFromTSREvent() {
    return actionInitiatedFromTSR_;
}
    
    void RCAServiceDBusProxy::getHMIBrowseStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_HMIBrowseStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_HMIBrowseStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getHMIBrowseStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_HMIBrowseStatus);
_HMIBrowseStatus = deploy_HMIBrowseStatus.getValue();
}
    std::future<CommonAPI::CallStatus> RCAServiceDBusProxy::getHMIBrowseStatusAsync(GetHMIBrowseStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_HMIBrowseStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getHMIBrowseStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _HMIBrowseStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _HMIBrowseStatus.getValue());
        },
        std::make_tuple(deploy_HMIBrowseStatus));
    }
    void RCAServiceDBusProxy::setHMIBrowseStatus(const bool &_HMIBrowseStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_Ret_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_HMIBrowseStatus(_HMIBrowseStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_Ret_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setHMIBrowseStatus",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_HMIBrowseStatus,
_internalCallStatus,
deploy_Ret_status);
_Ret_status = deploy_Ret_status.getValue();
}
    std::future<CommonAPI::CallStatus> RCAServiceDBusProxy::setHMIBrowseStatusAsync(const bool &_HMIBrowseStatus, SetHMIBrowseStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_HMIBrowseStatus(_HMIBrowseStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_Ret_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setHMIBrowseStatus",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_HMIBrowseStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _Ret_status) {
        	if (_callback)
        		_callback(_internalCallStatus, _Ret_status.getValue());
        },
        std::make_tuple(deploy_Ret_status));
    }


void RCAServiceDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace dcif
      } // namespace harman
      } // namespace com
      } // namespace v1
