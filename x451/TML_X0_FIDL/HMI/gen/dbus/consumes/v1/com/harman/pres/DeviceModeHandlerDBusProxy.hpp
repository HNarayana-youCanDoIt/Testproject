/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_Device_Mode_Handler_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_PRES_Device_Mode_Handler_DBUS_PROXY_HPP_

#include <v1/com/harman/pres/DeviceModeHandlerProxyBase.hpp>
#include "v1/com/harman/pres/DeviceModeHandlerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace pres {

class DeviceModeHandlerDBusProxy
    : virtual public DeviceModeHandlerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    DeviceModeHandlerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~DeviceModeHandlerDBusProxy() { }


    virtual DeviceInsertedEvent& getDeviceInsertedEvent();
    virtual DeviceRemovedEvent& getDeviceRemovedEvent();
    virtual ModeStatusEvent& getModeStatusEvent();

    /**
     * description: This method to be called to get device details. 		parameters are explained in
     *   devprestypes FIDL.
     */
    virtual void getDeviceDetails(const ::v1::com::harman::pres::devprestypes::eDeviceFilter &_devFilter, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, ::v1::com::harman::pres::devprestypes::eRequestStatus &_reqStatus, std::vector<::v1::com::harman::pres::devprestypes::sDeviceInfo> &_devDetails, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDeviceDetailsAsync(const ::v1::com::harman::pres::devprestypes::eDeviceFilter &_devFilter, GetDeviceDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method to be called to delete device from known wifi projection device
     *   list. 	 		The confirmation for this request happens with broadcast
     *   "deviceRemoved" 						 		parameters are explained in devprestypes FIDL.
     */
    virtual void deleteDevice(const uint8_t &_Id, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const uint8_t &_Id, DeleteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: (WIFI_AA/WIFI_CP) This is to be called whenever user wants to search for new
     *   wifi devices and pair                         Once the connected devices list
     *   comes to HMI, user can start session on any one of them                       
     *    User has to provide the mode as input, based on which corresponding devices
     *   will be paired and given back
     */
    virtual void searchAndPairWifiDevices(const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> searchAndPairWifiDevicesAsync(const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, SearchAndPairWifiDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method to be called whenever user selects a mode and mode is in CAPABLE
     *   state (session to be established). 		If mode is in ACTIVE state (session
     *   already established), HMI should communicate with corresponding pres control
     *   to control the device. 		 		when this method gets called, devPresCntrl updates
     *   status through a broadcast "modeStatus". 		 		If user wants to close
     *   conflicting modes before starting requested mode, "forceStart" should be set
     *   to TRUE.  		otherwise "forceStart" should be set to FALSE. 		 		other
     *   parameters are explained in devprestypes FIDL.
     */
    virtual void startMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, const bool &_forceStart, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, const bool &_forceStart, StartModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method to be called whenever user wants to terminate an active mode. 				
     *   		when this method gets called, devPresCntrl updates status through a
     *   broadcast "modeStatus". 			 		parameters are explained in devprestypes FIDL.
     */
    virtual void stopMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, StopModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method to be called to cancel ongoing "startMode" request. 	 		when this
     *   method gets called, devPresCntrl updates status through a broadcast
     *   "modeStatus". 		 		parameters are explained in devprestypes FIDL.
     */
    virtual void cancelMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> cancelModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CancelModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This broadcast gets emitted, whenever device is inserted. 		parameters are
     *   explained in devprestypes FIDL.
     */
    virtual void getinserteddeviceinfo(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::vDeviceInfo &_devInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getinserteddeviceinfoAsync(GetinserteddeviceinfoAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<DeviceInsertedEvent, CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::sDeviceInfo, ::v1::com::harman::pres::devprestypes_::sDeviceInfoDeployment_t>> deviceInserted_;
    CommonAPI::DBus::DBusEvent<DeviceRemovedEvent, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>> deviceRemoved_;
    CommonAPI::DBus::DBusEvent<ModeStatusEvent, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<std::vector<::v1::com::harman::pres::devprestypes::sConflictMode>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::devprestypes_::sConflictModeDeployment_t>>, CommonAPI::Deployable<::v1::com::harman::pres::devprestypes::sModeInfo, ::v1::com::harman::pres::devprestypes_::sModeInfoDeployment_t>> modeStatus_;

};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_PRES_Device_Mode_Handler_DBUS_PROXY_HPP_

