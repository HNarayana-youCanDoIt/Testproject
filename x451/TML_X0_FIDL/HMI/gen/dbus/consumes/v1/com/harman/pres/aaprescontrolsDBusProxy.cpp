/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v1/com/harman/pres/aaprescontrolsDBusProxy.hpp>

namespace v1 {
namespace com {
namespace harman {
namespace pres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createaaprescontrolsDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<aaprescontrolsDBusProxy>(_address, _connection);
}

INITIALIZER(registeraaprescontrolsDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		aaprescontrols::getInterface(),
		&createaaprescontrolsDBusProxy);
}

aaprescontrolsDBusProxy::aaprescontrolsDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		session_(*this, "onSessionAttributeChanged", "(sssbiib)", "getSessionAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sSessionDetailsDeployment_t*>(nullptr)),
		deviceInfo_(*this, "onDeviceInfoAttributeChanged", "a(sssbi)", "getDeviceInfoAttribute", static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t>*>(nullptr)),
		batteryInfo_(*this, "onBatteryInfoAttributeChanged", "(iib)", "getBatteryInfoAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sBatteryLevelInfoDeployment_t*>(nullptr)),
		playbackStatus_(*this, "onPlaybackStatusAttributeChanged", "(isubbb)", "getPlaybackStatusAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sMediaPlaybackStatusUpdateDeployment_t*>(nullptr)),
		songNode_(*this, "onSongNodeAttributeChanged", "(sssssu)", "getSongNodeAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sSongNodeUpdateDeployment_t*>(nullptr)),
		metadata_(*this, "onMetadataAttributeChanged", "(sssssui)", "getMetadataAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sMetaDataUpdateDeployment_t*>(nullptr)),
		turnInfo_(*this, "onTurnInfoAttributeChanged", "(siisii)", "getTurnInfoAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sNaviNextTurnInfoDeployment_t*>(nullptr)),
		turnDistInfo_(*this, "onTurnDistInfoAttributeChanged", "(iiii)", "getTurnDistInfoAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sNaviNextTurnDistInfoDeployment_t*>(nullptr)),
		navFocusType_(*this, "onNavFocusTypeAttributeChanged", "i", "getNavFocusTypeAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		navStatusType_(*this, "onNavStatusTypeAttributeChanged", "i", "getNavStatusTypeAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
{
}

      aaprescontrolsDBusProxy::SessionAttribute& aaprescontrolsDBusProxy::getSessionAttribute() {
          return session_;
      }
      aaprescontrolsDBusProxy::DeviceInfoAttribute& aaprescontrolsDBusProxy::getDeviceInfoAttribute() {
          return deviceInfo_;
      }
      aaprescontrolsDBusProxy::BatteryInfoAttribute& aaprescontrolsDBusProxy::getBatteryInfoAttribute() {
          return batteryInfo_;
      }
      aaprescontrolsDBusProxy::PlaybackStatusAttribute& aaprescontrolsDBusProxy::getPlaybackStatusAttribute() {
          return playbackStatus_;
      }
      aaprescontrolsDBusProxy::SongNodeAttribute& aaprescontrolsDBusProxy::getSongNodeAttribute() {
          return songNode_;
      }
      aaprescontrolsDBusProxy::MetadataAttribute& aaprescontrolsDBusProxy::getMetadataAttribute() {
          return metadata_;
      }
      aaprescontrolsDBusProxy::TurnInfoAttribute& aaprescontrolsDBusProxy::getTurnInfoAttribute() {
          return turnInfo_;
      }
      aaprescontrolsDBusProxy::TurnDistInfoAttribute& aaprescontrolsDBusProxy::getTurnDistInfoAttribute() {
          return turnDistInfo_;
      }
      aaprescontrolsDBusProxy::NavFocusTypeAttribute& aaprescontrolsDBusProxy::getNavFocusTypeAttribute() {
          return navFocusType_;
      }
      aaprescontrolsDBusProxy::NavStatusTypeAttribute& aaprescontrolsDBusProxy::getNavStatusTypeAttribute() {
          return navStatusType_;
      }

    
    /**
     * description: Message indicates that the AndroidAuto session is requested
     */
    void aaprescontrolsDBusProxy::startProjection(const std::string &_appUrl, const ::v2::com::harman::pres::aaprestypes::sTransportInfo &_tranportInfo, const ::v2::com::harman::pres::aaprestypes::enTransportType &_type, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_appUrl(_appUrl, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::pres::aaprestypes::sTransportInfo, ::v2::com::harman::pres::aaprestypes_::sTransportInfoDeployment_t> deploy_tranportInfo(_tranportInfo, static_cast<::v2::com::harman::pres::aaprestypes_::sTransportInfoDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v2::com::harman::pres::aaprestypes::enTransportType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<::v2::com::harman::pres::aaprestypes::sTransportInfo, ::v2::com::harman::pres::aaprestypes_::sTransportInfoDeployment_t >,
            CommonAPI::Deployable<::v2::com::harman::pres::aaprestypes::enTransportType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "startProjection",
        "s((iis)(ss))i",
deploy_appUrl, deploy_tranportInfo, deploy_type,
_internalCallStatus);
}
    void aaprescontrolsDBusProxy::stopProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_appUrl(_appUrl, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "stopProjection",
        "s",
deploy_appUrl,
_internalCallStatus);
}
    /**
     * description: This request method allows client to request for the Projection screen        
     *   	show : true - show 		false - hide , If false client can disregard layer and
     *   appUrl 	appUrl : URL identifier of the desired application to launch 	  Blank
     *   String: native screen will be launched 	  other apps: tbd
     */
    void aaprescontrolsDBusProxy::requestProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_appUrl(_appUrl, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "requestProjection",
        "s",
deploy_appUrl,
_internalCallStatus);
}
    /**
     * description: Method to request for the screen hide 	switchReason : reason for switching out
     *   of the android auto screen , refer enum values
     */
    void aaprescontrolsDBusProxy::requestNative(const ::v2::com::harman::pres::aaprestypes::eScreenSwitchReason &_switchReason, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<::v2::com::harman::pres::aaprestypes::eScreenSwitchReason, CommonAPI::EmptyDeployment> deploy_switchReason(_switchReason, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::com::harman::pres::aaprestypes::eScreenSwitchReason, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "requestNative",
        "i",
deploy_switchReason,
_internalCallStatus);
}
    /**
     * description: WIFI_AA Method to request connection to a wireless android device
     */
    void aaprescontrolsDBusProxy::connect(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_btAddr(_btAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "connect",
        "s",
deploy_btAddr,
_internalCallStatus);
}
    /**
     * description: WIFI_AA  Method allows client to request for disconnection of current active
     *   device
     */
    void aaprescontrolsDBusProxy::disconnect(CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "disconnect",
        "",
_internalCallStatus);
}
    /**
     * description: WIFI_AA  Method allows client to request for the deletion of the device from
     *   the wireless androidauto device list
     */
    void aaprescontrolsDBusProxy::deleteDevice(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_btAddr(_btAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "deleteDevice",
        "s",
deploy_btAddr,
_internalCallStatus);
}
    /**
     * description: WIFI_AA  This request method allows client to request for cancelling the
     *   ongoing connect process.
     */
    void aaprescontrolsDBusProxy::cancelConnect(CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "cancelConnect",
        "",
_internalCallStatus);
}


void aaprescontrolsDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 1;
      }

      } // namespace pres
      } // namespace harman
      } // namespace com
      } // namespace v1
