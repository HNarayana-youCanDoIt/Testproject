/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_DBUS_PROXY_HPP_
#define V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_DBUS_PROXY_HPP_

#include <v1/com/harman/UISpeechService/UISpeechIntfProxyBase.hpp>
#include "v1/com/harman/UISpeechService/UISpeechIntfDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace com {
namespace harman {
namespace UISpeechService {

class UISpeechIntfDBusProxy
    : virtual public UISpeechIntfProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    UISpeechIntfDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~UISpeechIntfDBusProxy() { }

    virtual TtsAvailableStateAttribute& getTtsAvailableStateAttribute();
    virtual TtsPlayStateAttribute& getTtsPlayStateAttribute();
    virtual VoiceRecognitionStateAttribute& getVoiceRecognitionStateAttribute();
    virtual VrDialogActiveStateAttribute& getVrDialogActiveStateAttribute();
    virtual VrAvailableStateAttribute& getVrAvailableStateAttribute();


    /**
     * description: The interface provides text readout and prompt readout
     * author: Shrinivas Kulkarni
     */
    virtual void ttsReadOut(const std::string &_data, const bool &_dataisFile, const std::string &_domain, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::UISpeechService::UISSTypes::eReturnCode &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ttsReadOutAsync(const std::string &_data, const bool &_dataisFile, const std::string &_domain, TtsReadOutAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TtsAvailableStateAttribute, ::v1::com::harman::UISpeechService::UISSTypes_::sTTSAvailableDeployment_t>> ttsAvailableState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TtsPlayStateAttribute, ::v1::com::harman::UISpeechService::UISSTypes_::sTTSPlayStateDeployment_t>> ttsPlayState_;
    class DBusvoiceRecognitionState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VoiceRecognitionStateAttribute>> {
    public:
    template <typename... _A>
    	DBusvoiceRecognitionState_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VoiceRecognitionStateAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusvoiceRecognitionState_Attribute voiceRecognitionState_;
    class DBusvrDialogActiveState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VrDialogActiveStateAttribute>> {
    public:
    template <typename... _A>
    	DBusvrDialogActiveState_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VrDialogActiveStateAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusvrDialogActiveState_Attribute vrDialogActiveState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VrAvailableStateAttribute, ::v1::com::harman::UISpeechService::UISSTypes_::sVRAvailableDeployment_t>> vrAvailableState_;


};

} // namespace UISpeechService
} // namespace harman
} // namespace com
} // namespace v1

#endif // V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_DBUS_PROXY_HPP_

