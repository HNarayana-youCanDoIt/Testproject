/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Interface for managing the GENIVI LUC (Last User Context)      The GENIVI Node
 *   Startup Controller remembers applications that were used     in the last
 *   session of a user. It is used in order to restore these     applications on
 *   the next start-up.      The Node Startup Controller is a passive component in
 *   the sense that it     does not remember applications on its own; instead,
 *   applications need to     register and deregister themselves proactively.     
 *   Applications can be registered for different LUC types, the standard ones
 * author: Giridhar
 */
#ifndef V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_Node_Startup_Controller_DBUS_PROXY_HPP_
#define V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_Node_Startup_Controller_DBUS_PROXY_HPP_

#include <v1/org/genivi/NodeStartupController1/NodeStartupControllerProxyBase.hpp>
#include "v1/org/genivi/NodeStartupController1/NodeStartupControllerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace org {
namespace genivi {
namespace NodeStartupController1 {

class NodeStartupControllerDBusProxy
    : virtual public NodeStartupControllerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    NodeStartupControllerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~NodeStartupControllerDBusProxy() { }



    /**
     * description: BeginLUCRegistration:        Initialises the LUC registration sequence at
     *   shutdown in order to register       the applications which are running in the
     *   LUC in this moment.   	  consumer.
     * author: Giridhar
     */
    virtual void BeginLUCRegistration(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> BeginLUCRegistrationAsync(BeginLUCRegistrationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: RegisterWithLUC:       apps: A dictionary that maps LUC types to arrays of
     *   application unit names.        Registers one or more applications for certain
     *   LUC types. Applications may       be listed multiple times. For LUC types
     *   where only a single application may       be registered at a time, the last
     *   application in the corresponding list wins.        An example for the apps
     *   parameter would be:          {           0 : [ "app1.unit" ],           1 : [
     *   "app2.unit", "app3.unit" ],           2 : [ "app3.unit" ]         }      
     *   where 0 = "foreground", 1 = background , 2 = "audible"
     * author: Giridhar
     */
    virtual void RegisterWithLUC(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> RegisterWithLUCAsync(RegisterWithLUCAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: FinishLUCRegistration:        Finishes the LUC registration sequence and
     *   atomically replaces the       previous LUC.       consumer.
     * author: Giridhar
     */
    virtual void FinishLUCRegistration(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> FinishLUCRegistrationAsync(FinishLUCRegistrationAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   


};

} // namespace NodeStartupController1
} // namespace genivi
} // namespace org
} // namespace v1

#endif // V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_Node_Startup_Controller_DBUS_PROXY_HPP_

