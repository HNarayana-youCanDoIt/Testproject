/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_PARKASSIST_PDC_Service_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_PARKASSIST_PDC_Service_DBUS_PROXY_HPP_

#include <v0/com/harman/ParkAssist/PDCServiceProxyBase.hpp>
#include "v0/com/harman/ParkAssist/PDCServiceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

class PDCServiceDBusProxy
    : virtual public PDCServiceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    PDCServiceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~PDCServiceDBusProxy() { }

    virtual RvcFaultAttribute& getRvcFaultAttribute();
    virtual Pdc_rvcFaultAttribute& getPdc_rvcFaultAttribute();
    virtual RvcOverlayTypeAttribute& getRvcOverlayTypeAttribute();
    virtual HmiNotificationAttribute& getHmiNotificationAttribute();
    virtual RvcBackCameraAttribute& getRvcBackCameraAttribute();
    virtual ReverseGearStatusAttribute& getReverseGearStatusAttribute();
    virtual PdcPresence_enAttribute& getPdcPresence_enAttribute();
    virtual AudioZoneStateAttribute& getAudioZoneStateAttribute();
    virtual TailgateStateStatus_enumAttribute& getTailgateStateStatus_enumAttribute();
    virtual RevGearStatus_enumAttribute& getRevGearStatus_enumAttribute();
    virtual PDcHuProxRearSensStateAttribute& getPDcHuProxRearSensStateAttribute();
    virtual ParkBrkState_enumAttribute& getParkBrkState_enumAttribute();
    virtual PDcHuFaultState_enumAttribute& getPDcHuFaultState_enumAttribute();
    virtual PDcHuAudioZoneState_enumAttribute& getPDcHuAudioZoneState_enumAttribute();
    virtual PDcHuVisualZoneRearSensStateAttribute& getPDcHuVisualZoneRearSensStateAttribute();
    virtual PDcVariant_enumAttribute& getPDcVariant_enumAttribute();
    virtual PDcHuRearTone_enumAttribute& getPDcHuRearTone_enumAttribute();
    virtual PDcHuRearNoOfSen_enumAttribute& getPDcHuRearNoOfSen_enumAttribute();
    virtual SAsAngEPASAttribute& getSAsAngEPASAttribute();
    virtual SAsAngEPAsDir_enumAttribute& getSAsAngEPAsDir_enumAttribute();
    virtual PDcRearToneReq_enumAttribute& getPDcRearToneReq_enumAttribute();
    virtual HuPDcReqType_enumAttribute& getHuPDcReqType_enumAttribute();
    virtual PDcOnDelayTimerAttribute& getPDcOnDelayTimerAttribute();
    virtual PDcToneVolumeAttribute& getPDcToneVolumeAttribute();
    virtual RvcBrightnessAttribute& getRvcBrightnessAttribute();
    virtual RvcContrastAttribute& getRvcContrastAttribute();
    virtual RvcColorSaturationAttribute& getRvcColorSaturationAttribute();
    virtual RvcGamaAttribute& getRvcGamaAttribute();
    virtual PdcsettingUpdateAttribute& getPdcsettingUpdateAttribute();
    virtual ParkAssistVariant_enumAttribute& getParkAssistVariant_enumAttribute();


    /**
     * description: This method is used to reset pdc setting
     */
    virtual void ParkFactoryReset(const uint16_t &_type, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ParkFactoryResetAsync(const uint16_t &_type, ParkFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBusrvcFault_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RvcFaultAttribute>> {
    public:
    template <typename... _A>
    	DBusrvcFault_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RvcFaultAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusrvcFault_Attribute rvcFault_;
    class DBuspdc_rvcFault_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<Pdc_rvcFaultAttribute>> {
    public:
    template <typename... _A>
    	DBuspdc_rvcFault_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<Pdc_rvcFaultAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuspdc_rvcFault_Attribute pdc_rvcFault_;
    class DBusrvcOverlayType_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RvcOverlayTypeAttribute>> {
    public:
    template <typename... _A>
    	DBusrvcOverlayType_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RvcOverlayTypeAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusrvcOverlayType_Attribute rvcOverlayType_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HmiNotificationAttribute>> hmiNotification_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RvcBackCameraAttribute>> rvcBackCamera_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ReverseGearStatusAttribute, ::v1::com::harman::ParkAssist::ParkAssistBaseType_::reverseStatusDeployment_t>> reverseGearStatus_;
    class DBuspdcPresence_en_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PdcPresence_enAttribute>> {
    public:
    template <typename... _A>
    	DBuspdcPresence_en_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PdcPresence_enAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcPresence_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcPresence_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PdcPresence_enAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcPresence_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcPresence_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcPresence_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PdcPresence_enAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuspdcPresence_en_Attribute pdcPresence_en_;
    class DBusaudioZoneState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AudioZoneStateAttribute>> {
    public:
    template <typename... _A>
    	DBusaudioZoneState_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AudioZoneStateAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusaudioZoneState_Attribute audioZoneState_;
    class DBustailgateStateStatus_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TailgateStateStatus_enumAttribute>> {
    public:
    template <typename... _A>
    	DBustailgateStateStatus_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TailgateStateStatus_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBustailgateStateStatus_enum_Attribute tailgateStateStatus_enum_;
    class DBusrevGearStatus_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RevGearStatus_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusrevGearStatus_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<RevGearStatus_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusrevGearStatus_enum_Attribute revGearStatus_enum_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuProxRearSensStateAttribute>> pDcHuProxRearSensState_;
    class DBusparkBrkState_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ParkBrkState_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusparkBrkState_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ParkBrkState_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusparkBrkState_enum_Attribute parkBrkState_enum_;
    class DBuspDcHuFaultState_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuFaultState_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuspDcHuFaultState_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuFaultState_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuspDcHuFaultState_enum_Attribute pDcHuFaultState_enum_;
    class DBuspDcHuAudioZoneState_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuAudioZoneState_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuspDcHuAudioZoneState_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuAudioZoneState_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuspDcHuAudioZoneState_enum_Attribute pDcHuAudioZoneState_enum_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuVisualZoneRearSensStateAttribute>> pDcHuVisualZoneRearSensState_;
    class DBuspDcVariant_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcVariant_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuspDcVariant_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcVariant_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuspDcVariant_enum_Attribute pDcVariant_enum_;
    class DBuspDcHuRearTone_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuRearTone_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuspDcHuRearTone_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuRearTone_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuspDcHuRearTone_enum_Attribute pDcHuRearTone_enum_;
    class DBuspDcHuRearNoOfSen_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuRearNoOfSen_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuspDcHuRearNoOfSen_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PDcHuRearNoOfSen_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuspDcHuRearNoOfSen_enum_Attribute pDcHuRearNoOfSen_enum_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SAsAngEPASAttribute>> sAsAngEPAS_;
    class DBussAsAngEPAsDir_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SAsAngEPAsDir_enumAttribute>> {
    public:
    template <typename... _A>
    	DBussAsAngEPAsDir_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SAsAngEPAsDir_enumAttribute>>(
    			_proxy, arguments...) {}
    };
    DBussAsAngEPAsDir_enum_Attribute sAsAngEPAsDir_enum_;
    class DBuspDcRearToneReq_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PDcRearToneReq_enumAttribute>> {
    public:
    template <typename... _A>
    	DBuspDcRearToneReq_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PDcRearToneReq_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcRearToneReq_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcRearToneReq_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PDcRearToneReq_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcRearToneReq_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcRearToneReq_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcRearToneReq_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PDcRearToneReq_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuspDcRearToneReq_enum_Attribute pDcRearToneReq_enum_;
    class DBushuPDcReqType_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HuPDcReqType_enumAttribute>> {
    public:
    template <typename... _A>
    	DBushuPDcReqType_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HuPDcReqType_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::HuPDcReqType_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::ParkAssist::ParkAssistBaseType::HuPDcReqType_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HuPDcReqType_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::HuPDcReqType_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::ParkAssist::ParkAssistBaseType::HuPDcReqType_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::ParkAssist::ParkAssistBaseType::HuPDcReqType_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HuPDcReqType_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBushuPDcReqType_enum_Attribute huPDcReqType_enum_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PDcOnDelayTimerAttribute>> pDcOnDelayTimer_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PDcToneVolumeAttribute>> pDcToneVolume_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RvcBrightnessAttribute>> rvcBrightness_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RvcContrastAttribute>> rvcContrast_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RvcColorSaturationAttribute>> rvcColorSaturation_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<RvcGamaAttribute>> rvcGama_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<PdcsettingUpdateAttribute, ::v1::com::harman::ParkAssist::ParkAssistBaseType_::pdcsettingErrorUpdateDeployment_t>> pdcsettingUpdate_;
    class DBusparkAssistVariant_enum_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ParkAssistVariant_enumAttribute>> {
    public:
    template <typename... _A>
    	DBusparkAssistVariant_enum_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ParkAssistVariant_enumAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkAssistVariant_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkAssistVariant_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ParkAssistVariant_enumAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkAssistVariant_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkAssistVariant_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkAssistVariant_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ParkAssistVariant_enumAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusparkAssistVariant_enum_Attribute parkAssistVariant_enum_;


};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_PARKASSIST_PDC_Service_DBUS_PROXY_HPP_

