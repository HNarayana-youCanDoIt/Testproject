/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_DBUS_PROXY_HPP_

#include <v0/com/harman/androidautopres/TataAndroidAutoPresPluginProxyBase.hpp>
#include "v0/com/harman/androidautopres/TataAndroidAutoPresPluginDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace androidautopres {

class TataAndroidAutoPresPluginDBusProxy
    : virtual public TataAndroidAutoPresPluginProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    TataAndroidAutoPresPluginDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~TataAndroidAutoPresPluginDBusProxy() { }

    virtual FunctionOwnerAttribute& getFunctionOwnerAttribute();
    virtual ScreenOwnerAttribute& getScreenOwnerAttribute();
    virtual NaviOwnerAttribute& getNaviOwnerAttribute();
    virtual SpeechOwnerAttribute& getSpeechOwnerAttribute();

    virtual FirstConnShowPopupEvent& getFirstConnShowPopupEvent();

    virtual void reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void playAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playAapMediaAsync(PlayAapMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void pauseAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseAapMediaAsync(PauseAapMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void toggleAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> toggleAapMediaAsync(ToggleAapMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by Engineering Menu service for factory reset.        
     *   	return: true - Success 		    false - Not successful
     */
    virtual void AaFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> AaFactoryResetAsync(AaFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to changed the song to Next.         	return: true
     *   - Success 		    false - Not successful
     */
    virtual void AapMediaNext(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> AapMediaNextAsync(AapMediaNextAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to changed the song to Previous.          
     *   	return: true - Success 		    false - Not successful
     */
    virtual void AapMediaPrevious(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> AapMediaPreviousAsync(AapMediaPreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getFunctionOwnerStruct(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::HuFunctions &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getFunctionOwnerStructAsync(GetFunctionOwnerStructAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to get the current screen owner.          
     *   	return: OwnerType
     */
    virtual void getScreenOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getScreenOwnerAsync(GetScreenOwnerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to get the current navi owner.           	return:
     *   OwnerType
     */
    virtual void getNaviOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getNaviOwnerAsync(GetNaviOwnerAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI whenever AAP media has to be shown        
     *   	return: true - Success 		    false - Not successful
     */
    virtual void AapShowAaMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> AapShowAaMediaAsync(AapShowAaMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to get the current speech owner.          
     *   	return: OwnerType
     */
    virtual void getSpeechOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSpeechOwnerAsync(GetSpeechOwnerAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<FunctionOwnerAttribute, TataAndroidAutoPresPlugin_::HuFunctionsDeployment_t>> functionOwner_;
    class DBusscreenOwner_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ScreenOwnerAttribute>> {
    public:
    template <typename... _A>
    	DBusscreenOwner_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ScreenOwnerAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ScreenOwnerAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<ScreenOwnerAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusscreenOwner_Attribute screenOwner_;
    class DBusnaviOwner_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<NaviOwnerAttribute>> {
    public:
    template <typename... _A>
    	DBusnaviOwner_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<NaviOwnerAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<NaviOwnerAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<NaviOwnerAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusnaviOwner_Attribute naviOwner_;
    class DBusspeechOwner_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SpeechOwnerAttribute>> {
    public:
    template <typename... _A>
    	DBusspeechOwner_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SpeechOwnerAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SpeechOwnerAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<SpeechOwnerAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBusspeechOwner_Attribute speechOwner_;

    CommonAPI::DBus::DBusEvent<FirstConnShowPopupEvent, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment>> firstConnShowPopup_;

};

} // namespace androidautopres
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_DBUS_PROXY_HPP_

