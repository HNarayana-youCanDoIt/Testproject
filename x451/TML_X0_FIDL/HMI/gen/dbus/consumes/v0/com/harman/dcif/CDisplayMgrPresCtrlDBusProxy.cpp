/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/dcif/CDisplayMgrPresCtrlDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCDisplayMgrPresCtrlDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<CDisplayMgrPresCtrlDBusProxy>(_address, _connection);
}

INITIALIZER(registerCDisplayMgrPresCtrlDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		CDisplayMgrPresCtrl::getInterface(),
		&createCDisplayMgrPresCtrlDBusProxy);
}

CDisplayMgrPresCtrlDBusProxy::CDisplayMgrPresCtrlDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		lvdsConnectionStatus_(*this, "onLvdsConnectionStatusAttributeChanged", "i", "getLvdsConnectionStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		displayOnOffStatus_(*this, "onDisplayOnOffStatusAttributeChanged", "i", "getDisplayOnOffStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		dayNightModeStatus_(*this, "onDayNightModeStatusAttributeChanged", "i", "getDayNightModeStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
{
}

      CDisplayMgrPresCtrlDBusProxy::LvdsConnectionStatusAttribute& CDisplayMgrPresCtrlDBusProxy::getLvdsConnectionStatusAttribute() {
          return lvdsConnectionStatus_;
      }
      CDisplayMgrPresCtrlDBusProxy::DisplayOnOffStatusAttribute& CDisplayMgrPresCtrlDBusProxy::getDisplayOnOffStatusAttribute() {
          return displayOnOffStatus_;
      }
      CDisplayMgrPresCtrlDBusProxy::DayNightModeStatusAttribute& CDisplayMgrPresCtrlDBusProxy::getDayNightModeStatusAttribute() {
          return dayNightModeStatus_;
      }

    
    /**
     * description: setDisplayOnOffFeature: To set the display ON-OFF status false - Display off ,
     *   true - Display on
     */
    void CDisplayMgrPresCtrlDBusProxy::setDisplayOnOffFeature(const bool &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_value(_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setDisplayOnOffFeature",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_value,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::setDisplayOnOffFeatureAsync(const bool &_value, SetDisplayOnOffFeatureAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_value(_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setDisplayOnOffFeature",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_value,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: setDisplayBrightnessLevel: To set the display brightness level
     */
    void CDisplayMgrPresCtrlDBusProxy::setDisplayBrightnessLevel(const int16_t &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setDisplayBrightnessLevel",
        "n",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_value,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::setDisplayBrightnessLevelAsync(const int16_t &_value, SetDisplayBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setDisplayBrightnessLevel",
        "n",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_value,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: displayOnEvent: To send events for which HMI has to turn on the display
     */
    void CDisplayMgrPresCtrlDBusProxy::displayOnEvent(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent, CommonAPI::EmptyDeployment> deploy_onEvent(_onEvent, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "displayOnEvent",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_onEvent,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::displayOnEventAsync(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, DisplayOnEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent, CommonAPI::EmptyDeployment> deploy_onEvent(_onEvent, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "displayOnEvent",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_onEvent,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: getDisplayBrightnessLevel: To get the display brightness level
     */
    void CDisplayMgrPresCtrlDBusProxy::getDisplayBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getDisplayBrightnessLevel",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_value, deploy_ErrorCode);
_value = deploy_value.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::getDisplayBrightnessLevelAsync(GetDisplayBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getDisplayBrightnessLevel",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _value, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _value.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_value, deploy_ErrorCode));
    }
    /**
     * description: getHardwareVersion: To get the display Hardware Version
     */
    void CDisplayMgrPresCtrlDBusProxy::getHardwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getHardwareVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_value, deploy_ErrorCode);
_value = deploy_value.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::getHardwareVersionAsync(GetHardwareVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getHardwareVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _value, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _value.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_value, deploy_ErrorCode));
    }
    /**
     * description: getSoftwareVersion: To get the display Software Version
     */
    void CDisplayMgrPresCtrlDBusProxy::getSoftwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSoftwareVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_value, deploy_ErrorCode);
_value = deploy_value.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::getSoftwareVersionAsync(GetSoftwareVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSoftwareVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _value, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _value.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_value, deploy_ErrorCode));
    }
    /**
     * description: getDisplay16RSparePartNumber: To get the display 16R spare part number
     */
    void CDisplayMgrPresCtrlDBusProxy::getDisplay16RSparePartNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_value(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getDisplay16RSparePartNumber",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_value, deploy_ErrorCode);
_value = deploy_value.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::getDisplay16RSparePartNumberAsync(GetDisplay16RSparePartNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_value(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getDisplay16RSparePartNumber",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _value, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _value.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_value, deploy_ErrorCode));
    }
    /**
     * description: getDisplay16REcuHwNumber: To get the display 16R ECU number
     */
    void CDisplayMgrPresCtrlDBusProxy::getDisplay16REcuHwNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_value(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getDisplay16REcuHwNumber",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_value, deploy_ErrorCode);
_value = deploy_value.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::getDisplay16REcuHwNumberAsync(GetDisplay16REcuHwNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_value(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getDisplay16REcuHwNumber",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _value, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _value.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_value, deploy_ErrorCode));
    }
    /**
     * description: setButtonPanelBrightness: To set the button panel brightness level
     */
    void CDisplayMgrPresCtrlDBusProxy::setButtonPanelBrightness(const int16_t &_status, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_status(_status, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setButtonPanelBrightness",
        "n",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_status,
_internalCallStatus,
deploy_ErrorCode);
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::setButtonPanelBrightnessAsync(const int16_t &_status, SetButtonPanelBrightnessAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_status(_status, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setButtonPanelBrightness",
        "n",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_status,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _ErrorCode.getValue());
        },
        std::make_tuple(deploy_ErrorCode));
    }
    /**
     * description: getButtonPanelBrightnessLevel: To get the button panel brightness level
     */
    void CDisplayMgrPresCtrlDBusProxy::getButtonPanelBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getButtonPanelBrightnessLevel",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_value, deploy_ErrorCode);
_value = deploy_value.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::getButtonPanelBrightnessLevelAsync(GetButtonPanelBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getButtonPanelBrightnessLevel",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _value, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _value.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_value, deploy_ErrorCode));
    }
    /**
     * description: getDisplayTemperature: To get the Display temerature information
     */
    void CDisplayMgrPresCtrlDBusProxy::getDisplayTemperature(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getDisplayTemperature",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_value, deploy_ErrorCode);
_value = deploy_value.getValue();
_ErrorCode = deploy_ErrorCode.getValue();
}
    std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlDBusProxy::getDisplayTemperatureAsync(GetDisplayTemperatureAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> deploy_ErrorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<int16_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getDisplayTemperature",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> _value, CommonAPI::Deployable<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus, CommonAPI::EmptyDeployment> _ErrorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _value.getValue(), _ErrorCode.getValue());
        },
        std::make_tuple(deploy_value, deploy_ErrorCode));
    }


void CDisplayMgrPresCtrlDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace dcif
      } // namespace harman
      } // namespace com
      } // namespace v0
