/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: The VersionManager component is responsible for gathering version information
 *   of the different modules as well as managing     a set of required version for
 *   a certain release, the release configuration that is defined at integration
 *   time.          Version: 1.0     Reason:         - Initial Version     Changes:
 *           1. readonly attributes: allVersionsDetails         2. methods:
 *   getVersionDetails, get16RPartNumber         3. signal : versionMismatch
 * author: Gaurav Garg
 */
#include <v0/com/harman/dcif/VersionManagerService_TATADBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createVersionManagerService_TATADBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<VersionManagerService_TATADBusProxy>(_address, _connection);
}

INITIALIZER(registerVersionManagerService_TATADBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		VersionManagerService_TATA::getInterface(),
		&createVersionManagerService_TATADBusProxy);
}

VersionManagerService_TATADBusProxy::VersionManagerService_TATADBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		versionMismatch_(*this, "onVersionMismatchAttributeChanged", "i", "getVersionMismatchAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		a_allVersionsDetails_(*this, "onA_allVersionsDetailsAttributeChanged", "a(sssi)", "getA_allVersionsDetailsAttribute", static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::a_VersionInfoListDeployment_t*>(nullptr)),
		a_all16RPartDetails_(*this, "onA_all16RPartDetailsAttributeChanged", "a(ssi)", "getA_all16RPartDetailsAttribute", static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::a_16RInfoListDeployment_t*>(nullptr)),
		a_all16RPartDetailsAscii_(*this, "onA_all16RPartDetailsAsciiAttributeChanged", "a(ssi)", "getA_all16RPartDetailsAsciiAttribute", static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::a_16RInfoListDeployment_t*>(nullptr))
{
}

      VersionManagerService_TATADBusProxy::VersionMismatchAttribute& VersionManagerService_TATADBusProxy::getVersionMismatchAttribute() {
          return versionMismatch_;
      }
      VersionManagerService_TATADBusProxy::A_allVersionsDetailsAttribute& VersionManagerService_TATADBusProxy::getA_allVersionsDetailsAttribute() {
          return a_allVersionsDetails_;
      }
      VersionManagerService_TATADBusProxy::A_all16RPartDetailsAttribute& VersionManagerService_TATADBusProxy::getA_all16RPartDetailsAttribute() {
          return a_all16RPartDetails_;
      }
      VersionManagerService_TATADBusProxy::A_all16RPartDetailsAsciiAttribute& VersionManagerService_TATADBusProxy::getA_all16RPartDetailsAsciiAttribute() {
          return a_all16RPartDetailsAscii_;
      }

    
    /**
     * description: a method to retrieve known version information of a specific component        
     *   to retrieve all versions "attribute VersionInfoList allVersions" can be used
     */
    void VersionManagerService_TATADBusProxy::getVersionDetails(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t &_t_versionInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e, CommonAPI::EmptyDeployment> deploy_e_VersionName(_e_VersionName, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::versionInfo_tDeployment_t> deploy_t_versionInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::versionInfo_tDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t,::v0::com::harman::dcif::versionmanagertypes_tata_::versionInfo_tDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getVersionDetails",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_e_VersionName,
_internalCallStatus,
deploy_t_versionInfo);
_t_versionInfo = deploy_t_versionInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerService_TATADBusProxy::getVersionDetailsAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, GetVersionDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e, CommonAPI::EmptyDeployment> deploy_e_VersionName(_e_VersionName, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::versionInfo_tDeployment_t> deploy_t_versionInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::versionInfo_tDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t,::v0::com::harman::dcif::versionmanagertypes_tata_::versionInfo_tDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getVersionDetails",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_e_VersionName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::versionInfo_tDeployment_t> _t_versionInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _t_versionInfo.getValue());
        },
        std::make_tuple(deploy_t_versionInfo));
    }
    void VersionManagerService_TATADBusProxy::get16RPartNumber(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e, CommonAPI::EmptyDeployment> deploy_e_PartName(_e_PartName, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_t_16RpartInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "get16RPartNumber",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_e_PartName,
_internalCallStatus,
deploy_t_16RpartInfo);
_t_16RpartInfo = deploy_t_16RpartInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerService_TATADBusProxy::get16RPartNumberAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e, CommonAPI::EmptyDeployment> deploy_e_PartName(_e_PartName, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_t_16RpartInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "get16RPartNumber",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_e_PartName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> _t_16RpartInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _t_16RpartInfo.getValue());
        },
        std::make_tuple(deploy_t_16RpartInfo));
    }
    void VersionManagerService_TATADBusProxy::get16RPartNumberInAscii(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e, CommonAPI::EmptyDeployment> deploy_e_PartName(_e_PartName, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_t_16RpartInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "get16RPartNumberInAscii",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_e_PartName,
_internalCallStatus,
deploy_t_16RpartInfo);
_t_16RpartInfo = deploy_t_16RpartInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerService_TATADBusProxy::get16RPartNumberInAsciiAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberInAsciiAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e, CommonAPI::EmptyDeployment> deploy_e_PartName(_e_PartName, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_t_16RpartInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "get16RPartNumberInAscii",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_e_PartName,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> _t_16RpartInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _t_16RpartInfo.getValue());
        },
        std::make_tuple(deploy_t_16RpartInfo));
    }
    void VersionManagerService_TATADBusProxy::getPowerModeCfgType(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_PmodeCfgInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_PmodeCfgInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getPowerModeCfgType",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_PmodeCfgInfo);
_PmodeCfgInfo = deploy_PmodeCfgInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerService_TATADBusProxy::getPowerModeCfgTypeAsync(GetPowerModeCfgTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_PmodeCfgInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getPowerModeCfgType",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> _PmodeCfgInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _PmodeCfgInfo.getValue());
        },
        std::make_tuple(deploy_PmodeCfgInfo));
    }
    void VersionManagerService_TATADBusProxy::getWifiMacNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_wifiMACInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_wifiMACInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getWifiMacNumber",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_wifiMACInfo);
_wifiMACInfo = deploy_wifiMACInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerService_TATADBusProxy::getWifiMacNumberAsync(GetWifiMacNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_wifiMACInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getWifiMacNumber",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> _wifiMACInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _wifiMACInfo.getValue());
        },
        std::make_tuple(deploy_wifiMACInfo));
    }
    void VersionManagerService_TATADBusProxy::getBluetoothMACNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btMACInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_btMACInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getBluetoothMACNumber",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_btMACInfo);
_btMACInfo = deploy_btMACInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerService_TATADBusProxy::getBluetoothMACNumberAsync(GetBluetoothMACNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_btMACInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getBluetoothMACNumber",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> _btMACInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _btMACInfo.getValue());
        },
        std::make_tuple(deploy_btMACInfo));
    }
    void VersionManagerService_TATADBusProxy::getBluetoothAlignmentValue(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btAlignmentInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_btAlignmentInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getBluetoothAlignmentValue",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_btAlignmentInfo);
_btAlignmentInfo = deploy_btAlignmentInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerService_TATADBusProxy::getBluetoothAlignmentValueAsync(GetBluetoothAlignmentValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_btAlignmentInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getBluetoothAlignmentValue",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> _btAlignmentInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _btAlignmentInfo.getValue());
        },
        std::make_tuple(deploy_btAlignmentInfo));
    }
    void VersionManagerService_TATADBusProxy::getLCDPanelHwVersion(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_lcdHwInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_lcdHwInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getLCDPanelHwVersion",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_lcdHwInfo);
_lcdHwInfo = deploy_lcdHwInfo.getValue();
}
    std::future<CommonAPI::CallStatus> VersionManagerService_TATADBusProxy::getLCDPanelHwVersionAsync(GetLCDPanelHwVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> deploy_lcdHwInfo(static_cast<::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t,::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getLCDPanelHwVersion",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t, ::v0::com::harman::dcif::versionmanagertypes_tata_::_16RPartDetails_tDeployment_t> _lcdHwInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _lcdHwInfo.getValue());
        },
        std::make_tuple(deploy_lcdHwInfo));
    }


void VersionManagerService_TATADBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace dcif
      } // namespace harman
      } // namespace com
      } // namespace v0
