/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_WHAT3WORDS_what3wordscore_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_WHAT3WORDS_what3wordscore_DBUS_PROXY_HPP_

#include <v0/com/harman/what3words/what3wordscoreProxyBase.hpp>
#include "v0/com/harman/what3words/what3wordscoreDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace what3words {

class what3wordscoreDBusProxy
    : virtual public what3wordscoreProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    what3wordscoreDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~what3wordscoreDBusProxy() { }



    /**
     * description: This method will provide three autosuggestion of words for a string input in
     *   w3w format 		returns:      Vector for three word address, language code,
     *   nearest place, country code         status:       SUCCESS if no error, FAILURE
     *   on error.
     * param: w3waddress The three words address in W3W format
     */
    virtual void getAutoSuggestions(const std::string &_w3waddress, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wTypeCollection::arSuggtion &_wordSugg, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getAutoSuggestionsAsync(const std::string &_w3waddress, GetAutoSuggestionsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will provide latitude and longitiude details of last navigated W3W
     *   address 		returns:	  Latitude and longitude details of W3W address        
     *   status:       SUCCESS if no error, FAILURE on error.
     * param: w3waddress The three word address in W3W format
     */
    virtual void getLatLong(const std::string &_w3waddress, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getLatLongAsync(const std::string &_w3waddress, GetLatLongAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will W3W address for the latitude and longitude co-ordinates
     *   		returns:	  W3W address         status:       SUCCESS if no error, FAILURE on
     *   error.
     * param: coord latitude and Longitude
     */
    virtual void getW3WAddress(const ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, std::string &_w3waddress, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getW3WAddressAsync(const ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, GetW3WAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   


};

} // namespace what3words
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_WHAT3WORDS_what3wordscore_DBUS_PROXY_HPP_

