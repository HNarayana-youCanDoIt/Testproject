/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/mmpresPlugin/mediaPresPluginDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace mmpresPlugin {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createmediaPresPluginDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<mediaPresPluginDBusProxy>(_address, _connection);
}

INITIALIZER(registermediaPresPluginDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		mediaPresPlugin::getInterface(),
		&createmediaPresPluginDBusProxy);
}

mediaPresPluginDBusProxy::mediaPresPluginDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		usbDeviceError_(*this, "onUsbDeviceErrorAttributeChanged", "i", "getUsbDeviceErrorAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		usbPlaybackMode_(*this, "onUsbPlaybackModeAttributeChanged", "i", "getUsbPlaybackModeAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		deviceItemsInfo_(*this, "onDeviceItemsInfoAttributeChanged", "(iiiiiiii)", "getDeviceItemsInfoAttribute", static_cast<mediaPresPlugin_::sItemsInfoDeployment_t*>(nullptr)),
		bitRate_(*this, "onBitRateAttributeChanged", "s", "getBitRateAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		samplingRate_(*this, "onSamplingRateAttributeChanged", "s", "getSamplingRateAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
		bTMetaDataAvailabilityStatus_(*this, "onBTMetaDataAvailabilityStatusAttributeChanged", "i", "getBTMetaDataAvailabilityStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		videoTestModeParameters_(*this, "onVideoTestModeParametersAttributeChanged", "(s(ss)sss)", "getVideoTestModeParametersAttribute", static_cast<mediaPresPlugin_::sVideoParametersDeployment_t*>(nullptr)),
		tEFilesPath_(*this, "onTEFilesPathAttributeChanged", "(sssss)", "getTEFilesPathAttribute", static_cast<mediaPresPlugin_::sTEFilesPathDeployment_t*>(nullptr)),
		mediaError_(*this, "onMediaErrorAttributeChanged", "a{yi}", "getMediaErrorAttribute", static_cast<mediaPresPlugin_::MediaErrorMapDeployment_t*>(nullptr))
,		trackSessionChanged_(*this, "trackSessionChanged", "", std::make_tuple())
{
}

      mediaPresPluginDBusProxy::UsbDeviceErrorAttribute& mediaPresPluginDBusProxy::getUsbDeviceErrorAttribute() {
          return usbDeviceError_;
      }
      mediaPresPluginDBusProxy::UsbPlaybackModeAttribute& mediaPresPluginDBusProxy::getUsbPlaybackModeAttribute() {
          return usbPlaybackMode_;
      }
      mediaPresPluginDBusProxy::DeviceItemsInfoAttribute& mediaPresPluginDBusProxy::getDeviceItemsInfoAttribute() {
          return deviceItemsInfo_;
      }
      mediaPresPluginDBusProxy::BitRateAttribute& mediaPresPluginDBusProxy::getBitRateAttribute() {
          return bitRate_;
      }
      mediaPresPluginDBusProxy::SamplingRateAttribute& mediaPresPluginDBusProxy::getSamplingRateAttribute() {
          return samplingRate_;
      }
      mediaPresPluginDBusProxy::BTMetaDataAvailabilityStatusAttribute& mediaPresPluginDBusProxy::getBTMetaDataAvailabilityStatusAttribute() {
          return bTMetaDataAvailabilityStatus_;
      }
      mediaPresPluginDBusProxy::VideoTestModeParametersAttribute& mediaPresPluginDBusProxy::getVideoTestModeParametersAttribute() {
          return videoTestModeParameters_;
      }
      mediaPresPluginDBusProxy::TEFilesPathAttribute& mediaPresPluginDBusProxy::getTEFilesPathAttribute() {
          return tEFilesPath_;
      }
      mediaPresPluginDBusProxy::MediaErrorAttribute& mediaPresPluginDBusProxy::getMediaErrorAttribute() {
          return mediaError_;
      }

mediaPresPluginDBusProxy::TrackSessionChangedEvent& mediaPresPluginDBusProxy::getTrackSessionChangedEvent() {
    return trackSessionChanged_;
}
    
    /**
     * description: This method will toggle the repeat state as OFF->All->one. 		 		 Input :  none	
     *   		               returns:	eCallResult:	result
     */
    void mediaPresPluginDBusProxy::toggleRepeat(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "toggleRepeat",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_buttonStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::toggleRepeatAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ToggleRepeatAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "toggleRepeat",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_buttonStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method will toggle the shuffle state as OFF->All. 		 		 Input :  None     
     *       returns:	eCallResult:	result
     */
    void mediaPresPluginDBusProxy::toggleShuffle(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "toggleShuffle",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_buttonStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::toggleShuffleAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ToggleShuffleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "toggleShuffle",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_buttonStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method to perform the next track operation. 		 		 Input :  UInt64 : step	
     *   		               returns:	  eCallResult:	result
     */
    void mediaPresPluginDBusProxy::next(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_step(_step, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "next",
        "ti",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_step, deploy_buttonStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::nextAsync(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, NextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_step(_step, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "next",
        "ti",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_step, deploy_buttonStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method to perform the previous track operation. 		 		 Input :  UInt64 :
     *   step	 		               returns:	  eCallResult:	result
     */
    void mediaPresPluginDBusProxy::previous(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_step(_step, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "previous",
        "ti",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_step, deploy_buttonStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::previousAsync(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, PreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_step(_step, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "previous",
        "ti",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_step, deploy_buttonStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method to perform the pause operation. 		 		 Input :  Boolean: pressed -
     *   Whether the button is pressed or released.	 		               returns:
     *   eCallResult:	result
     */
    void mediaPresPluginDBusProxy::pause(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "pause",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_buttonStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::pauseAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, PauseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "pause",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_buttonStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method to perform the resume operation. 		 		 Input :  Boolean: pressed -
     *   Whether the button is pressed or released.	 		               returns:
     *   eCallResult:	result
     */
    void mediaPresPluginDBusProxy::resume(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "resume",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_buttonStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::resumeAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ResumeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "resume",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_buttonStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method to perform the FastForward operation. 		 		 Input :  Boolean:
     *   pressed - Whether the button is pressed or released.	 		              
     *   returns: eCallResult:	result
     */
    void mediaPresPluginDBusProxy::fastforward(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "fastforward",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_buttonStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::fastforwardAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, FastforwardAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "fastforward",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_buttonStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method to perform the FastReverse operation. 		 		 Input :  Boolean:
     *   pressed - Whether the button is pressed or released.	 		              
     *   returns: eCallResult:	result
     */
    void mediaPresPluginDBusProxy::fastreverse(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "fastreverse",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_buttonStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::fastreverseAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, FastreverseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment> deploy_buttonStatus(_buttonStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eButtonStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "fastreverse",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_buttonStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method is to receive the RVC status from HMI and enable/disable the video
     *   laye based on this. 		 		 Input :  boolean: rvcStatus : True = RVC engaged,
     *   False = RVC disengaged. 		               returns: eCallResult:result
     */
    void mediaPresPluginDBusProxy::updateRvcState(const bool &_rvcStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_rvcStatus(_rvcStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "updateRvcState",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_rvcStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::updateRvcStateAsync(const bool &_rvcStatus, UpdateRvcStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_rvcStatus(_rvcStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "updateRvcState",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_rvcStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method is to receive the RVC status from HMI and enable/disable the video
     *   laye based on this. 		 		 Input :  eVideoSurfaceDisplayStatus: surfaceStatus 
     *   		               returns:	  String: path
     */
    void mediaPresPluginDBusProxy::videoSurfaceControl(const mediaPresPlugin::eVideoSurfaceDisplayStatus &_surfaceStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eVideoSurfaceDisplayStatus, CommonAPI::EmptyDeployment> deploy_surfaceStatus(_surfaceStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eVideoSurfaceDisplayStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "videoSurfaceControl",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_surfaceStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::videoSurfaceControlAsync(const mediaPresPlugin::eVideoSurfaceDisplayStatus &_surfaceStatus, VideoSurfaceControlAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<mediaPresPlugin::eVideoSurfaceDisplayStatus, CommonAPI::EmptyDeployment> deploy_surfaceStatus(_surfaceStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eVideoSurfaceDisplayStatus, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "videoSurfaceControl",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_surfaceStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method is to fetch current playing track index in browse list.  		It will
     *   be required to display the correct pointer for current playing track in case
     *   track changed during browse list display. 		 		 Input :  UInt32      
     *   sessionID 				  UInt32       QueryID	 		               returns: eCallResult
     *   result				 				UInt32       sessionQueryID 				Boolean 	 highlight 				UInt64 
     *   	 trackIndex
     */
    void mediaPresPluginDBusProxy::getCurrentTrackIndex(const uint32_t &_sessionID, const uint32_t &_QueryID, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, uint32_t &_sessionQueryID, bool &_highlight, uint64_t &_trackIndex, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_sessionID(_sessionID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_QueryID(_QueryID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_sessionQueryID(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_highlight(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_trackIndex(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getCurrentTrackIndex",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sessionID, deploy_QueryID,
_internalCallStatus,
deploy_result, deploy_sessionQueryID, deploy_highlight, deploy_trackIndex);
_result = deploy_result.getValue();
_sessionQueryID = deploy_sessionQueryID.getValue();
_highlight = deploy_highlight.getValue();
_trackIndex = deploy_trackIndex.getValue();
}
    std::future<CommonAPI::CallStatus> mediaPresPluginDBusProxy::getCurrentTrackIndexAsync(const uint32_t &_sessionID, const uint32_t &_QueryID, GetCurrentTrackIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_sessionID(_sessionID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_QueryID(_QueryID, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_sessionQueryID(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_highlight(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> deploy_trackIndex(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<mediaPresPlugin::eCallResult,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint64_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getCurrentTrackIndex",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sessionID, deploy_QueryID,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<mediaPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _sessionQueryID, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _highlight, CommonAPI::Deployable<uint64_t, CommonAPI::EmptyDeployment> _trackIndex) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue(), _sessionQueryID.getValue(), _highlight.getValue(), _trackIndex.getValue());
        },
        std::make_tuple(deploy_result, deploy_sessionQueryID, deploy_highlight, deploy_trackIndex));
    }


void mediaPresPluginDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace mmpresPlugin
      } // namespace harman
      } // namespace com
      } // namespace v0
