/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/dcif/VehicleSettingsPresCtrlDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createVehicleSettingsPresCtrlDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<VehicleSettingsPresCtrlDBusProxy>(_address, _connection);
}

INITIALIZER(registerVehicleSettingsPresCtrlDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		VehicleSettingsPresCtrl::getInterface(),
		&createVehicleSettingsPresCtrlDBusProxy);
}

VehicleSettingsPresCtrlDBusProxy::VehicleSettingsPresCtrlDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		ambientLightModeIlluOnHu_(*this, "onAmbientLightModeIlluOnHuAttributeChanged", "b", "getAmbientLightModeIlluOnHuAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		parkLampStatus_(*this, "onParkLampStatusAttributeChanged", "b", "getParkLampStatusAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		vehicleSpeed_(*this, "onVehicleSpeedAttributeChanged", "d", "getVehicleSpeedAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bCmPresence_(*this, "onBCmPresenceAttributeChanged", "b", "getBCmPresenceAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bCmUcsState_(*this, "onBCmUcsStateAttributeChanged", "b", "getBCmUcsStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bCmAutoRelockState_(*this, "onBCmAutoRelockStateAttributeChanged", "b", "getBCmAutoRelockStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bCmApproachLampState_(*this, "onBCmApproachLampStateAttributeChanged", "b", "getBCmApproachLampStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bCmDRLState_(*this, "onBCmDRLStateAttributeChanged", "b", "getBCmDRLStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bCmAntitheftFeatureState_(*this, "onBCmAntitheftFeatureStateAttributeChanged", "b", "getBCmAntitheftFeatureStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bcmHuCkdState_(*this, "onBcmHuCkdStateAttributeChanged", "b", "getBcmHuCkdStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		bCmAntitheftKeyConfirmation_(*this, "onBCmAntitheftKeyConfirmationAttributeChanged", "i", "getBCmAntitheftKeyConfirmationAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
,		fmhValue_(*this, "fmhValue", "n", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		approachLampValue_(*this, "approachLampValue", "n", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		drlActiveSignalVal_(*this, "drlActiveSignalVal", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		hornRequestVehicleLock_(*this, "hornRequestVehicleLock", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		vehicleUnlockRKE_(*this, "vehicleUnlockRKE", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		vehicleUnlockPKE_(*this, "vehicleUnlockPKE", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		driveAwayLocking_(*this, "driveAwayLocking", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		autoRelockfunction_(*this, "autoRelockfunction", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		bcmFactorySettingRequest_(*this, "bcmFactorySettingRequest", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		huBCmRequestError_(*this, "huBCmRequestError", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		ambientLightLoadSettings_(*this, "ambientLightLoadSettings", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		ambLightMode_(*this, "ambLightMode", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		ambLightIllumPossibleLevels_(*this, "ambLightIllumPossibleLevels", "n", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		ambientLightIllumSelLevels_(*this, "ambientLightIllumSelLevels", "n", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		moodLightMode_(*this, "moodLightMode", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		moodLightlluminationLevels_(*this, "moodLightlluminationLevels", "nn", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		moodLightLocationOrZoneSettings_(*this, "moodLightLocationOrZoneSettings", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		moodLightColourSettings_(*this, "moodLightColourSettings", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		speedLockOut_(*this, "speedLockOut", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      VehicleSettingsPresCtrlDBusProxy::AmbientLightModeIlluOnHuAttribute& VehicleSettingsPresCtrlDBusProxy::getAmbientLightModeIlluOnHuAttribute() {
          return ambientLightModeIlluOnHu_;
      }
      VehicleSettingsPresCtrlDBusProxy::ParkLampStatusAttribute& VehicleSettingsPresCtrlDBusProxy::getParkLampStatusAttribute() {
          return parkLampStatus_;
      }
      VehicleSettingsPresCtrlDBusProxy::VehicleSpeedAttribute& VehicleSettingsPresCtrlDBusProxy::getVehicleSpeedAttribute() {
          return vehicleSpeed_;
      }
      VehicleSettingsPresCtrlDBusProxy::BCmPresenceAttribute& VehicleSettingsPresCtrlDBusProxy::getBCmPresenceAttribute() {
          return bCmPresence_;
      }
      VehicleSettingsPresCtrlDBusProxy::BCmUcsStateAttribute& VehicleSettingsPresCtrlDBusProxy::getBCmUcsStateAttribute() {
          return bCmUcsState_;
      }
      VehicleSettingsPresCtrlDBusProxy::BCmAutoRelockStateAttribute& VehicleSettingsPresCtrlDBusProxy::getBCmAutoRelockStateAttribute() {
          return bCmAutoRelockState_;
      }
      VehicleSettingsPresCtrlDBusProxy::BCmApproachLampStateAttribute& VehicleSettingsPresCtrlDBusProxy::getBCmApproachLampStateAttribute() {
          return bCmApproachLampState_;
      }
      VehicleSettingsPresCtrlDBusProxy::BCmDRLStateAttribute& VehicleSettingsPresCtrlDBusProxy::getBCmDRLStateAttribute() {
          return bCmDRLState_;
      }
      VehicleSettingsPresCtrlDBusProxy::BCmAntitheftFeatureStateAttribute& VehicleSettingsPresCtrlDBusProxy::getBCmAntitheftFeatureStateAttribute() {
          return bCmAntitheftFeatureState_;
      }
      VehicleSettingsPresCtrlDBusProxy::BcmHuCkdStateAttribute& VehicleSettingsPresCtrlDBusProxy::getBcmHuCkdStateAttribute() {
          return bcmHuCkdState_;
      }
      VehicleSettingsPresCtrlDBusProxy::BCmAntitheftKeyConfirmationAttribute& VehicleSettingsPresCtrlDBusProxy::getBCmAntitheftKeyConfirmationAttribute() {
          return bCmAntitheftKeyConfirmation_;
      }

VehicleSettingsPresCtrlDBusProxy::FmhValueEvent& VehicleSettingsPresCtrlDBusProxy::getFmhValueEvent() {
    return fmhValue_;
}
VehicleSettingsPresCtrlDBusProxy::ApproachLampValueEvent& VehicleSettingsPresCtrlDBusProxy::getApproachLampValueEvent() {
    return approachLampValue_;
}
VehicleSettingsPresCtrlDBusProxy::DrlActiveSignalValEvent& VehicleSettingsPresCtrlDBusProxy::getDrlActiveSignalValEvent() {
    return drlActiveSignalVal_;
}
VehicleSettingsPresCtrlDBusProxy::HornRequestVehicleLockEvent& VehicleSettingsPresCtrlDBusProxy::getHornRequestVehicleLockEvent() {
    return hornRequestVehicleLock_;
}
VehicleSettingsPresCtrlDBusProxy::VehicleUnlockRKEEvent& VehicleSettingsPresCtrlDBusProxy::getVehicleUnlockRKEEvent() {
    return vehicleUnlockRKE_;
}
VehicleSettingsPresCtrlDBusProxy::VehicleUnlockPKEEvent& VehicleSettingsPresCtrlDBusProxy::getVehicleUnlockPKEEvent() {
    return vehicleUnlockPKE_;
}
VehicleSettingsPresCtrlDBusProxy::DriveAwayLockingEvent& VehicleSettingsPresCtrlDBusProxy::getDriveAwayLockingEvent() {
    return driveAwayLocking_;
}
VehicleSettingsPresCtrlDBusProxy::AutoRelockfunctionEvent& VehicleSettingsPresCtrlDBusProxy::getAutoRelockfunctionEvent() {
    return autoRelockfunction_;
}
VehicleSettingsPresCtrlDBusProxy::BcmFactorySettingRequestEvent& VehicleSettingsPresCtrlDBusProxy::getBcmFactorySettingRequestEvent() {
    return bcmFactorySettingRequest_;
}
VehicleSettingsPresCtrlDBusProxy::HuBCmRequestErrorEvent& VehicleSettingsPresCtrlDBusProxy::getHuBCmRequestErrorEvent() {
    return huBCmRequestError_;
}
VehicleSettingsPresCtrlDBusProxy::AmbientLightLoadSettingsEvent& VehicleSettingsPresCtrlDBusProxy::getAmbientLightLoadSettingsEvent() {
    return ambientLightLoadSettings_;
}
VehicleSettingsPresCtrlDBusProxy::AmbLightModeEvent& VehicleSettingsPresCtrlDBusProxy::getAmbLightModeEvent() {
    return ambLightMode_;
}
VehicleSettingsPresCtrlDBusProxy::AmbLightIllumPossibleLevelsEvent& VehicleSettingsPresCtrlDBusProxy::getAmbLightIllumPossibleLevelsEvent() {
    return ambLightIllumPossibleLevels_;
}
VehicleSettingsPresCtrlDBusProxy::AmbientLightIllumSelLevelsEvent& VehicleSettingsPresCtrlDBusProxy::getAmbientLightIllumSelLevelsEvent() {
    return ambientLightIllumSelLevels_;
}
VehicleSettingsPresCtrlDBusProxy::MoodLightModeEvent& VehicleSettingsPresCtrlDBusProxy::getMoodLightModeEvent() {
    return moodLightMode_;
}
VehicleSettingsPresCtrlDBusProxy::MoodLightlluminationLevelsEvent& VehicleSettingsPresCtrlDBusProxy::getMoodLightlluminationLevelsEvent() {
    return moodLightlluminationLevels_;
}
VehicleSettingsPresCtrlDBusProxy::MoodLightLocationOrZoneSettingsEvent& VehicleSettingsPresCtrlDBusProxy::getMoodLightLocationOrZoneSettingsEvent() {
    return moodLightLocationOrZoneSettings_;
}
VehicleSettingsPresCtrlDBusProxy::MoodLightColourSettingsEvent& VehicleSettingsPresCtrlDBusProxy::getMoodLightColourSettingsEvent() {
    return moodLightColourSettings_;
}
VehicleSettingsPresCtrlDBusProxy::SpeedLockOutEvent& VehicleSettingsPresCtrlDBusProxy::getSpeedLockOutEvent() {
    return speedLockOut_;
}
    
    /**
     * description: method to return type of configuartion done for setttings type.
     */
    void VehicleSettingsPresCtrlDBusProxy::getSettingsTypeConfiguration(CommonAPI::CallStatus &_internalCallStatus, VehicleSettingsPresCtrl::settingsTypeConfiguration &_settingsTypeConfiguration_arr, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<VehicleSettingsPresCtrl::settingsTypeConfiguration, VehicleSettingsPresCtrl_::settingsTypeConfigurationDeployment_t> deploy_settingsTypeConfiguration_arr(static_cast<VehicleSettingsPresCtrl_::settingsTypeConfigurationDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<VehicleSettingsPresCtrl::settingsTypeConfiguration,VehicleSettingsPresCtrl_::settingsTypeConfigurationDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getSettingsTypeConfiguration",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_settingsTypeConfiguration_arr);
_settingsTypeConfiguration_arr = deploy_settingsTypeConfiguration_arr.getValue();
}
    std::future<CommonAPI::CallStatus> VehicleSettingsPresCtrlDBusProxy::getSettingsTypeConfigurationAsync(GetSettingsTypeConfigurationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<VehicleSettingsPresCtrl::settingsTypeConfiguration, VehicleSettingsPresCtrl_::settingsTypeConfigurationDeployment_t> deploy_settingsTypeConfiguration_arr(static_cast<VehicleSettingsPresCtrl_::settingsTypeConfigurationDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<VehicleSettingsPresCtrl::settingsTypeConfiguration,VehicleSettingsPresCtrl_::settingsTypeConfigurationDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getSettingsTypeConfiguration",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<VehicleSettingsPresCtrl::settingsTypeConfiguration, VehicleSettingsPresCtrl_::settingsTypeConfigurationDeployment_t> _settingsTypeConfiguration_arr) {
        	if (_callback)
        		_callback(_internalCallStatus, _settingsTypeConfiguration_arr.getValue());
        },
        std::make_tuple(deploy_settingsTypeConfiguration_arr));
    }
    /**
     * description: method to perform BCM Factory Reset.
     */
    void VehicleSettingsPresCtrlDBusProxy::performBcmFactoryReset(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum &_factorySettingsType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum, CommonAPI::EmptyDeployment> deploy_factorySettingsType(_factorySettingsType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "performBcmFactoryReset",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_factorySettingsType,
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> VehicleSettingsPresCtrlDBusProxy::performBcmFactoryResetAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum &_factorySettingsType, PerformBcmFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum, CommonAPI::EmptyDeployment> deploy_factorySettingsType(_factorySettingsType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "performBcmFactoryReset",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_factorySettingsType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }
    /**
     * description: method to get the attribute value of vehicle settings type 	Below are the
     *   vehicle settings Type 	 	USER_CUSTOMIZATION_SETTINGS 	AMBIENT_LIGHT_SETTINGS
     *   	MOOD_LIGHT_SETTINGS
     */
    void VehicleSettingsPresCtrlDBusProxy::getValue(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum, CommonAPI::EmptyDeployment> deploy_typeOfVehicleSettings(_typeOfVehicleSettings, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum, CommonAPI::EmptyDeployment> deploy_settingAttributeType(_settingAttributeType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getValue",
        "ii",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_typeOfVehicleSettings, deploy_settingAttributeType,
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> VehicleSettingsPresCtrlDBusProxy::getValueAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, GetValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum, CommonAPI::EmptyDeployment> deploy_typeOfVehicleSettings(_typeOfVehicleSettings, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum, CommonAPI::EmptyDeployment> deploy_settingAttributeType(_settingAttributeType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getValue",
        "ii",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_typeOfVehicleSettings, deploy_settingAttributeType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }
    /**
     * description: method method to set the attribute value of vehicle settings type 	Below are
     *   the vehicle settings Type 	 	USER_CUSTOMIZATION_SETTINGS
     *   	AMBIENT_LIGHT_SETTINGS 	MOOD_LIGHT_SETTINGS
     */
    void VehicleSettingsPresCtrlDBusProxy::setValue(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, const int16_t &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum, CommonAPI::EmptyDeployment> deploy_typeOfVehicleSettings(_typeOfVehicleSettings, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum, CommonAPI::EmptyDeployment> deploy_settingAttributeType(_settingAttributeType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setValue",
        "iin",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_typeOfVehicleSettings, deploy_settingAttributeType, deploy_value,
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> VehicleSettingsPresCtrlDBusProxy::setValueAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, const int16_t &_value, SetValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum, CommonAPI::EmptyDeployment> deploy_typeOfVehicleSettings(_typeOfVehicleSettings, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum, CommonAPI::EmptyDeployment> deploy_settingAttributeType(_settingAttributeType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_value(_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setValue",
        "iin",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_typeOfVehicleSettings, deploy_settingAttributeType, deploy_value,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }


void VehicleSettingsPresCtrlDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace dcif
      } // namespace harman
      } // namespace com
      } // namespace v0
