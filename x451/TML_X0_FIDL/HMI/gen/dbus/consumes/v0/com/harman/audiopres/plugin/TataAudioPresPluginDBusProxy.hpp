/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_AUDIOPRES_PLUGIN_Tata_Audio_Pres_Plugin_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_AUDIOPRES_PLUGIN_Tata_Audio_Pres_Plugin_DBUS_PROXY_HPP_

#include <v0/com/harman/audiopres/plugin/TataAudioPresPluginProxyBase.hpp>
#include "v0/com/harman/audiopres/plugin/TataAudioPresPluginDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace audiopres {
namespace plugin {

class TataAudioPresPluginDBusProxy
    : virtual public TataAudioPresPluginProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    TataAudioPresPluginDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~TataAudioPresPluginDBusProxy() { }

    virtual StartupVolumeAttribute& getStartupVolumeAttribute();
    virtual SdvcStateAttribute& getSdvcStateAttribute();
    virtual AuxInGainAttribute& getAuxInGainAttribute();
    virtual PdcMixModeAttribute& getPdcMixModeAttribute();
    virtual VoiceAlertStatusAttribute& getVoiceAlertStatusAttribute();
    virtual AuxConnectionStateAttribute& getAuxConnectionStateAttribute();
    virtual UsbConnectionStateAttribute& getUsbConnectionStateAttribute();
    virtual IpodConnectionStateAttribute& getIpodConnectionStateAttribute();
    virtual NotificationVolumeAttribute& getNotificationVolumeAttribute();

    virtual SourceStateEvent& getSourceStateEvent();

    /**
     * description: This method is used to set audio entertainment sources
     */
    virtual void SetStartupVolume(const uint16_t &_volume, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetStartupVolumeAsync(const uint16_t &_volume, SetStartupVolumeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to set SDVC state ON-OFF
     */
    virtual void SetSDVCState(const bool &_sdvcState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetSDVCStateAsync(const bool &_sdvcState, SetSDVCStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to set Aux In gain values
     */
    virtual void SetAuxInGain(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAuxInGains &_auxInGain, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetAuxInGainAsync(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAuxInGains &_auxInGain, SetAuxInGainAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to set PDC Mix mode status
     */
    virtual void SetPdcMixMode(const bool &_mixMode, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetPdcMixModeAsync(const bool &_mixMode, SetPdcMixModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to play eBeepTypes beep
     */
    virtual void PlayBeep(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eBeepTypes &_beepType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> PlayBeepAsync(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eBeepTypes &_beepType, PlayBeepAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to Activate Audio Source
     */
    virtual void activateSource(const uint16_t &_sourceId, const uint16_t &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> activateSourceAsync(const uint16_t &_sourceId, const uint16_t &_type, ActivateSourceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to deactivate Audio Source
     */
    virtual void deactivateSource(const uint16_t &_sourceId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deactivateSourceAsync(const uint16_t &_sourceId, DeactivateSourceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to play Voice Alert
     */
    virtual void playVoiceAlert(const uint16_t &_sourceId, const uint16_t &_id, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playVoiceAlertAsync(const uint16_t &_sourceId, const uint16_t &_id, PlayVoiceAlertAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to cancel Voice Alert
     */
    virtual void cancelVoiceAlert(const uint16_t &_sourceId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> cancelVoiceAlertAsync(const uint16_t &_sourceId, CancelVoiceAlertAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to make Sink audio ON-OFF
     */
    virtual void SetAudioOff(const bool &_audioState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetAudioOffAsync(const bool &_audioState, SetAudioOffAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to reset Audio Settings
     */
    virtual void AudioFactoryReset(const uint16_t &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> AudioFactoryResetAsync(const uint16_t &_type, AudioFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to toggle entertianment source in the order specified in
     *   "toggleNextPreviousStrategy" in audiopes.cfg 	If no cfg item
     *   toggleNextPreviousStrategy with value is defined , method return an error
     *   	toggleNextPreviousStrategy should be used to capture the toggle sequence of
     *   entertainment sources in a project 	(at)attribute update activeAudioSource and
     *   activeEntSrc if a source switch has happened	 	(at)return eAudioPresErrors
     */
    virtual void ToggleEntertainmentSource(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eToggleEntSrcDirection &_direction, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> ToggleEntertainmentSourceAsync(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eToggleEntSrcDirection &_direction, ToggleEntertainmentSourceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to toggle mute status of currently playing sources as per
     *   TML mute strategy 	(at)attribute update ActiveSrcMute
     */
    virtual void PlayFromSourceGroup(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eSourceGroup &_srcGroupId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> PlayFromSourceGroupAsync(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eSourceGroup &_srcGroupId, PlayFromSourceGroupAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to toggle mute status of currently playing sources as per
     *   TML mute strategy 	(at)attribute update ActiveSrcMute
     */
    virtual void ToggleSystemMute(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This method is used to toggle mute status of currently playing sources as per
     *   TML mute strategy 	(at)attribute update ActiveSrcMute
     */
    virtual void ToggleMute(const bool &_userInitiated, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This method is used to get source state from Audiomanager 	This will be helpful
     *   in cases where where HMI wanted to know status of source
     */
    virtual void GetSourceState(const uint16_t &_sourceId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::ConnectionState_e &_srcState, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetSourceStateAsync(const uint16_t &_sourceId, GetSourceStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to get source state from Audiomanager 	This will be helpful
     *   in cases where where HMI wanted to know status of source
     */
    virtual void GetSourceStateList(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::apres_SourceConnectionState_L &_srcStateList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> GetSourceStateListAsync(GetSourceStateListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to switch to previous entertainment source from playback
     *   list 	(at)attribute update activeAudioSource and activeEntSrc if a source
     *   switch has happened	 	(at)return eAudioPresErrors
     */
    virtual void SwitchToPreviousEntSource(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SwitchToPreviousEntSourceAsync(SwitchToPreviousEntSourceAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to register device connection State 		This is mainly used
     *   for USB and IPOD device. Can be extended in futher for other devices
     *   	(at)return eAudioPresErrors
     */
    virtual void deviceConnectionState(const uint16_t &_sourceId, const std::string &_connectionState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deviceConnectionStateAsync(const uint16_t &_sourceId, const std::string &_connectionState, DeviceConnectionStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to set notification volume
     */
    virtual void SetNotificationVolume(const uint16_t &_volume, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> SetNotificationVolumeAsync(const uint16_t &_volume, SetNotificationVolumeAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<StartupVolumeAttribute>> startupVolume_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SdvcStateAttribute>> sdvcState_;
    class DBusauxInGain_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AuxInGainAttribute>> {
    public:
    template <typename... _A>
    	DBusauxInGain_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AuxInGainAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusauxInGain_Attribute auxInGain_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PdcMixModeAttribute>> pdcMixMode_;
    class DBusvoiceAlertStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VoiceAlertStatusAttribute>> {
    public:
    template <typename... _A>
    	DBusvoiceAlertStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VoiceAlertStatusAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusvoiceAlertStatus_Attribute voiceAlertStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AuxConnectionStateAttribute, CommonAPI::DBus::StringDeployment>> auxConnectionState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<UsbConnectionStateAttribute, CommonAPI::DBus::StringDeployment>> usbConnectionState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<IpodConnectionStateAttribute, CommonAPI::DBus::StringDeployment>> ipodConnectionState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NotificationVolumeAttribute>> notificationVolume_;

    CommonAPI::DBus::DBusEvent<SourceStateEvent, CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::ConnectionState_e, CommonAPI::EmptyDeployment>> sourceState_;

};

} // namespace plugin
} // namespace audiopres
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_AUDIOPRES_PLUGIN_Tata_Audio_Pres_Plugin_DBUS_PROXY_HPP_

