/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/carplaypres/TataCarPlayPresPluginDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace carplaypres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createTataCarPlayPresPluginDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<TataCarPlayPresPluginDBusProxy>(_address, _connection);
}

INITIALIZER(registerTataCarPlayPresPluginDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		TataCarPlayPresPlugin::getInterface(),
		&createTataCarPlayPresPluginDBusProxy);
}

TataCarPlayPresPluginDBusProxy::TataCarPlayPresPluginDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		nowPlayingData_(*this, "onNowPlayingDataAttributeChanged", "(ss)", "getNowPlayingDataAttribute", static_cast<TataCarPlayPresPlugin_::sPluginNowPlayingInfoDeployment_t*>(nullptr)),
		carplayModeOwner_(*this, "onCarplayModeOwnerAttributeChanged", "(iiiiii)", "getCarplayModeOwnerAttribute", static_cast<TataCarPlayPresPlugin_::sCarplayModeOwnerDeployment_t*>(nullptr)),
		mainaudioOwner_(*this, "onMainaudioOwnerAttributeChanged", "i", "getMainaudioOwnerAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		screenOwner_(*this, "onScreenOwnerAttributeChanged", "i", "getScreenOwnerAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		phoneOwner_(*this, "onPhoneOwnerAttributeChanged", "i", "getPhoneOwnerAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		navigationOwner_(*this, "onNavigationOwnerAttributeChanged", "i", "getNavigationOwnerAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		speechOwner_(*this, "onSpeechOwnerAttributeChanged", "i", "getSpeechOwnerAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		currentSpeechMode_(*this, "onCurrentSpeechModeAttributeChanged", "i", "getCurrentSpeechModeAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		currentPlayState_(*this, "onCurrentPlayStateAttributeChanged", "i", "getCurrentPlayStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
,		factoryResetSuccess_(*this, "FactoryResetSuccess", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		silentAbortVR_(*this, "SilentAbortVR", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      TataCarPlayPresPluginDBusProxy::NowPlayingDataAttribute& TataCarPlayPresPluginDBusProxy::getNowPlayingDataAttribute() {
          return nowPlayingData_;
      }
      TataCarPlayPresPluginDBusProxy::CarplayModeOwnerAttribute& TataCarPlayPresPluginDBusProxy::getCarplayModeOwnerAttribute() {
          return carplayModeOwner_;
      }
      TataCarPlayPresPluginDBusProxy::MainaudioOwnerAttribute& TataCarPlayPresPluginDBusProxy::getMainaudioOwnerAttribute() {
          return mainaudioOwner_;
      }
      TataCarPlayPresPluginDBusProxy::ScreenOwnerAttribute& TataCarPlayPresPluginDBusProxy::getScreenOwnerAttribute() {
          return screenOwner_;
      }
      TataCarPlayPresPluginDBusProxy::PhoneOwnerAttribute& TataCarPlayPresPluginDBusProxy::getPhoneOwnerAttribute() {
          return phoneOwner_;
      }
      TataCarPlayPresPluginDBusProxy::NavigationOwnerAttribute& TataCarPlayPresPluginDBusProxy::getNavigationOwnerAttribute() {
          return navigationOwner_;
      }
      TataCarPlayPresPluginDBusProxy::SpeechOwnerAttribute& TataCarPlayPresPluginDBusProxy::getSpeechOwnerAttribute() {
          return speechOwner_;
      }
      TataCarPlayPresPluginDBusProxy::CurrentSpeechModeAttribute& TataCarPlayPresPluginDBusProxy::getCurrentSpeechModeAttribute() {
          return currentSpeechMode_;
      }
      TataCarPlayPresPluginDBusProxy::CurrentPlayStateAttribute& TataCarPlayPresPluginDBusProxy::getCurrentPlayStateAttribute() {
          return currentPlayState_;
      }

TataCarPlayPresPluginDBusProxy::FactoryResetSuccessEvent& TataCarPlayPresPluginDBusProxy::getFactoryResetSuccessEvent() {
    return factoryResetSuccess_;
}
TataCarPlayPresPluginDBusProxy::SilentAbortVREvent& TataCarPlayPresPluginDBusProxy::getSilentAbortVREvent() {
    return silentAbortVR_;
}
    
    /**
     * description: This method is called by HMI to send the SWC and button key detaills. 	return:
     *   true - Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyCode(_KeyCode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_resultss(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "reportKeyEvent",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_KeyCode, deploy_KeyStatus,
_internalCallStatus,
deploy_resultss);
_resultss = deploy_resultss.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyCode(_KeyCode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_resultss(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "reportKeyEvent",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_KeyCode, deploy_KeyStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _resultss) {
        	if (_callback)
        		_callback(_internalCallStatus, _resultss.getValue());
        },
        std::make_tuple(deploy_resultss));
    }
    /**
     * description: This method is called by Engineering Menu service for factory reset. 	return:
     *   true - Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::CPFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "CPFactoryReset",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::CPFactoryResetAsync(CPFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "CPFactoryReset",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method is called by HMI to send the Native popUp status. 	return: true -
     *   Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::reportHMIpopUp(const bool &_popUpState, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_popUpState(_popUpState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_resultss(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "reportHMIpopUp",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_popUpState,
_internalCallStatus,
deploy_resultss);
_resultss = deploy_resultss.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::reportHMIpopUpAsync(const bool &_popUpState, ReportHMIpopUpAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_popUpState(_popUpState, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_resultss(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "reportHMIpopUp",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_popUpState,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _resultss) {
        	if (_callback)
        		_callback(_internalCallStatus, _resultss.getValue());
        },
        std::make_tuple(deploy_resultss));
    }
    /**
     * description: This method is called by HMI to send the smartHVAC selection. 	return: true -
     *   Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::setSmartFanstate(const bool &_sfstatus, CommonAPI::CallStatus &_internalCallStatus, bool &_curr_sfstatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_sfstatus(_sfstatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_curr_sfstatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setSmartFanstate",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_sfstatus,
_internalCallStatus,
deploy_curr_sfstatus);
_curr_sfstatus = deploy_curr_sfstatus.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::setSmartFanstateAsync(const bool &_sfstatus, SetSmartFanstateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_sfstatus(_sfstatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_curr_sfstatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setSmartFanstate",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_sfstatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _curr_sfstatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _curr_sfstatus.getValue());
        },
        std::make_tuple(deploy_curr_sfstatus));
    }
    /**
     * description: This method is called by HMI to Play the Carplay media. 	input: keyPress status
     *   			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4 	return:
     *   true - Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::playCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "playCarplayMedia",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_KeyStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::playCarplayMediaAsync(const uint32_t &_KeyStatus, PlayCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "playCarplayMedia",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_KeyStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method is called by HMI to pause the Carplay media. 	input: keyPress
     *   status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4
     *   	return: true - Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::pauseCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "pauseCarplayMedia",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_KeyStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::pauseCarplayMediaAsync(const uint32_t &_KeyStatus, PauseCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "pauseCarplayMedia",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_KeyStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method is called by HMI to toggle the current playstate of Carplay media.
     *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::toggleCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "toggleCarplayMedia",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_KeyStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::toggleCarplayMediaAsync(const uint32_t &_KeyStatus, ToggleCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "toggleCarplayMedia",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_KeyStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method is called by HMI to changed the song to Next / Fastforward. 	input:
     *   keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::fwdSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "fwdSeekCarplayMedia",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_KeyStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::fwdSeekCarplayMediaAsync(const uint32_t &_KeyStatus, FwdSeekCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "fwdSeekCarplayMedia",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_KeyStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }
    /**
     * description: This method is called by HMI to changed the song to Previous/ fast backwar.
     *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    void TataCarPlayPresPluginDBusProxy::revSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "revSeekCarplayMedia",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_KeyStatus,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> TataCarPlayPresPluginDBusProxy::revSeekCarplayMediaAsync(const uint32_t &_KeyStatus, RevSeekCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_KeyStatus(_KeyStatus, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint8_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "revSeekCarplayMedia",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_KeyStatus,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint8_t, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }


void TataCarPlayPresPluginDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 2;
      }

      } // namespace carplaypres
      } // namespace harman
      } // namespace com
      } // namespace v0
