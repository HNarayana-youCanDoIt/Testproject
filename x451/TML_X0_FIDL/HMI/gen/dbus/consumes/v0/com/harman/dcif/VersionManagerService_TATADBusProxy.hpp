/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: The VersionManager component is responsible for gathering version information
 *   of the different modules as well as managing     a set of required version for
 *   a certain release, the release configuration that is defined at integration
 *   time.          Version: 1.0     Reason:         - Initial Version     Changes:
 *           1. readonly attributes: allVersionsDetails         2. methods:
 *   getVersionDetails, get16RPartNumber         3. signal : versionMismatch
 * author: Gaurav Garg
 */
#ifndef V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_DBUS_PROXY_HPP_

#include <v0/com/harman/dcif/VersionManagerService_TATAProxyBase.hpp>
#include "v0/com/harman/dcif/VersionManagerService_TATADBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

class VersionManagerService_TATADBusProxy
    : virtual public VersionManagerService_TATAProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    VersionManagerService_TATADBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~VersionManagerService_TATADBusProxy() { }

    virtual VersionMismatchAttribute& getVersionMismatchAttribute();
    virtual A_allVersionsDetailsAttribute& getA_allVersionsDetailsAttribute();
    virtual A_all16RPartDetailsAttribute& getA_all16RPartDetailsAttribute();
    virtual A_all16RPartDetailsAsciiAttribute& getA_all16RPartDetailsAsciiAttribute();


    /**
     * description: a method to retrieve known version information of a specific component        
     *   to retrieve all versions "attribute VersionInfoList allVersions" can be used
     */
    virtual void getVersionDetails(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t &_t_versionInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getVersionDetailsAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, GetVersionDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void get16RPartNumber(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> get16RPartNumberAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void get16RPartNumberInAscii(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> get16RPartNumberInAsciiAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberInAsciiAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getPowerModeCfgType(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_PmodeCfgInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getPowerModeCfgTypeAsync(GetPowerModeCfgTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getWifiMacNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_wifiMACInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getWifiMacNumberAsync(GetWifiMacNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getBluetoothMACNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btMACInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBluetoothMACNumberAsync(GetBluetoothMACNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getBluetoothAlignmentValue(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btAlignmentInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getBluetoothAlignmentValueAsync(GetBluetoothAlignmentValueAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getLCDPanelHwVersion(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_lcdHwInfo, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getLCDPanelHwVersionAsync(GetLCDPanelHwVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBusversionMismatch_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VersionMismatchAttribute>> {
    public:
    template <typename... _A>
    	DBusversionMismatch_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VersionMismatchAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusversionMismatch_Attribute versionMismatch_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<A_allVersionsDetailsAttribute, ::v0::com::harman::dcif::versionmanagertypes_tata_::a_VersionInfoListDeployment_t>> a_allVersionsDetails_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<A_all16RPartDetailsAttribute, ::v0::com::harman::dcif::versionmanagertypes_tata_::a_16RInfoListDeployment_t>> a_all16RPartDetails_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<A_all16RPartDetailsAsciiAttribute, ::v0::com::harman::dcif::versionmanagertypes_tata_::a_16RInfoListDeployment_t>> a_all16RPartDetailsAscii_;


};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_DBUS_PROXY_HPP_

