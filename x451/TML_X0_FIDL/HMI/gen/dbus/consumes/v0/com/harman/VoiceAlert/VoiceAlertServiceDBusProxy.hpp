/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_DBUS_PROXY_HPP_

#include <v0/com/harman/VoiceAlert/VoiceAlertServiceProxyBase.hpp>
#include "v0/com/harman/VoiceAlert/VoiceAlertServiceDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace VoiceAlert {

class VoiceAlertServiceDBusProxy
    : virtual public VoiceAlertServiceProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    VoiceAlertServiceDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~VoiceAlertServiceDBusProxy() { }

    virtual CurDriveModeSigAttribute& getCurDriveModeSigAttribute();
    virtual HuAlertStateAttribute& getHuAlertStateAttribute();
    virtual HuAlertHMISelectionAttribute& getHuAlertHMISelectionAttribute();
    virtual HuInfoFeaturePresenceAttribute& getHuInfoFeaturePresenceAttribute();
    virtual HuAlertStatusAttribute& getHuAlertStatusAttribute();
    virtual VasStatusAttribute& getVasStatusAttribute();
    virtual HuAlertStateMceAttribute& getHuAlertStateMceAttribute();


    virtual void setHuHMISelection(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huTypeofAlert, const bool &_alertStatus, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huAlertType, bool &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setHuHMISelectionAsync(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huTypeofAlert, const bool &_alertStatus, SetHuHMISelectionAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBuscurDriveModeSig_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurDriveModeSigAttribute>> {
    public:
    template <typename... _A>
    	DBuscurDriveModeSig_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurDriveModeSigAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuscurDriveModeSig_Attribute curDriveModeSig_;
    class DBushuAlertState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HuAlertStateAttribute>> {
    public:
    template <typename... _A>
    	DBushuAlertState_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HuAlertStateAttribute>>(
    			_proxy, arguments...) {}
    };
    DBushuAlertState_Attribute huAlertState_;
    class DBushuAlertHMISelection_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HuAlertHMISelectionAttribute>> {
    public:
    template <typename... _A>
    	DBushuAlertHMISelection_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HuAlertHMISelectionAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HuAlertHMISelectionAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<HuAlertHMISelectionAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBushuAlertHMISelection_Attribute huAlertHMISelection_;
    class DBushuInfoFeaturePresence_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HuInfoFeaturePresenceAttribute>> {
    public:
    template <typename... _A>
    	DBushuInfoFeaturePresence_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HuInfoFeaturePresenceAttribute>>(
    			_proxy, arguments...) {}
    };
    DBushuInfoFeaturePresence_Attribute huInfoFeaturePresence_;
    class DBushuAlertStatus_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HuAlertStatusAttribute>> {
    public:
    template <typename... _A>
    	DBushuAlertStatus_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HuAlertStatusAttribute>>(
    			_proxy, arguments...) {}
    };
    DBushuAlertStatus_Attribute huAlertStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VasStatusAttribute>> vasStatus_;
    class DBushuAlertStateMce_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HuAlertStateMceAttribute>> {
    public:
    template <typename... _A>
    	DBushuAlertStateMce_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<HuAlertStateMceAttribute>>(
    			_proxy, arguments...) {}
    };
    DBushuAlertStateMce_Attribute huAlertStateMce_;


};

} // namespace VoiceAlert
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_DBUS_PROXY_HPP_

