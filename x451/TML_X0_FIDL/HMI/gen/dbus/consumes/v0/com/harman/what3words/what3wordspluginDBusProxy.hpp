/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_DBUS_PROXY_HPP_

#include <v0/com/harman/what3words/what3wordspluginProxyBase.hpp>
#include "v0/com/harman/what3words/what3wordspluginDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace what3words {

class what3wordspluginDBusProxy
    : virtual public what3wordspluginProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    what3wordspluginDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~what3wordspluginDBusProxy() { }

    virtual CountryCodeAttribute& getCountryCodeAttribute();

    virtual MapsLaunchStatusEvent& getMapsLaunchStatusEvent();
    virtual ConnNextAppStatusEvent& getConnNextAppStatusEvent();
    virtual UpdateAddressListEvent& getUpdateAddressListEvent();

    /**
     * description: This method will receive a three word address in W3W format as keyboard input  
     *         status:       SUCCESS if no error, FAILURE on error.
     * param: w3waddress The three word address in W3W format
     */
    virtual void navigateToAddress(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> navigateToAddressAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, NavigateToAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This is a getter method to know the status of connectnext app         status:  
     *       SUCCESS if ConnNext link is established, FAILURE if not established
     */
    virtual void getconnNextAppStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getconnNextAppStatusAsync(GetconnNextAppStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This is a getter method to know the country code set by user 		returns:	 
     *   Country code string (eg: For India "IN")         status:       SUCCESS if no
     *   error, FAILURE on error
     */
    virtual void getCountryCode(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, std::string &_countryCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getCountryCodeAsync(GetCountryCodeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will give the list of W3W addresses based upon listType input
     *   		args:		  enum value of listType 		returns:	  Vector list for uniqueID, three
     *   word address, language code, nearest place, country code, label         	     
     *       SUCCESS if no error, FAILURE on error
     */
    virtual void getW3WAddressList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getW3WAddressListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, GetW3WAddressListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will add the provided address in the list based upon listType
     *   		args:	  	  enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    virtual void addW3WAddressToList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> addW3WAddressToListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, AddW3WAddressToListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will delete the provided address from the list based upon listType
     *   		args:	      enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    virtual void deleteW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> deleteW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, DeleteW3WAddressfromListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will edit the input address from the list based upon listType
     *   		args:	      enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    virtual void editW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> editW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, EditW3WAddressfromListAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method will reset all the list to default on factory reset         status:
     *         SUCCESS if no error, FAILURE on error
     */
    virtual void performW3WFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> performW3WFactoryResetAsync(PerformW3WFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<CountryCodeAttribute, CommonAPI::DBus::StringDeployment>> countryCode_;

    CommonAPI::DBus::DBusEvent<MapsLaunchStatusEvent, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment>> mapsLaunchStatus_;
    CommonAPI::DBus::DBusEvent<ConnNextAppStatusEvent, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment>> connNextAppStatus_;
    CommonAPI::DBus::DBusEvent<UpdateAddressListEvent, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment>> updateAddressList_;

};

} // namespace what3words
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_DBUS_PROXY_HPP_

