/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/keypres/KeyPresPluginDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace keypres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createKeyPresPluginDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<KeyPresPluginDBusProxy>(_address, _connection);
}

INITIALIZER(registerKeyPresPluginDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		KeyPresPlugin::getInterface(),
		&createKeyPresPluginDBusProxy);
}

KeyPresPluginDBusProxy::KeyPresPluginDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}


    
    /**
     * description: This method will send the keycode received from HMI 	Input :  KeyCodeID,
     *   KeyState
     */
    void KeyPresPluginDBusProxy::sendKeyCode(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<KeyPresPlugin::eKeyCodeId, CommonAPI::EmptyDeployment> deploy_keyCode(_keyCode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<KeyPresPlugin::eKeyState, CommonAPI::EmptyDeployment> deploy_keystate(_keystate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<KeyPresPlugin::eKeyCodeId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<KeyPresPlugin::eKeyState, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "sendKeyCode",
        "ii",
deploy_keyCode, deploy_keystate,
_internalCallStatus);
}
    /**
     * description: This method will send the the volume slider state 	Input :  KeyCodeID,
     *   KeyState, steps 	Output : result
     */
    void KeyPresPluginDBusProxy::sendSliderState(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, const int16_t &_steps, CommonAPI::CallStatus &_internalCallStatus, KeyPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<KeyPresPlugin::eKeyCodeId, CommonAPI::EmptyDeployment> deploy_keyCode(_keyCode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<KeyPresPlugin::eKeyState, CommonAPI::EmptyDeployment> deploy_keystate(_keystate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_steps(_steps, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<KeyPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<KeyPresPlugin::eKeyCodeId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<KeyPresPlugin::eKeyState, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<KeyPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "sendSliderState",
        "iin",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_keyCode, deploy_keystate, deploy_steps,
_internalCallStatus,
deploy_result);
_result = deploy_result.getValue();
}
    std::future<CommonAPI::CallStatus> KeyPresPluginDBusProxy::sendSliderStateAsync(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, const int16_t &_steps, SendSliderStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<KeyPresPlugin::eKeyCodeId, CommonAPI::EmptyDeployment> deploy_keyCode(_keyCode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<KeyPresPlugin::eKeyState, CommonAPI::EmptyDeployment> deploy_keystate(_keystate, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment> deploy_steps(_steps, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<KeyPresPlugin::eCallResult, CommonAPI::EmptyDeployment> deploy_result(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<KeyPresPlugin::eKeyCodeId, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<KeyPresPlugin::eKeyState, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<KeyPresPlugin::eCallResult,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "sendSliderState",
        "iin",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_keyCode, deploy_keystate, deploy_steps,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<KeyPresPlugin::eCallResult, CommonAPI::EmptyDeployment> _result) {
        	if (_callback)
        		_callback(_internalCallStatus, _result.getValue());
        },
        std::make_tuple(deploy_result));
    }


void KeyPresPluginDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace keypres
      } // namespace harman
      } // namespace com
      } // namespace v0
