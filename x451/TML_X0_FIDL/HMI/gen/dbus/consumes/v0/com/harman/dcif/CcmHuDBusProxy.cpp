/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/dcif/CcmHuDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createCcmHuDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<CcmHuDBusProxy>(_address, _connection);
}

INITIALIZER(registerCcmHuDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		CcmHu::getInterface(),
		&createCcmHuDBusProxy);
}

CcmHuDBusProxy::CcmHuDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		ccmHu_(*this, "onCcmHuAttributeChanged", "(iq)", "getCcmHuAttribute", static_cast<::v0::com::harman::dcif::CcmPresTypes_::tCcmHuDeployment_t*>(nullptr)),
		ccmHuUserInterventionFlag_(*this, "onCcmHuUserInterventionFlagAttributeChanged", "y", "getCcmHuUserInterventionFlagAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
{
}

      CcmHuDBusProxy::CcmHuAttribute& CcmHuDBusProxy::getCcmHuAttribute() {
          return ccmHu_;
      }
      CcmHuDBusProxy::CcmHuUserInterventionFlagAttribute& CcmHuDBusProxy::getCcmHuUserInterventionFlagAttribute() {
          return ccmHuUserInterventionFlag_;
      }

    
    void CcmHuDBusProxy::huCcm_req(const ::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam &_huCcm_enum, const uint16_t &_huCcm_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam, CommonAPI::EmptyDeployment> deploy_huCcm_enum(_huCcm_enum, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_huCcm_value(_huCcm_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "huCcm_req",
        "iq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_huCcm_enum, deploy_huCcm_value,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> CcmHuDBusProxy::huCcm_reqAsync(const ::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam &_huCcm_enum, const uint16_t &_huCcm_value, HuCcm_reqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam, CommonAPI::EmptyDeployment> deploy_huCcm_enum(_huCcm_enum, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_huCcm_value(_huCcm_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "huCcm_req",
        "iq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_huCcm_enum, deploy_huCcm_value,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void CcmHuDBusProxy::getCcmInfo(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::CcmPresTypes::CcmInfo &_ccmInfo, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::CcmInfo, ::v0::com::harman::dcif::CcmPresTypes_::CcmInfoDeployment_t> deploy_ccmInfo(static_cast<::v0::com::harman::dcif::CcmPresTypes_::CcmInfoDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::CcmInfo,::v0::com::harman::dcif::CcmPresTypes_::CcmInfoDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getCcmInfo",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_ccmInfo);
_ccmInfo = deploy_ccmInfo.getValue();
}
    std::future<CommonAPI::CallStatus> CcmHuDBusProxy::getCcmInfoAsync(GetCcmInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::CcmInfo, ::v0::com::harman::dcif::CcmPresTypes_::CcmInfoDeployment_t> deploy_ccmInfo(static_cast<::v0::com::harman::dcif::CcmPresTypes_::CcmInfoDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::CcmInfo,::v0::com::harman::dcif::CcmPresTypes_::CcmInfoDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getCcmInfo",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::dcif::CcmPresTypes::CcmInfo, ::v0::com::harman::dcif::CcmPresTypes_::CcmInfoDeployment_t> _ccmInfo) {
        	if (_callback)
        		_callback(_internalCallStatus, _ccmInfo.getValue());
        },
        std::make_tuple(deploy_ccmInfo));
    }


void CcmHuDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace dcif
      } // namespace harman
      } // namespace com
      } // namespace v0
