/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_Ic_Render_Pres_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_Ic_Render_Pres_DBUS_PROXY_HPP_

#include <v0/com/harman/dcif/IcRenderPresProxyBase.hpp>
#include "v0/com/harman/dcif/IcRenderPresDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

class IcRenderPresDBusProxy
    : virtual public IcRenderPresProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    IcRenderPresDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~IcRenderPresDBusProxy() { }



    virtual void setIcRenderCast(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, const bool &_icRenderCast_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setIcRenderCastAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, const bool &_icRenderCast_value, SetIcRenderCastAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getIcRenderCast(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, CommonAPI::CallStatus &_internalCallStatus, bool &_icRenderCast_value, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getIcRenderCastAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, GetIcRenderCastAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setIcColorTheme(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum &_icColorTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setIcColorThemeAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum &_icColorTheme, SetIcColorThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setIcRenderPhoneCallState(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState &_icCallState_enum, const std::string &_icContactNameNum, const int8_t &_icCallId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setIcRenderPhoneCallStateAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState &_icCallState_enum, const std::string &_icContactNameNum, const int8_t &_icCallId, SetIcRenderPhoneCallStateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void setIcRenderSmsRxIndication(const bool &_icSmsIndicationFlag, const std::string &_icContactNameNum, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setIcRenderSmsRxIndicationAsync(const bool &_icSmsIndicationFlag, const std::string &_icContactNameNum, SetIcRenderSmsRxIndicationAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   


};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_DCIF_Ic_Render_Pres_DBUS_PROXY_HPP_

