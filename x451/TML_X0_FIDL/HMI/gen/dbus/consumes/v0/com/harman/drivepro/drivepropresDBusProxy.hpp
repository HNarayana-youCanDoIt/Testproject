/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DRIVEPRO_drivepropres_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_DRIVEPRO_drivepropres_DBUS_PROXY_HPP_

#include <v0/com/harman/drivepro/drivepropresProxyBase.hpp>
#include "v0/com/harman/drivepro/drivepropresDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace drivepro {

class drivepropresDBusProxy
    : virtual public drivepropresProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    drivepropresDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~drivepropresDBusProxy() { }

    virtual LogTypeAttribute& getLogTypeAttribute();
    virtual ResetAllOptionEnabledAttribute& getResetAllOptionEnabledAttribute();
    virtual S_DpVersionInfoAttribute& getS_DpVersionInfoAttribute();
    virtual S_EfficiencyInfoAttribute& getS_EfficiencyInfoAttribute();
    virtual S_DrivingInfoAttribute& getS_DrivingInfoAttribute();
    virtual S_SafetyInfoAttribute& getS_SafetyInfoAttribute();
    virtual S_UserInfoAttribute& getS_UserInfoAttribute();
    virtual S_EngineRPmInfoAttribute& getS_EngineRPmInfoAttribute();
    virtual S_AcOnOffDrivingTimeInfoAttribute& getS_AcOnOffDrivingTimeInfoAttribute();
    virtual S_ClutchAccPedalUsageInfoAttribute& getS_ClutchAccPedalUsageInfoAttribute();
    virtual S_BrakingInstRatingAttribute& getS_BrakingInstRatingAttribute();
    virtual BrakingCumulativeRatingAttribute& getBrakingCumulativeRatingAttribute();
    virtual S_BreakingCountPerReqKMAttribute& getS_BreakingCountPerReqKMAttribute();
    virtual S_AccInstRatingAttribute& getS_AccInstRatingAttribute();
    virtual S_AccCumulativeRatingAttribute& getS_AccCumulativeRatingAttribute();
    virtual S_AccPedalPosAnalyticsAttribute& getS_AccPedalPosAnalyticsAttribute();
    virtual S_AvgAccPedalPosAttribute& getS_AvgAccPedalPosAttribute();
    virtual S_AccHarshCountAttribute& getS_AccHarshCountAttribute();
    virtual EtxmnVariantAttribute& getEtxmnVariantAttribute();
    virtual GSInstRatingAttribute& getGSInstRatingAttribute();
    virtual S_GSCumRatingAttribute& getS_GSCumRatingAttribute();
    virtual S_DriveKmTimeVsGearNumberRatingAttribute& getS_DriveKmTimeVsGearNumberRatingAttribute();
    virtual S_DriveKmTimeInIncorrectGearAttribute& getS_DriveKmTimeInIncorrectGearAttribute();
    virtual S_NumberGearShiftsPerRequiredkmsAttribute& getS_NumberGearShiftsPerRequiredkmsAttribute();
    virtual S_TopSpeedAttribute& getS_TopSpeedAttribute();
    virtual DriveInstRatingAttribute& getDriveInstRatingAttribute();
    virtual S_DriveCumuRatingAttribute& getS_DriveCumuRatingAttribute();
    virtual S_TimeinDifferentSpeedBandsAttribute& getS_TimeinDifferentSpeedBandsAttribute();
    virtual S_TripDistanceAttribute& getS_TripDistanceAttribute();
    virtual S_TripDurationAttribute& getS_TripDurationAttribute();
    virtual S_AverageSpeedAttribute& getS_AverageSpeedAttribute();
    virtual S_AverageFuelEconomyAttribute& getS_AverageFuelEconomyAttribute();
    virtual OverallScoreInstRatingAttribute& getOverallScoreInstRatingAttribute();
    virtual S_SeatBeltPerTimeAttribute& getS_SeatBeltPerTimeAttribute();
    virtual S_PerTimeWithoutSeatBeltAttribute& getS_PerTimeWithoutSeatBeltAttribute();
    virtual S_TimeDoorUnlockedAttribute& getS_TimeDoorUnlockedAttribute();
    virtual S_ClutchBrakingAtHighSpeedAttribute& getS_ClutchBrakingAtHighSpeedAttribute();
    virtual S_SafetyWarningAttribute& getS_SafetyWarningAttribute();
    virtual SafetyInstRatingAttribute& getSafetyInstRatingAttribute();
    virtual S_TripResetStatusAttribute& getS_TripResetStatusAttribute();
    virtual S_DistUnitAttribute& getS_DistUnitAttribute();
    virtual S_FuelUnitAttribute& getS_FuelUnitAttribute();

    virtual RequestStatusSignalEvent& getRequestStatusSignalEvent();
    virtual BlueScreenDataUpdateEvent& getBlueScreenDataUpdateEvent();
    virtual RpmEnableStatusUpdateEvent& getRpmEnableStatusUpdateEvent();
    virtual TripResetStatusEvent& getTripResetStatusEvent();

    /**
     * description: Method for Engineering Menu service to perform  	factory reset operation of
     *   drive pro data
     */
    virtual void performDPFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> performDPFactoryResetAsync(PerformDPFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to reset trip specific  data
     */
    virtual void resetTrip(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripTyp, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> resetTripAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, ResetTripAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to update the configuration file from the USB
     */
    virtual void updateConfigFile(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> updateConfigFileAsync(UpdateConfigFileAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to update the configuration file from the USB
     */
    virtual void updateDpDynamicLib(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> updateDpDynamicLibAsync(UpdateDpDynamicLibAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to record trip specific logging
     */
    virtual void setTripLogging(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripTyp, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setTripLoggingAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, SetTripLoggingAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to read Drive Pro Log level
     */
    virtual void getTripLogging(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getTripLoggingAsync(GetTripLoggingAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to extract the Drive Pro Logs
     */
    virtual void extractDPLogs(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> extractDPLogsAsync(ExtractDPLogsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to set Drive Pro Log level
     */
    virtual void setDpLogLevel(const uint32_t &_logLevel, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, uint32_t &_logLvl, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setDpLogLevelAsync(const uint32_t &_logLevel, SetDpLogLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to read Drive Pro Log level
     */
    virtual void getDpLogLevel(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, uint32_t &_logLevel, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDpLogLevelAsync(GetDpLogLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to set Drive Pro Logging Type
     */
    virtual void setDpLoggingType(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingTyp, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setDpLoggingTypeAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, SetDpLoggingTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to get Drive Pro Logging Type
     */
    virtual void getDpLoggingType(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDpLoggingTypeAsync(GetDpLoggingTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to subscribe signals for HMI Blue Screen
     */
    virtual void subscribeSignals(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_sigList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> subscribeSignalsAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, SubscribeSignalsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to unsubscribe signals for HMI Blue Screen
     */
    virtual void unSubscribeSignals(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_sigList, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> unSubscribeSignalsAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, UnSubscribeSignalsAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getSignaListValue(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSignaListValueAsync(GetSignaListValueAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    virtual void getScalingFactor(CommonAPI::CallStatus &_internalCallStatus, double &_scalingFactor, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getScalingFactorAsync(GetScalingFactorAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Method to get the Max Rating
     */
    virtual void getMaxRating(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_maxRating, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getMaxRatingAsync(GetMaxRatingAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    class DBuslogType_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<LogTypeAttribute>> {
    public:
    template <typename... _A>
    	DBuslogType_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<LogTypeAttribute>>(
    			_proxy, arguments...) {}
    void setValue(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType& requestValue,
    	CommonAPI::CallStatus& callStatus,
    	::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType& responseValue,
    	const CommonAPI::CallInfo *_info = nullptr) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			callStatus = CommonAPI::CallStatus::INVALID_VALUE;
    			return;
    		}
    		// call parent function if ok
    		CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<LogTypeAttribute>>::setValue(requestValue, callStatus, responseValue, _info);
    	}
    std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType& requestValue,
    	std::function<void(const CommonAPI::CallStatus &, ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType)> _callback,
    	const CommonAPI::CallInfo *_info) {
    		// validate input parameters
    		if (!requestValue.validate()) {
    			::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType _returnvalue;
    			_callback(CommonAPI::CallStatus::INVALID_VALUE, _returnvalue);
    			std::promise<CommonAPI::CallStatus> promise;
    			promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
    			return promise.get_future();            				
    		}
    		// call parent function if ok
    		return CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusAttribute<LogTypeAttribute>>::setValueAsync(requestValue, _callback, _info);
    	}
    };
    DBuslogType_Attribute logType_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ResetAllOptionEnabledAttribute>> resetAllOptionEnabled_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_DpVersionInfoAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sDpVersionInfoDeployment_t>> s_DpVersionInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_EfficiencyInfoAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sEffciencyInfoDeployment_t>> s_EfficiencyInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_DrivingInfoAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sDrivingInfoDeployment_t>> s_DrivingInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_SafetyInfoAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sSafetyInfoDeployment_t>> s_SafetyInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_UserInfoAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sUserInfoDeployment_t>> s_UserInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_EngineRPmInfoAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sEngineRPMInfoDeployment_t>> s_EngineRPmInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_AcOnOffDrivingTimeInfoAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sAcOnOffDrivingTimeInfoDeployment_t>> s_AcOnOffDrivingTimeInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_ClutchAccPedalUsageInfoAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sClutchAccPedalUsageInfoDeployment_t>> s_ClutchAccPedalUsageInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_BrakingInstRatingAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sBrakingInstRatingDeployment_t>> s_BrakingInstRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BrakingCumulativeRatingAttribute>> brakingCumulativeRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_BreakingCountPerReqKMAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sBreakingCountPerReqKMDeployment_t>> s_BreakingCountPerReqKM_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_AccInstRatingAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sAccInstRatingDeployment_t>> s_AccInstRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_AccCumulativeRatingAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sAccCumulativeRatingDeployment_t>> s_AccCumulativeRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_AccPedalPosAnalyticsAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sAccPedalPosAnalyticsDeployment_t>> s_AccPedalPosAnalytics_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_AvgAccPedalPosAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sAvgAccPedalPosDeployment_t>> s_AvgAccPedalPos_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_AccHarshCountAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sAccHarshCountDeployment_t>> s_AccHarshCount_;
    class DBusetxmnVariant_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<EtxmnVariantAttribute>> {
    public:
    template <typename... _A>
    	DBusetxmnVariant_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<EtxmnVariantAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusetxmnVariant_Attribute etxmnVariant_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<GSInstRatingAttribute>> gSInstRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_GSCumRatingAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sGSCumRatingDeployment_t>> s_GSCumRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_DriveKmTimeVsGearNumberRatingAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sDriveKmTimeVsGearNumberRatingDeployment_t>> s_DriveKmTimeVsGearNumberRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_DriveKmTimeInIncorrectGearAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sDriveKmTimeInIncorrectGearDeployment_t>> s_DriveKmTimeInIncorrectGear_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_NumberGearShiftsPerRequiredkmsAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sNumberGearShiftsPerRequiredkmsDeployment_t>> s_NumberGearShiftsPerRequiredkms_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_TopSpeedAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sTopSpeedDeployment_t>> s_TopSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DriveInstRatingAttribute>> driveInstRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_DriveCumuRatingAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sDriveCumuRatingDeployment_t>> s_DriveCumuRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_TimeinDifferentSpeedBandsAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sTimeinDifferentSpeedBandsDeployment_t>> s_TimeinDifferentSpeedBands_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_TripDistanceAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sTripDistanceDeployment_t>> s_TripDistance_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_TripDurationAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sTripDurationDeployment_t>> s_TripDuration_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_AverageSpeedAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sAverageSpeedDeployment_t>> s_AverageSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_AverageFuelEconomyAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sAverageFuelEconomyDeployment_t>> s_AverageFuelEconomy_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<OverallScoreInstRatingAttribute>> overallScoreInstRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_SeatBeltPerTimeAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sSeatBeltPerTimeDeployment_t>> s_SeatBeltPerTime_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_PerTimeWithoutSeatBeltAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sPerTimeWithoutSeatBeltDeployment_t>> s_PerTimeWithoutSeatBelt_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_TimeDoorUnlockedAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sTimeDoorUnlockedDeployment_t>> s_TimeDoorUnlocked_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_ClutchBrakingAtHighSpeedAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sClutchBrakingAtHighSpeedDeployment_t>> s_ClutchBrakingAtHighSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_SafetyWarningAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sSafetyWarningDeployment_t>> s_SafetyWarning_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SafetyInstRatingAttribute>> safetyInstRating_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_TripResetStatusAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sTripResetStatusDeployment_t>> s_TripResetStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_DistUnitAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sDistUnitDeployment_t>> s_DistUnit_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<S_FuelUnitAttribute, ::v0::com::harman::drivepro::driveProTypeCollection_::sFuelUnitDeployment_t>> s_FuelUnit_;

    CommonAPI::DBus::DBusEvent<RequestStatusSignalEvent, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eRequestType, CommonAPI::EmptyDeployment>> requestStatusSignal_;
    CommonAPI::DBus::DBusEvent<BlueScreenDataUpdateEvent, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalListValueMap, ::v0::com::harman::drivepro::driveProTypeCollection_::signalListValueMapDeployment_t>> blueScreenDataUpdate_;
    CommonAPI::DBus::DBusEvent<RpmEnableStatusUpdateEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> rpmEnableStatusUpdate_;
    CommonAPI::DBus::DBusEvent<TripResetStatusEvent, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::sTripResetStatus, ::v0::com::harman::drivepro::driveProTypeCollection_::sTripResetStatusDeployment_t>> tripResetStatus_;

};

} // namespace drivepro
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_DRIVEPRO_drivepropres_DBUS_PROXY_HPP_

