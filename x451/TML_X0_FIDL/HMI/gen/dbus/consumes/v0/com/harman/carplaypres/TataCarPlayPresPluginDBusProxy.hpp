/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_DBUS_PROXY_HPP_

#include <v0/com/harman/carplaypres/TataCarPlayPresPluginProxyBase.hpp>
#include "v0/com/harman/carplaypres/TataCarPlayPresPluginDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace carplaypres {

class TataCarPlayPresPluginDBusProxy
    : virtual public TataCarPlayPresPluginProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    TataCarPlayPresPluginDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~TataCarPlayPresPluginDBusProxy() { }

    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute();
    virtual CarplayModeOwnerAttribute& getCarplayModeOwnerAttribute();
    virtual MainaudioOwnerAttribute& getMainaudioOwnerAttribute();
    virtual ScreenOwnerAttribute& getScreenOwnerAttribute();
    virtual PhoneOwnerAttribute& getPhoneOwnerAttribute();
    virtual NavigationOwnerAttribute& getNavigationOwnerAttribute();
    virtual SpeechOwnerAttribute& getSpeechOwnerAttribute();
    virtual CurrentSpeechModeAttribute& getCurrentSpeechModeAttribute();
    virtual CurrentPlayStateAttribute& getCurrentPlayStateAttribute();

    virtual FactoryResetSuccessEvent& getFactoryResetSuccessEvent();
    virtual SilentAbortVREvent& getSilentAbortVREvent();

    /**
     * description: This method is called by HMI to send the SWC and button key detaills. 	return:
     *   true - Success 		    false - Not successful
     */
    virtual void reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by Engineering Menu service for factory reset. 	return:
     *   true - Success 		    false - Not successful
     */
    virtual void CPFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> CPFactoryResetAsync(CPFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to send the Native popUp status. 	return: true -
     *   Success 		    false - Not successful
     */
    virtual void reportHMIpopUp(const bool &_popUpState, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> reportHMIpopUpAsync(const bool &_popUpState, ReportHMIpopUpAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to send the smartHVAC selection. 	return: true -
     *   Success 		    false - Not successful
     */
    virtual void setSmartFanstate(const bool &_sfstatus, CommonAPI::CallStatus &_internalCallStatus, bool &_curr_sfstatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setSmartFanstateAsync(const bool &_sfstatus, SetSmartFanstateAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to Play the Carplay media. 	input: keyPress status
     *   			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4 	return:
     *   true - Success 		    false - Not successful
     */
    virtual void playCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> playCarplayMediaAsync(const uint32_t &_KeyStatus, PlayCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to pause the Carplay media. 	input: keyPress
     *   status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4
     *   	return: true - Success 		    false - Not successful
     */
    virtual void pauseCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> pauseCarplayMediaAsync(const uint32_t &_KeyStatus, PauseCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to toggle the current playstate of Carplay media.
     *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    virtual void toggleCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> toggleCarplayMediaAsync(const uint32_t &_KeyStatus, ToggleCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to changed the song to Next / Fastforward. 	input:
     *   keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    virtual void fwdSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> fwdSeekCarplayMediaAsync(const uint32_t &_KeyStatus, FwdSeekCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is called by HMI to changed the song to Previous/ fast backwar.
     *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    virtual void revSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> revSeekCarplayMediaAsync(const uint32_t &_KeyStatus, RevSeekCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NowPlayingDataAttribute, TataCarPlayPresPlugin_::sPluginNowPlayingInfoDeployment_t>> nowPlayingData_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CarplayModeOwnerAttribute, TataCarPlayPresPlugin_::sCarplayModeOwnerDeployment_t>> carplayModeOwner_;
    class DBusmainaudioOwner_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MainaudioOwnerAttribute>> {
    public:
    template <typename... _A>
    	DBusmainaudioOwner_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<MainaudioOwnerAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusmainaudioOwner_Attribute mainaudioOwner_;
    class DBusscreenOwner_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ScreenOwnerAttribute>> {
    public:
    template <typename... _A>
    	DBusscreenOwner_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ScreenOwnerAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusscreenOwner_Attribute screenOwner_;
    class DBusphoneOwner_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PhoneOwnerAttribute>> {
    public:
    template <typename... _A>
    	DBusphoneOwner_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<PhoneOwnerAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusphoneOwner_Attribute phoneOwner_;
    class DBusnavigationOwner_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NavigationOwnerAttribute>> {
    public:
    template <typename... _A>
    	DBusnavigationOwner_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<NavigationOwnerAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusnavigationOwner_Attribute navigationOwner_;
    class DBusspeechOwner_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SpeechOwnerAttribute>> {
    public:
    template <typename... _A>
    	DBusspeechOwner_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SpeechOwnerAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusspeechOwner_Attribute speechOwner_;
    class DBuscurrentSpeechMode_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentSpeechModeAttribute>> {
    public:
    template <typename... _A>
    	DBuscurrentSpeechMode_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentSpeechModeAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuscurrentSpeechMode_Attribute currentSpeechMode_;
    class DBuscurrentPlayState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentPlayStateAttribute>> {
    public:
    template <typename... _A>
    	DBuscurrentPlayState_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<CurrentPlayStateAttribute>>(
    			_proxy, arguments...) {}
    };
    DBuscurrentPlayState_Attribute currentPlayState_;

    CommonAPI::DBus::DBusEvent<FactoryResetSuccessEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> factoryResetSuccess_;
    CommonAPI::DBus::DBusEvent<SilentAbortVREvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> silentAbortVR_;

};

} // namespace carplaypres
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_DBUS_PROXY_HPP_

