/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_Vehicle_Settings_Pres_Ctrl_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_Vehicle_Settings_Pres_Ctrl_DBUS_PROXY_HPP_

#include <v0/com/harman/dcif/VehicleSettingsPresCtrlProxyBase.hpp>
#include "v0/com/harman/dcif/VehicleSettingsPresCtrlDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

class VehicleSettingsPresCtrlDBusProxy
    : virtual public VehicleSettingsPresCtrlProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    VehicleSettingsPresCtrlDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~VehicleSettingsPresCtrlDBusProxy() { }

    virtual AmbientLightModeIlluOnHuAttribute& getAmbientLightModeIlluOnHuAttribute();
    virtual ParkLampStatusAttribute& getParkLampStatusAttribute();
    virtual VehicleSpeedAttribute& getVehicleSpeedAttribute();
    virtual BCmPresenceAttribute& getBCmPresenceAttribute();
    virtual BCmUcsStateAttribute& getBCmUcsStateAttribute();
    virtual BCmAutoRelockStateAttribute& getBCmAutoRelockStateAttribute();
    virtual BCmApproachLampStateAttribute& getBCmApproachLampStateAttribute();
    virtual BCmDRLStateAttribute& getBCmDRLStateAttribute();
    virtual BCmAntitheftFeatureStateAttribute& getBCmAntitheftFeatureStateAttribute();
    virtual BcmHuCkdStateAttribute& getBcmHuCkdStateAttribute();
    virtual BCmAntitheftKeyConfirmationAttribute& getBCmAntitheftKeyConfirmationAttribute();

    virtual FmhValueEvent& getFmhValueEvent();
    virtual ApproachLampValueEvent& getApproachLampValueEvent();
    virtual DrlActiveSignalValEvent& getDrlActiveSignalValEvent();
    virtual HornRequestVehicleLockEvent& getHornRequestVehicleLockEvent();
    virtual VehicleUnlockRKEEvent& getVehicleUnlockRKEEvent();
    virtual VehicleUnlockPKEEvent& getVehicleUnlockPKEEvent();
    virtual DriveAwayLockingEvent& getDriveAwayLockingEvent();
    virtual AutoRelockfunctionEvent& getAutoRelockfunctionEvent();
    virtual BcmFactorySettingRequestEvent& getBcmFactorySettingRequestEvent();
    virtual HuBCmRequestErrorEvent& getHuBCmRequestErrorEvent();
    virtual AmbientLightLoadSettingsEvent& getAmbientLightLoadSettingsEvent();
    virtual AmbLightModeEvent& getAmbLightModeEvent();
    virtual AmbLightIllumPossibleLevelsEvent& getAmbLightIllumPossibleLevelsEvent();
    virtual AmbientLightIllumSelLevelsEvent& getAmbientLightIllumSelLevelsEvent();
    virtual MoodLightModeEvent& getMoodLightModeEvent();
    virtual MoodLightlluminationLevelsEvent& getMoodLightlluminationLevelsEvent();
    virtual MoodLightLocationOrZoneSettingsEvent& getMoodLightLocationOrZoneSettingsEvent();
    virtual MoodLightColourSettingsEvent& getMoodLightColourSettingsEvent();
    virtual SpeedLockOutEvent& getSpeedLockOutEvent();

    /**
     * description: method to return type of configuartion done for setttings type.
     */
    virtual void getSettingsTypeConfiguration(CommonAPI::CallStatus &_internalCallStatus, VehicleSettingsPresCtrl::settingsTypeConfiguration &_settingsTypeConfiguration_arr, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSettingsTypeConfigurationAsync(GetSettingsTypeConfigurationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: method to perform BCM Factory Reset.
     */
    virtual void performBcmFactoryReset(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum &_factorySettingsType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> performBcmFactoryResetAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum &_factorySettingsType, PerformBcmFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: method to get the attribute value of vehicle settings type 	Below are the
     *   vehicle settings Type 	 	USER_CUSTOMIZATION_SETTINGS 	AMBIENT_LIGHT_SETTINGS
     *   	MOOD_LIGHT_SETTINGS
     */
    virtual void getValue(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getValueAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, GetValueAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: method method to set the attribute value of vehicle settings type 	Below are
     *   the vehicle settings Type 	 	USER_CUSTOMIZATION_SETTINGS
     *   	AMBIENT_LIGHT_SETTINGS 	MOOD_LIGHT_SETTINGS
     */
    virtual void setValue(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, const int16_t &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, const int16_t &_value, SetValueAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AmbientLightModeIlluOnHuAttribute>> ambientLightModeIlluOnHu_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<ParkLampStatusAttribute>> parkLampStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<VehicleSpeedAttribute>> vehicleSpeed_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BCmPresenceAttribute>> bCmPresence_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BCmUcsStateAttribute>> bCmUcsState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BCmAutoRelockStateAttribute>> bCmAutoRelockState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BCmApproachLampStateAttribute>> bCmApproachLampState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BCmDRLStateAttribute>> bCmDRLState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BCmAntitheftFeatureStateAttribute>> bCmAntitheftFeatureState_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BcmHuCkdStateAttribute>> bcmHuCkdState_;
    class DBusbCmAntitheftKeyConfirmation_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BCmAntitheftKeyConfirmationAttribute>> {
    public:
    template <typename... _A>
    	DBusbCmAntitheftKeyConfirmation_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<BCmAntitheftKeyConfirmationAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusbCmAntitheftKeyConfirmation_Attribute bCmAntitheftKeyConfirmation_;

    CommonAPI::DBus::DBusEvent<FmhValueEvent, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment>> fmhValue_;
    CommonAPI::DBus::DBusEvent<ApproachLampValueEvent, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment>> approachLampValue_;
    CommonAPI::DBus::DBusEvent<DrlActiveSignalValEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> drlActiveSignalVal_;
    CommonAPI::DBus::DBusEvent<HornRequestVehicleLockEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> hornRequestVehicleLock_;
    CommonAPI::DBus::DBusEvent<VehicleUnlockRKEEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> vehicleUnlockRKE_;
    CommonAPI::DBus::DBusEvent<VehicleUnlockPKEEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> vehicleUnlockPKE_;
    CommonAPI::DBus::DBusEvent<DriveAwayLockingEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> driveAwayLocking_;
    CommonAPI::DBus::DBusEvent<AutoRelockfunctionEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> autoRelockfunction_;
    CommonAPI::DBus::DBusEvent<BcmFactorySettingRequestEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> bcmFactorySettingRequest_;
    CommonAPI::DBus::DBusEvent<HuBCmRequestErrorEvent, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum, CommonAPI::EmptyDeployment>> huBCmRequestError_;
    CommonAPI::DBus::DBusEvent<AmbientLightLoadSettingsEvent, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::ambientLightLoadSettings_enum, CommonAPI::EmptyDeployment>> ambientLightLoadSettings_;
    CommonAPI::DBus::DBusEvent<AmbLightModeEvent, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::ambientLightMode_enum, CommonAPI::EmptyDeployment>> ambLightMode_;
    CommonAPI::DBus::DBusEvent<AmbLightIllumPossibleLevelsEvent, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment>> ambLightIllumPossibleLevels_;
    CommonAPI::DBus::DBusEvent<AmbientLightIllumSelLevelsEvent, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment>> ambientLightIllumSelLevels_;
    CommonAPI::DBus::DBusEvent<MoodLightModeEvent, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::moodtLightMode_enum, CommonAPI::EmptyDeployment>> moodLightMode_;
    CommonAPI::DBus::DBusEvent<MoodLightlluminationLevelsEvent, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<int16_t, CommonAPI::EmptyDeployment>> moodLightlluminationLevels_;
    CommonAPI::DBus::DBusEvent<MoodLightLocationOrZoneSettingsEvent, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::moodtLightLocationOrZone_enum, CommonAPI::EmptyDeployment>> moodLightLocationOrZoneSettings_;
    CommonAPI::DBus::DBusEvent<MoodLightColourSettingsEvent, CommonAPI::Deployable<::v0::com::harman::dcif::VehicleSettingsTypeCollection::moodtLightColour_enum, CommonAPI::EmptyDeployment>> moodLightColourSettings_;
    CommonAPI::DBus::DBusEvent<SpeedLockOutEvent, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment>> speedLockOut_;

};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_DCIF_Vehicle_Settings_Pres_Ctrl_DBUS_PROXY_HPP_

