/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/drivepro/drivepropresDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace drivepro {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createdrivepropresDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<drivepropresDBusProxy>(_address, _connection);
}

INITIALIZER(registerdrivepropresDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		drivepropres::getInterface(),
		&createdrivepropresDBusProxy);
}

drivepropresDBusProxy::drivepropresDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		logType_(*this, "onLogTypeAttributeChanged", "setLogTypeAttribute", "i", "getLogTypeAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		resetAllOptionEnabled_(*this, "onResetAllOptionEnabledAttributeChanged", "b", "getResetAllOptionEnabledAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		s_DpVersionInfo_(*this, "onS_DpVersionInfoAttributeChanged", "(sd)", "getS_DpVersionInfoAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sDpVersionInfoDeployment_t*>(nullptr)),
		s_EfficiencyInfo_(*this, "onS_EfficiencyInfoAttributeChanged", "(idd(id)(dddddddddddddd)dd)", "getS_EfficiencyInfoAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sEffciencyInfoDeployment_t*>(nullptr)),
		s_DrivingInfo_(*this, "onS_DrivingInfoAttributeChanged", "(idddddddddd(idddddddd)d)", "getS_DrivingInfoAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sDrivingInfoDeployment_t*>(nullptr)),
		s_SafetyInfo_(*this, "onS_SafetyInfoAttributeChanged", "(d(iddd)d(iddddddddddd))", "getS_SafetyInfoAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sSafetyInfoDeployment_t*>(nullptr)),
		s_UserInfo_(*this, "onS_UserInfoAttributeChanged", "(sss)", "getS_UserInfoAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sUserInfoDeployment_t*>(nullptr)),
		s_EngineRPmInfo_(*this, "onS_EngineRPmInfoAttributeChanged", "(id)", "getS_EngineRPmInfoAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sEngineRPMInfoDeployment_t*>(nullptr)),
		s_AcOnOffDrivingTimeInfo_(*this, "onS_AcOnOffDrivingTimeInfoAttributeChanged", "(iudu)", "getS_AcOnOffDrivingTimeInfoAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sAcOnOffDrivingTimeInfoDeployment_t*>(nullptr)),
		s_ClutchAccPedalUsageInfo_(*this, "onS_ClutchAccPedalUsageInfoAttributeChanged", "(iud)", "getS_ClutchAccPedalUsageInfoAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sClutchAccPedalUsageInfoDeployment_t*>(nullptr)),
		s_BrakingInstRating_(*this, "onS_BrakingInstRatingAttributeChanged", "(iddu)", "getS_BrakingInstRatingAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sBrakingInstRatingDeployment_t*>(nullptr)),
		brakingCumulativeRating_(*this, "onBrakingCumulativeRatingAttributeChanged", "d", "getBrakingCumulativeRatingAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		s_BreakingCountPerReqKM_(*this, "onS_BreakingCountPerReqKMAttributeChanged", "(idd)", "getS_BreakingCountPerReqKMAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sBreakingCountPerReqKMDeployment_t*>(nullptr)),
		s_AccInstRating_(*this, "onS_AccInstRatingAttributeChanged", "(id)", "getS_AccInstRatingAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sAccInstRatingDeployment_t*>(nullptr)),
		s_AccCumulativeRating_(*this, "onS_AccCumulativeRatingAttributeChanged", "(id)", "getS_AccCumulativeRatingAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sAccCumulativeRatingDeployment_t*>(nullptr)),
		s_AccPedalPosAnalytics_(*this, "onS_AccPedalPosAnalyticsAttributeChanged", "(iuuududududud)", "getS_AccPedalPosAnalyticsAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sAccPedalPosAnalyticsDeployment_t*>(nullptr)),
		s_AvgAccPedalPos_(*this, "onS_AvgAccPedalPosAttributeChanged", "(id)", "getS_AvgAccPedalPosAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sAvgAccPedalPosDeployment_t*>(nullptr)),
		s_AccHarshCount_(*this, "onS_AccHarshCountAttributeChanged", "(id)", "getS_AccHarshCountAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sAccHarshCountDeployment_t*>(nullptr)),
		etxmnVariant_(*this, "onEtxmnVariantAttributeChanged", "i", "getEtxmnVariantAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		gSInstRating_(*this, "onGSInstRatingAttributeChanged", "d", "getGSInstRatingAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		s_GSCumRating_(*this, "onS_GSCumRatingAttributeChanged", "(id)", "getS_GSCumRatingAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sGSCumRatingDeployment_t*>(nullptr)),
		s_DriveKmTimeVsGearNumberRating_(*this, "onS_DriveKmTimeVsGearNumberRatingAttributeChanged", "(iaddadaddadu)", "getS_DriveKmTimeVsGearNumberRatingAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sDriveKmTimeVsGearNumberRatingDeployment_t*>(nullptr)),
		s_DriveKmTimeInIncorrectGear_(*this, "onS_DriveKmTimeInIncorrectGearAttributeChanged", "(iddddddddddddddddduuuddddd)", "getS_DriveKmTimeInIncorrectGearAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sDriveKmTimeInIncorrectGearDeployment_t*>(nullptr)),
		s_NumberGearShiftsPerRequiredkms_(*this, "onS_NumberGearShiftsPerRequiredkmsAttributeChanged", "(iddu)", "getS_NumberGearShiftsPerRequiredkmsAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sNumberGearShiftsPerRequiredkmsDeployment_t*>(nullptr)),
		s_TopSpeed_(*this, "onS_TopSpeedAttributeChanged", "(id)", "getS_TopSpeedAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sTopSpeedDeployment_t*>(nullptr)),
		driveInstRating_(*this, "onDriveInstRatingAttributeChanged", "d", "getDriveInstRatingAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		s_DriveCumuRating_(*this, "onS_DriveCumuRatingAttributeChanged", "(id)", "getS_DriveCumuRatingAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sDriveCumuRatingDeployment_t*>(nullptr)),
		s_TimeinDifferentSpeedBands_(*this, "onS_TimeinDifferentSpeedBandsAttributeChanged", "(idddddddd)", "getS_TimeinDifferentSpeedBandsAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sTimeinDifferentSpeedBandsDeployment_t*>(nullptr)),
		s_TripDistance_(*this, "onS_TripDistanceAttributeChanged", "(id)", "getS_TripDistanceAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sTripDistanceDeployment_t*>(nullptr)),
		s_TripDuration_(*this, "onS_TripDurationAttributeChanged", "(iu)", "getS_TripDurationAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sTripDurationDeployment_t*>(nullptr)),
		s_AverageSpeed_(*this, "onS_AverageSpeedAttributeChanged", "(id)", "getS_AverageSpeedAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sAverageSpeedDeployment_t*>(nullptr)),
		s_AverageFuelEconomy_(*this, "onS_AverageFuelEconomyAttributeChanged", "(id)", "getS_AverageFuelEconomyAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sAverageFuelEconomyDeployment_t*>(nullptr)),
		overallScoreInstRating_(*this, "onOverallScoreInstRatingAttributeChanged", "d", "getOverallScoreInstRatingAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		s_SeatBeltPerTime_(*this, "onS_SeatBeltPerTimeAttributeChanged", "(iddd)", "getS_SeatBeltPerTimeAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sSeatBeltPerTimeDeployment_t*>(nullptr)),
		s_PerTimeWithoutSeatBelt_(*this, "onS_PerTimeWithoutSeatBeltAttributeChanged", "(iddd)", "getS_PerTimeWithoutSeatBeltAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sPerTimeWithoutSeatBeltDeployment_t*>(nullptr)),
		s_TimeDoorUnlocked_(*this, "onS_TimeDoorUnlockedAttributeChanged", "(iddd)", "getS_TimeDoorUnlockedAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sTimeDoorUnlockedDeployment_t*>(nullptr)),
		s_ClutchBrakingAtHighSpeed_(*this, "onS_ClutchBrakingAtHighSpeedAttributeChanged", "(idd)", "getS_ClutchBrakingAtHighSpeedAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sClutchBrakingAtHighSpeedDeployment_t*>(nullptr)),
		s_SafetyWarning_(*this, "onS_SafetyWarningAttributeChanged", "(idddddddddddd)", "getS_SafetyWarningAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sSafetyWarningDeployment_t*>(nullptr)),
		safetyInstRating_(*this, "onSafetyInstRatingAttributeChanged", "d", "getSafetyInstRatingAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		s_TripResetStatus_(*this, "onS_TripResetStatusAttributeChanged", "(ii)", "getS_TripResetStatusAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sTripResetStatusDeployment_t*>(nullptr)),
		s_DistUnit_(*this, "onS_DistUnitAttributeChanged", "(id)", "getS_DistUnitAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sDistUnitDeployment_t*>(nullptr)),
		s_FuelUnit_(*this, "onS_FuelUnitAttributeChanged", "(id)", "getS_FuelUnitAttribute", static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sFuelUnitDeployment_t*>(nullptr))
,		requestStatusSignal_(*this, "requestStatusSignal", "ii", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		blueScreenDataUpdate_(*this, "blueScreenDataUpdate", "a{i(di)}", std::make_tuple(static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalListValueMapDeployment_t*>(nullptr))),
		rpmEnableStatusUpdate_(*this, "rpmEnableStatusUpdate", "b", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		tripResetStatus_(*this, "tripResetStatus", "(ii)", std::make_tuple(static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::sTripResetStatusDeployment_t*>(nullptr)))
{
}

      drivepropresDBusProxy::LogTypeAttribute& drivepropresDBusProxy::getLogTypeAttribute() {
          return logType_;
      }
      drivepropresDBusProxy::ResetAllOptionEnabledAttribute& drivepropresDBusProxy::getResetAllOptionEnabledAttribute() {
          return resetAllOptionEnabled_;
      }
      drivepropresDBusProxy::S_DpVersionInfoAttribute& drivepropresDBusProxy::getS_DpVersionInfoAttribute() {
          return s_DpVersionInfo_;
      }
      drivepropresDBusProxy::S_EfficiencyInfoAttribute& drivepropresDBusProxy::getS_EfficiencyInfoAttribute() {
          return s_EfficiencyInfo_;
      }
      drivepropresDBusProxy::S_DrivingInfoAttribute& drivepropresDBusProxy::getS_DrivingInfoAttribute() {
          return s_DrivingInfo_;
      }
      drivepropresDBusProxy::S_SafetyInfoAttribute& drivepropresDBusProxy::getS_SafetyInfoAttribute() {
          return s_SafetyInfo_;
      }
      drivepropresDBusProxy::S_UserInfoAttribute& drivepropresDBusProxy::getS_UserInfoAttribute() {
          return s_UserInfo_;
      }
      drivepropresDBusProxy::S_EngineRPmInfoAttribute& drivepropresDBusProxy::getS_EngineRPmInfoAttribute() {
          return s_EngineRPmInfo_;
      }
      drivepropresDBusProxy::S_AcOnOffDrivingTimeInfoAttribute& drivepropresDBusProxy::getS_AcOnOffDrivingTimeInfoAttribute() {
          return s_AcOnOffDrivingTimeInfo_;
      }
      drivepropresDBusProxy::S_ClutchAccPedalUsageInfoAttribute& drivepropresDBusProxy::getS_ClutchAccPedalUsageInfoAttribute() {
          return s_ClutchAccPedalUsageInfo_;
      }
      drivepropresDBusProxy::S_BrakingInstRatingAttribute& drivepropresDBusProxy::getS_BrakingInstRatingAttribute() {
          return s_BrakingInstRating_;
      }
      drivepropresDBusProxy::BrakingCumulativeRatingAttribute& drivepropresDBusProxy::getBrakingCumulativeRatingAttribute() {
          return brakingCumulativeRating_;
      }
      drivepropresDBusProxy::S_BreakingCountPerReqKMAttribute& drivepropresDBusProxy::getS_BreakingCountPerReqKMAttribute() {
          return s_BreakingCountPerReqKM_;
      }
      drivepropresDBusProxy::S_AccInstRatingAttribute& drivepropresDBusProxy::getS_AccInstRatingAttribute() {
          return s_AccInstRating_;
      }
      drivepropresDBusProxy::S_AccCumulativeRatingAttribute& drivepropresDBusProxy::getS_AccCumulativeRatingAttribute() {
          return s_AccCumulativeRating_;
      }
      drivepropresDBusProxy::S_AccPedalPosAnalyticsAttribute& drivepropresDBusProxy::getS_AccPedalPosAnalyticsAttribute() {
          return s_AccPedalPosAnalytics_;
      }
      drivepropresDBusProxy::S_AvgAccPedalPosAttribute& drivepropresDBusProxy::getS_AvgAccPedalPosAttribute() {
          return s_AvgAccPedalPos_;
      }
      drivepropresDBusProxy::S_AccHarshCountAttribute& drivepropresDBusProxy::getS_AccHarshCountAttribute() {
          return s_AccHarshCount_;
      }
      drivepropresDBusProxy::EtxmnVariantAttribute& drivepropresDBusProxy::getEtxmnVariantAttribute() {
          return etxmnVariant_;
      }
      drivepropresDBusProxy::GSInstRatingAttribute& drivepropresDBusProxy::getGSInstRatingAttribute() {
          return gSInstRating_;
      }
      drivepropresDBusProxy::S_GSCumRatingAttribute& drivepropresDBusProxy::getS_GSCumRatingAttribute() {
          return s_GSCumRating_;
      }
      drivepropresDBusProxy::S_DriveKmTimeVsGearNumberRatingAttribute& drivepropresDBusProxy::getS_DriveKmTimeVsGearNumberRatingAttribute() {
          return s_DriveKmTimeVsGearNumberRating_;
      }
      drivepropresDBusProxy::S_DriveKmTimeInIncorrectGearAttribute& drivepropresDBusProxy::getS_DriveKmTimeInIncorrectGearAttribute() {
          return s_DriveKmTimeInIncorrectGear_;
      }
      drivepropresDBusProxy::S_NumberGearShiftsPerRequiredkmsAttribute& drivepropresDBusProxy::getS_NumberGearShiftsPerRequiredkmsAttribute() {
          return s_NumberGearShiftsPerRequiredkms_;
      }
      drivepropresDBusProxy::S_TopSpeedAttribute& drivepropresDBusProxy::getS_TopSpeedAttribute() {
          return s_TopSpeed_;
      }
      drivepropresDBusProxy::DriveInstRatingAttribute& drivepropresDBusProxy::getDriveInstRatingAttribute() {
          return driveInstRating_;
      }
      drivepropresDBusProxy::S_DriveCumuRatingAttribute& drivepropresDBusProxy::getS_DriveCumuRatingAttribute() {
          return s_DriveCumuRating_;
      }
      drivepropresDBusProxy::S_TimeinDifferentSpeedBandsAttribute& drivepropresDBusProxy::getS_TimeinDifferentSpeedBandsAttribute() {
          return s_TimeinDifferentSpeedBands_;
      }
      drivepropresDBusProxy::S_TripDistanceAttribute& drivepropresDBusProxy::getS_TripDistanceAttribute() {
          return s_TripDistance_;
      }
      drivepropresDBusProxy::S_TripDurationAttribute& drivepropresDBusProxy::getS_TripDurationAttribute() {
          return s_TripDuration_;
      }
      drivepropresDBusProxy::S_AverageSpeedAttribute& drivepropresDBusProxy::getS_AverageSpeedAttribute() {
          return s_AverageSpeed_;
      }
      drivepropresDBusProxy::S_AverageFuelEconomyAttribute& drivepropresDBusProxy::getS_AverageFuelEconomyAttribute() {
          return s_AverageFuelEconomy_;
      }
      drivepropresDBusProxy::OverallScoreInstRatingAttribute& drivepropresDBusProxy::getOverallScoreInstRatingAttribute() {
          return overallScoreInstRating_;
      }
      drivepropresDBusProxy::S_SeatBeltPerTimeAttribute& drivepropresDBusProxy::getS_SeatBeltPerTimeAttribute() {
          return s_SeatBeltPerTime_;
      }
      drivepropresDBusProxy::S_PerTimeWithoutSeatBeltAttribute& drivepropresDBusProxy::getS_PerTimeWithoutSeatBeltAttribute() {
          return s_PerTimeWithoutSeatBelt_;
      }
      drivepropresDBusProxy::S_TimeDoorUnlockedAttribute& drivepropresDBusProxy::getS_TimeDoorUnlockedAttribute() {
          return s_TimeDoorUnlocked_;
      }
      drivepropresDBusProxy::S_ClutchBrakingAtHighSpeedAttribute& drivepropresDBusProxy::getS_ClutchBrakingAtHighSpeedAttribute() {
          return s_ClutchBrakingAtHighSpeed_;
      }
      drivepropresDBusProxy::S_SafetyWarningAttribute& drivepropresDBusProxy::getS_SafetyWarningAttribute() {
          return s_SafetyWarning_;
      }
      drivepropresDBusProxy::SafetyInstRatingAttribute& drivepropresDBusProxy::getSafetyInstRatingAttribute() {
          return safetyInstRating_;
      }
      drivepropresDBusProxy::S_TripResetStatusAttribute& drivepropresDBusProxy::getS_TripResetStatusAttribute() {
          return s_TripResetStatus_;
      }
      drivepropresDBusProxy::S_DistUnitAttribute& drivepropresDBusProxy::getS_DistUnitAttribute() {
          return s_DistUnit_;
      }
      drivepropresDBusProxy::S_FuelUnitAttribute& drivepropresDBusProxy::getS_FuelUnitAttribute() {
          return s_FuelUnit_;
      }

drivepropresDBusProxy::RequestStatusSignalEvent& drivepropresDBusProxy::getRequestStatusSignalEvent() {
    return requestStatusSignal_;
}
drivepropresDBusProxy::BlueScreenDataUpdateEvent& drivepropresDBusProxy::getBlueScreenDataUpdateEvent() {
    return blueScreenDataUpdate_;
}
drivepropresDBusProxy::RpmEnableStatusUpdateEvent& drivepropresDBusProxy::getRpmEnableStatusUpdateEvent() {
    return rpmEnableStatusUpdate_;
}
drivepropresDBusProxy::TripResetStatusEvent& drivepropresDBusProxy::getTripResetStatusEvent() {
    return tripResetStatus_;
}
    
    /**
     * description: Method for Engineering Menu service to perform  	factory reset operation of
     *   drive pro data
     */
    void drivepropresDBusProxy::performDPFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "performDPFactoryReset",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_retStatus);
_retStatus = deploy_retStatus.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::performDPFactoryResetAsync(PerformDPFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "performDPFactoryReset",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue());
        },
        std::make_tuple(deploy_retStatus));
    }
    /**
     * description: Method to reset trip specific  data
     */
    void drivepropresDBusProxy::resetTrip(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripTyp, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripType(_tripType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripTyp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "resetTrip",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_tripType,
_internalCallStatus,
deploy_retStatus, deploy_tripTyp);
_retStatus = deploy_retStatus.getValue();
_tripTyp = deploy_tripTyp.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::resetTripAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, ResetTripAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripType(_tripType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripTyp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "resetTrip",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_tripType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> _tripTyp) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _tripTyp.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_tripTyp));
    }
    /**
     * description: Method to update the configuration file from the USB
     */
    void drivepropresDBusProxy::updateConfigFile(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "updateConfigFile",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_retStatus);
_retStatus = deploy_retStatus.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::updateConfigFileAsync(UpdateConfigFileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "updateConfigFile",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue());
        },
        std::make_tuple(deploy_retStatus));
    }
    /**
     * description: Method to update the configuration file from the USB
     */
    void drivepropresDBusProxy::updateDpDynamicLib(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "updateDpDynamicLib",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_retStatus);
_retStatus = deploy_retStatus.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::updateDpDynamicLibAsync(UpdateDpDynamicLibAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "updateDpDynamicLib",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue());
        },
        std::make_tuple(deploy_retStatus));
    }
    /**
     * description: Method to record trip specific logging
     */
    void drivepropresDBusProxy::setTripLogging(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripTyp, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripType(_tripType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripTyp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setTripLogging",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_tripType,
_internalCallStatus,
deploy_retStatus, deploy_tripTyp);
_retStatus = deploy_retStatus.getValue();
_tripTyp = deploy_tripTyp.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::setTripLoggingAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, SetTripLoggingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripType(_tripType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripTyp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setTripLogging",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_tripType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> _tripTyp) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _tripTyp.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_tripTyp));
    }
    /**
     * description: Method to read Drive Pro Log level
     */
    void drivepropresDBusProxy::getTripLogging(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripType(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getTripLogging",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_retStatus, deploy_tripType);
_retStatus = deploy_retStatus.getValue();
_tripType = deploy_tripType.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::getTripLoggingAsync(GetTripLoggingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> deploy_tripType(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getTripLogging",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eTripType, CommonAPI::EmptyDeployment> _tripType) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _tripType.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_tripType));
    }
    /**
     * description: Method to extract the Drive Pro Logs
     */
    void drivepropresDBusProxy::extractDPLogs(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "extractDPLogs",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_retStatus);
_retStatus = deploy_retStatus.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::extractDPLogsAsync(ExtractDPLogsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "extractDPLogs",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue());
        },
        std::make_tuple(deploy_retStatus));
    }
    /**
     * description: Method to set Drive Pro Log level
     */
    void drivepropresDBusProxy::setDpLogLevel(const uint32_t &_logLevel, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, uint32_t &_logLvl, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_logLevel(_logLevel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_logLvl(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setDpLogLevel",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_logLevel,
_internalCallStatus,
deploy_retStatus, deploy_logLvl);
_retStatus = deploy_retStatus.getValue();
_logLvl = deploy_logLvl.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::setDpLogLevelAsync(const uint32_t &_logLevel, SetDpLogLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_logLevel(_logLevel, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_logLvl(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setDpLogLevel",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_logLevel,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _logLvl) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _logLvl.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_logLvl));
    }
    /**
     * description: Method to read Drive Pro Log level
     */
    void drivepropresDBusProxy::getDpLogLevel(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, uint32_t &_logLevel, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_logLevel(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getDpLogLevel",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_retStatus, deploy_logLevel);
_retStatus = deploy_retStatus.getValue();
_logLevel = deploy_logLevel.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::getDpLogLevelAsync(GetDpLogLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_logLevel(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getDpLogLevel",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _logLevel) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _logLevel.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_logLevel));
    }
    /**
     * description: Method to set Drive Pro Logging Type
     */
    void drivepropresDBusProxy::setDpLoggingType(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingTyp, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment> deploy_loggingType(_loggingType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment> deploy_loggingTyp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "setDpLoggingType",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_loggingType,
_internalCallStatus,
deploy_retStatus, deploy_loggingTyp);
_retStatus = deploy_retStatus.getValue();
_loggingTyp = deploy_loggingTyp.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::setDpLoggingTypeAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, SetDpLoggingTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment> deploy_loggingType(_loggingType, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment> deploy_loggingTyp(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "setDpLoggingType",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_loggingType,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment> _loggingTyp) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _loggingTyp.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_loggingTyp));
    }
    /**
     * description: Method to get Drive Pro Logging Type
     */
    void drivepropresDBusProxy::getDpLoggingType(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment> deploy_loggingType(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getDpLoggingType",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_retStatus, deploy_loggingType);
_retStatus = deploy_retStatus.getValue();
_loggingType = deploy_loggingType.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::getDpLoggingTypeAsync(GetDpLoggingTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment> deploy_loggingType(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getDpLoggingType",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType, CommonAPI::EmptyDeployment> _loggingType) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _loggingType.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_loggingType));
    }
    /**
     * description: Method to subscribe signals for HMI Blue Screen
     */
    void drivepropresDBusProxy::subscribeSignals(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_sigList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> deploy_signalList(_signalList, static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> deploy_sigList(static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray,::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "subscribeSignals",
        "ai",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_signalList,
_internalCallStatus,
deploy_retStatus, deploy_sigList);
_retStatus = deploy_retStatus.getValue();
_sigList = deploy_sigList.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::subscribeSignalsAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, SubscribeSignalsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> deploy_signalList(_signalList, static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> deploy_sigList(static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray,::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "subscribeSignals",
        "ai",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_signalList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> _sigList) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _sigList.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_sigList));
    }
    /**
     * description: Method to unsubscribe signals for HMI Blue Screen
     */
    void drivepropresDBusProxy::unSubscribeSignals(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_sigList, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> deploy_signalList(_signalList, static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> deploy_sigList(static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray,::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "unSubscribeSignals",
        "ai",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_signalList,
_internalCallStatus,
deploy_retStatus, deploy_sigList);
_retStatus = deploy_retStatus.getValue();
_sigList = deploy_sigList.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::unSubscribeSignalsAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, UnSubscribeSignalsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> deploy_signalList(_signalList, static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> deploy_sigList(static_cast<::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray,::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "unSubscribeSignals",
        "ai",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_signalList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::signalArray, ::v0::com::harman::drivepro::driveProTypeCollection_::signalArrayDeployment_t> _sigList) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue(), _sigList.getValue());
        },
        std::make_tuple(deploy_retStatus, deploy_sigList));
    }
    void drivepropresDBusProxy::getSignaListValue(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getSignaListValue",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_retStatus);
_retStatus = deploy_retStatus.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::getSignaListValueAsync(GetSignaListValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getSignaListValue",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _retStatus.getValue());
        },
        std::make_tuple(deploy_retStatus));
    }
    void drivepropresDBusProxy::getScalingFactor(CommonAPI::CallStatus &_internalCallStatus, double &_scalingFactor, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_scalingFactor(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getScalingFactor",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_scalingFactor);
_scalingFactor = deploy_scalingFactor.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::getScalingFactorAsync(GetScalingFactorAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> deploy_scalingFactor(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<double,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getScalingFactor",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<double, CommonAPI::EmptyDeployment> _scalingFactor) {
        	if (_callback)
        		_callback(_internalCallStatus, _scalingFactor.getValue());
        },
        std::make_tuple(deploy_scalingFactor));
    }
    /**
     * description: Method to get the Max Rating
     */
    void drivepropresDBusProxy::getMaxRating(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_maxRating, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maxRating(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getMaxRating",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_maxRating, deploy_retStatus);
_maxRating = deploy_maxRating.getValue();
_retStatus = deploy_retStatus.getValue();
}
    std::future<CommonAPI::CallStatus> drivepropresDBusProxy::getMaxRatingAsync(GetMaxRatingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_maxRating(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> deploy_retStatus(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getMaxRating",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> _maxRating, CommonAPI::Deployable<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, CommonAPI::EmptyDeployment> _retStatus) {
        	if (_callback)
        		_callback(_internalCallStatus, _maxRating.getValue(), _retStatus.getValue());
        },
        std::make_tuple(deploy_maxRating, deploy_retStatus));
    }


void drivepropresDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace drivepro
      } // namespace harman
      } // namespace com
      } // namespace v0
