/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_DBUS_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_DBUS_PROXY_HPP_

#include <v0/com/harman/dcif/CDisplayMgrPresCtrlProxyBase.hpp>
#include "v0/com/harman/dcif/CDisplayMgrPresCtrlDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

class CDisplayMgrPresCtrlDBusProxy
    : virtual public CDisplayMgrPresCtrlProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    CDisplayMgrPresCtrlDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~CDisplayMgrPresCtrlDBusProxy() { }

    virtual LvdsConnectionStatusAttribute& getLvdsConnectionStatusAttribute();
    virtual DisplayOnOffStatusAttribute& getDisplayOnOffStatusAttribute();
    virtual DayNightModeStatusAttribute& getDayNightModeStatusAttribute();


    /**
     * description: setDisplayOnOffFeature: To set the display ON-OFF status false - Display off ,
     *   true - Display on
     */
    virtual void setDisplayOnOffFeature(const bool &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setDisplayOnOffFeatureAsync(const bool &_value, SetDisplayOnOffFeatureAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setDisplayBrightnessLevel: To set the display brightness level
     */
    virtual void setDisplayBrightnessLevel(const int16_t &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setDisplayBrightnessLevelAsync(const int16_t &_value, SetDisplayBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: displayOnEvent: To send events for which HMI has to turn on the display
     */
    virtual void displayOnEvent(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> displayOnEventAsync(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, DisplayOnEventAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getDisplayBrightnessLevel: To get the display brightness level
     */
    virtual void getDisplayBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDisplayBrightnessLevelAsync(GetDisplayBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getHardwareVersion: To get the display Hardware Version
     */
    virtual void getHardwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getHardwareVersionAsync(GetHardwareVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getSoftwareVersion: To get the display Software Version
     */
    virtual void getSoftwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getSoftwareVersionAsync(GetSoftwareVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getDisplay16RSparePartNumber: To get the display 16R spare part number
     */
    virtual void getDisplay16RSparePartNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDisplay16RSparePartNumberAsync(GetDisplay16RSparePartNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getDisplay16REcuHwNumber: To get the display 16R ECU number
     */
    virtual void getDisplay16REcuHwNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDisplay16REcuHwNumberAsync(GetDisplay16REcuHwNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: setButtonPanelBrightness: To set the button panel brightness level
     */
    virtual void setButtonPanelBrightness(const int16_t &_status, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> setButtonPanelBrightnessAsync(const int16_t &_status, SetButtonPanelBrightnessAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getButtonPanelBrightnessLevel: To get the button panel brightness level
     */
    virtual void getButtonPanelBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getButtonPanelBrightnessLevelAsync(GetButtonPanelBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: getDisplayTemperature: To get the Display temerature information
     */
    virtual void getDisplayTemperature(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDisplayTemperatureAsync(GetDisplayTemperatureAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<LvdsConnectionStatusAttribute>> lvdsConnectionStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DisplayOnOffStatusAttribute>> displayOnOffStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DayNightModeStatusAttribute>> dayNightModeStatus_;


};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

#endif // V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_DBUS_PROXY_HPP_

