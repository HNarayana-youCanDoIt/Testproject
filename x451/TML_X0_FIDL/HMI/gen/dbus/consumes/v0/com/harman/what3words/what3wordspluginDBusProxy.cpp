/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/what3words/what3wordspluginDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace what3words {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createwhat3wordspluginDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<what3wordspluginDBusProxy>(_address, _connection);
}

INITIALIZER(registerwhat3wordspluginDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		what3wordsplugin::getInterface(),
		&createwhat3wordspluginDBusProxy);
}

what3wordspluginDBusProxy::what3wordspluginDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		countryCode_(*this, "onCountryCodeAttributeChanged", "setCountryCodeAttribute", "s", "getCountryCodeAttribute", static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))
,		mapsLaunchStatus_(*this, "mapsLaunchStatus", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		connNextAppStatus_(*this, "connNextAppStatus", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr))),
		updateAddressList_(*this, "updateAddressList", "i", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      what3wordspluginDBusProxy::CountryCodeAttribute& what3wordspluginDBusProxy::getCountryCodeAttribute() {
          return countryCode_;
      }

what3wordspluginDBusProxy::MapsLaunchStatusEvent& what3wordspluginDBusProxy::getMapsLaunchStatusEvent() {
    return mapsLaunchStatus_;
}
what3wordspluginDBusProxy::ConnNextAppStatusEvent& what3wordspluginDBusProxy::getConnNextAppStatusEvent() {
    return connNextAppStatus_;
}
what3wordspluginDBusProxy::UpdateAddressListEvent& what3wordspluginDBusProxy::getUpdateAddressListEvent() {
    return updateAddressList_;
}
    
    /**
     * description: This method will receive a three word address in W3W format as keyboard input  
     *         status:       SUCCESS if no error, FAILURE on error.
     * param: w3waddress The three word address in W3W format
     */
    void what3wordspluginDBusProxy::navigateToAddress(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_list(_list, static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "navigateToAddress",
        "a(isssss)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_list,
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> what3wordspluginDBusProxy::navigateToAddressAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, NavigateToAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_list(_list, static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "navigateToAddress",
        "a(isssss)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_list,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }
    /**
     * description: This is a getter method to know the status of connectnext app         status:  
     *       SUCCESS if ConnNext link is established, FAILURE if not established
     */
    void what3wordspluginDBusProxy::getconnNextAppStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getconnNextAppStatus",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> what3wordspluginDBusProxy::getconnNextAppStatusAsync(GetconnNextAppStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getconnNextAppStatus",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }
    /**
     * description: This is a getter method to know the country code set by user 		returns:	 
     *   Country code string (eg: For India "IN")         status:       SUCCESS if no
     *   error, FAILURE on error
     */
    void what3wordspluginDBusProxy::getCountryCode(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, std::string &_countryCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_countryCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getCountryCode",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_status, deploy_countryCode);
_status = deploy_status.getValue();
_countryCode = deploy_countryCode.getValue();
}
    std::future<CommonAPI::CallStatus> what3wordspluginDBusProxy::getCountryCodeAsync(GetCountryCodeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_countryCode(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<std::string,CommonAPI::DBus::StringDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getCountryCode",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> _status, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> _countryCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue(), _countryCode.getValue());
        },
        std::make_tuple(deploy_status, deploy_countryCode));
    }
    /**
     * description: This method will give the list of W3W addresses based upon listType input
     *   		args:		  enum value of listType 		returns:	  Vector list for uniqueID, three
     *   word address, language code, nearest place, country code, label         	     
     *       SUCCESS if no error, FAILURE on error
     */
    void what3wordspluginDBusProxy::getW3WAddressList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_list(static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList,::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t>
            >
        	>::callMethodWithReply(
        *this,
        "getW3WAddressList",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type,
_internalCallStatus,
deploy_status, deploy_list);
_status = deploy_status.getValue();
_list = deploy_list.getValue();
}
    std::future<CommonAPI::CallStatus> what3wordspluginDBusProxy::getW3WAddressListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, GetW3WAddressListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_list(static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>,
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList,::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t>
            >
        	>::callMethodAsync(
        *this,
        "getW3WAddressList",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> _status, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> _list) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue(), _list.getValue());
        },
        std::make_tuple(deploy_status, deploy_list));
    }
    /**
     * description: This method will add the provided address in the list based upon listType
     *   		args:	  	  enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    void what3wordspluginDBusProxy::addW3WAddressToList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_addr(_addr, static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "addW3WAddressToList",
        "ia(isssss)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type, deploy_addr,
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> what3wordspluginDBusProxy::addW3WAddressToListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, AddW3WAddressToListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_addr(_addr, static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "addW3WAddressToList",
        "ia(isssss)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type, deploy_addr,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }
    /**
     * description: This method will delete the provided address from the list based upon listType
     *   		args:	      enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    void what3wordspluginDBusProxy::deleteW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_list(_list, static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "deleteW3WAddressfromList",
        "ia(isssss)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type, deploy_list,
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> what3wordspluginDBusProxy::deleteW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, DeleteW3WAddressfromListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_list(_list, static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "deleteW3WAddressfromList",
        "ia(isssss)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type, deploy_list,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }
    /**
     * description: This method will edit the input address from the list based upon listType
     *   		args:	      enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    void what3wordspluginDBusProxy::editW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_list(_list, static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "editW3WAddressfromList",
        "ia(isssss)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_type, deploy_list,
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> what3wordspluginDBusProxy::editW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, EditW3WAddressfromListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment> deploy_type(_type, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t> deploy_list(_list, static_cast<::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t*>(nullptr));
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::listType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList, ::v0::com::harman::what3words::w3wpluginTypeCollection_::arAddListDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "editW3WAddressfromList",
        "ia(isssss)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_type, deploy_list,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }
    /**
     * description: This method will reset all the list to default on factory reset         status:
     *         SUCCESS if no error, FAILURE on error
     */
    void what3wordspluginDBusProxy::performW3WFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "performW3WFactoryReset",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus,
deploy_status);
_status = deploy_status.getValue();
}
    std::future<CommonAPI::CallStatus> what3wordspluginDBusProxy::performW3WFactoryResetAsync(PerformW3WFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> deploy_status(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "performW3WFactoryReset",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus, CommonAPI::EmptyDeployment> _status) {
        	if (_callback)
        		_callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
    }


void what3wordspluginDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace what3words
      } // namespace harman
      } // namespace com
      } // namespace v0
