/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Tuner TMC interface.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2017
 */
#include <v0/com/harman/tuner/TunerTmcDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace tuner {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createTunerTmcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<TunerTmcDBusProxy>(_address, _connection);
}

INITIALIZER(registerTunerTmcDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		TunerTmc::getInterface(),
		&createTunerTmcDBusProxy);
}

TunerTmcDBusProxy::TunerTmcDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		status_(*this, "onStatusAttributeChanged", "a(ii)", "getStatusAttribute", static_cast<::v0::com::harman::tuner::TunerTmcTypes_::StatusDeployment_t*>(nullptr)),
		detailedStatus_(*this, "onDetailedStatusAttributeChanged", "a(ia(yiyi((iuqyqyqyy)sss)))", "getDetailedStatusAttribute", static_cast<::v0::com::harman::tuner::TunerTmcTypes_::DetailedStatusDeployment_t*>(nullptr)),
		services_(*this, "onServicesAttributeChanged", "a((iuqyqyqyy)sss)", "getServicesAttribute", static_cast<::v0::com::harman::tuner::TunerTmcTypes_::ServicesDeployment_t*>(nullptr)),
		filters_(*this, "onFiltersAttributeChanged", "a(yu(iuqyqyqyy))", "getFiltersAttribute", static_cast<::v0::com::harman::tuner::TunerTmcTypes_::FiltersDeployment_t*>(nullptr))
,		data_(*this, "data", "iuqyay", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      TunerTmcDBusProxy::StatusAttribute& TunerTmcDBusProxy::getStatusAttribute() {
          return status_;
      }
      TunerTmcDBusProxy::DetailedStatusAttribute& TunerTmcDBusProxy::getDetailedStatusAttribute() {
          return detailedStatus_;
      }
      TunerTmcDBusProxy::ServicesAttribute& TunerTmcDBusProxy::getServicesAttribute() {
          return services_;
      }
      TunerTmcDBusProxy::FiltersAttribute& TunerTmcDBusProxy::getFiltersAttribute() {
          return filters_;
      }

TunerTmcDBusProxy::DataEvent& TunerTmcDBusProxy::getDataEvent() {
    return data_;
}
    
    /**
     * description: Disable/enable TMC and set update rate (SDARS counter and time)
     */
    void TunerTmcDBusProxy::setUpdateRate(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType &_device, const uint16_t &_maxDropCounter, const uint16_t &_maxDropTime, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::tuner::TunerTmcTypes::DeviceType, CommonAPI::EmptyDeployment> deploy_device(_device, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxDropCounter(_maxDropCounter, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxDropTime(_maxDropTime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::tuner::TunerTmcTypes::DeviceType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setUpdateRate",
        "iqq",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_device, deploy_maxDropCounter, deploy_maxDropTime,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> TunerTmcDBusProxy::setUpdateRateAsync(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType &_device, const uint16_t &_maxDropCounter, const uint16_t &_maxDropTime, SetUpdateRateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::tuner::TunerTmcTypes::DeviceType, CommonAPI::EmptyDeployment> deploy_device(_device, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxDropCounter(_maxDropCounter, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment> deploy_maxDropTime(_maxDropTime, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::tuner::TunerTmcTypes::DeviceType, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint16_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setUpdateRate",
        "iqq",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_device, deploy_maxDropCounter, deploy_maxDropTime,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Set filter for TMC data selection.
     */
    void TunerTmcDBusProxy::setFilter(const ::v0::com::harman::tuner::TunerTmcTypes::Filter &_filter, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::tuner::TunerTmcTypes::Filter, ::v0::com::harman::tuner::TunerTmcTypes_::FilterDeployment_t> deploy_filter(_filter, static_cast<::v0::com::harman::tuner::TunerTmcTypes_::FilterDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::tuner::TunerTmcTypes::Filter, ::v0::com::harman::tuner::TunerTmcTypes_::FilterDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setFilter",
        "(yu(iuqyqyqyy))",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_filter,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> TunerTmcDBusProxy::setFilterAsync(const ::v0::com::harman::tuner::TunerTmcTypes::Filter &_filter, SetFilterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::tuner::TunerTmcTypes::Filter, ::v0::com::harman::tuner::TunerTmcTypes_::FilterDeployment_t> deploy_filter(_filter, static_cast<::v0::com::harman::tuner::TunerTmcTypes_::FilterDeployment_t*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::tuner::TunerTmcTypes::Filter, ::v0::com::harman::tuner::TunerTmcTypes_::FilterDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setFilter",
        "(yu(iuqyqyqyy))",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_filter,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void TunerTmcDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace tuner
      } // namespace harman
      } // namespace com
      } // namespace v0
