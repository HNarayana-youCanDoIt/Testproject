/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/dcif/IcRenderPresDBusProxy.hpp>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createIcRenderPresDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<IcRenderPresDBusProxy>(_address, _connection);
}

INITIALIZER(registerIcRenderPresDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		IcRenderPres::getInterface(),
		&createIcRenderPresDBusProxy);
}

IcRenderPresDBusProxy::IcRenderPresDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
{
}


    
    void IcRenderPresDBusProxy::setIcRenderCast(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, const bool &_icRenderCast_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast, CommonAPI::EmptyDeployment> deploy_icRenderCast_enum(_icRenderCast_enum, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_icRenderCast_value(_icRenderCast_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setIcRenderCast",
        "ib",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_icRenderCast_enum, deploy_icRenderCast_value,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> IcRenderPresDBusProxy::setIcRenderCastAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, const bool &_icRenderCast_value, SetIcRenderCastAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast, CommonAPI::EmptyDeployment> deploy_icRenderCast_enum(_icRenderCast_enum, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_icRenderCast_value(_icRenderCast_value, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setIcRenderCast",
        "ib",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_icRenderCast_enum, deploy_icRenderCast_value,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void IcRenderPresDBusProxy::getIcRenderCast(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, CommonAPI::CallStatus &_internalCallStatus, bool &_icRenderCast_value, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast, CommonAPI::EmptyDeployment> deploy_icRenderCast_enum(_icRenderCast_enum, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_icRenderCast_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "getIcRenderCast",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_icRenderCast_enum,
_internalCallStatus,
deploy_icRenderCast_value);
_icRenderCast_value = deploy_icRenderCast_value.getValue();
}
    std::future<CommonAPI::CallStatus> IcRenderPresDBusProxy::getIcRenderCastAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, GetIcRenderCastAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast, CommonAPI::EmptyDeployment> deploy_icRenderCast_enum(_icRenderCast_enum, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_icRenderCast_value(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "getIcRenderCast",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_icRenderCast_enum,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> _icRenderCast_value) {
        	if (_callback)
        		_callback(_internalCallStatus, _icRenderCast_value.getValue());
        },
        std::make_tuple(deploy_icRenderCast_value));
    }
    void IcRenderPresDBusProxy::setIcColorTheme(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum &_icColorTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum, CommonAPI::EmptyDeployment> deploy_icColorTheme(_icColorTheme, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setIcColorTheme",
        "i",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_icColorTheme,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> IcRenderPresDBusProxy::setIcColorThemeAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum &_icColorTheme, SetIcColorThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum, CommonAPI::EmptyDeployment> deploy_icColorTheme(_icColorTheme, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setIcColorTheme",
        "i",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_icColorTheme,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void IcRenderPresDBusProxy::setIcRenderPhoneCallState(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState &_icCallState_enum, const std::string &_icContactNameNum, const int8_t &_icCallId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState, CommonAPI::EmptyDeployment> deploy_icCallState_enum(_icCallState_enum, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_icContactNameNum(_icContactNameNum, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_icCallId(_icCallId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setIcRenderPhoneCallState",
        "isy",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_icCallState_enum, deploy_icContactNameNum, deploy_icCallId,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> IcRenderPresDBusProxy::setIcRenderPhoneCallStateAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState &_icCallState_enum, const std::string &_icContactNameNum, const int8_t &_icCallId, SetIcRenderPhoneCallStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState, CommonAPI::EmptyDeployment> deploy_icCallState_enum(_icCallState_enum, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_icContactNameNum(_icContactNameNum, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment> deploy_icCallId(_icCallId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<int8_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setIcRenderPhoneCallState",
        "isy",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_icCallState_enum, deploy_icContactNameNum, deploy_icCallId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    void IcRenderPresDBusProxy::setIcRenderSmsRxIndication(const bool &_icSmsIndicationFlag, const std::string &_icContactNameNum, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_icSmsIndicationFlag(_icSmsIndicationFlag, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_icContactNameNum(_icContactNameNum, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "setIcRenderSmsRxIndication",
        "bs",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_icSmsIndicationFlag, deploy_icContactNameNum,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> IcRenderPresDBusProxy::setIcRenderSmsRxIndicationAsync(const bool &_icSmsIndicationFlag, const std::string &_icContactNameNum, SetIcRenderSmsRxIndicationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_icSmsIndicationFlag(_icSmsIndicationFlag, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_icContactNameNum(_icContactNameNum, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "setIcRenderSmsRxIndication",
        "bs",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_icSmsIndicationFlag, deploy_icContactNameNum,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void IcRenderPresDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 0;
          ownVersionMinor = 1;
      }

      } // namespace dcif
      } // namespace harman
      } // namespace com
      } // namespace v0
