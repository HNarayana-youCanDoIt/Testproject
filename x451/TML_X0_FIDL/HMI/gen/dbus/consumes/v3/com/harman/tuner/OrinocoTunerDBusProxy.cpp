/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Orinoco specific tuner interface. This interface is a facade to a bunch of
 *   plattform interfaces in order to provide a simplified access to tuner data and
 *   functionality.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2016
 */
#include <v3/com/harman/tuner/OrinocoTunerDBusProxy.hpp>

namespace v3 {
namespace com {
namespace harman {
namespace tuner {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createOrinocoTunerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<OrinocoTunerDBusProxy>(_address, _connection);
}

INITIALIZER(registerOrinocoTunerDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		OrinocoTuner::getInterface(),
		&createOrinocoTunerDBusProxy);
}

OrinocoTunerDBusProxy::OrinocoTunerDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		stationListSortingMode_(*this, "onStationListSortingModeAttributeChanged", "(iu)", "getStationListSortingModeAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentStationListSortingModeDeployment_t*>(nullptr)),
		audioStationUpdateMode_(*this, "onAudioStationUpdateModeAttributeChanged", "(iu)", "getAudioStationUpdateModeAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::AudioStationUpdateModeDeployment_t*>(nullptr)),
		audioCurrentStation_(*this, "onAudioCurrentStationAttributeChanged", "(b(u(tuui(uu))(ss(ussuss)s)(sa(is)sa((uu)sss))(bbb)(ii)u)a(u(tuui(uu))(ss(ussuss)s)))", "getAudioCurrentStationAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::AudioCurrentStationDeployment_t*>(nullptr)),
		audioStationList_(*this, "onAudioStationListAttributeChanged", "((uia(u(tuui(uu))(ss(ussuss)s))u)a(u(tuui(uu))(ss(ussuss)s)))", "getAudioStationListAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::AudioStationListDeployment_t*>(nullptr)),
		audioPresetList_(*this, "onAudioPresetListAttributeChanged", "(uia(u(tuui(uu))(ss(ussuss)s))u)", "getAudioPresetListAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::StationListDeployment_t*>(nullptr)),
		announcementCurrentStatus_(*this, "onAnnouncementCurrentStatusAttributeChanged", "((iii)(bi(tuui(uu))(ss(ussuss)s))u)", "getAnnouncementCurrentStatusAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::AnnouncementStatusDeployment_t*>(nullptr)),
		amfmControlRegionInfo_(*this, "onAmfmControlRegionInfoAttributeChanged", "(i((uuuu)(uuuu)(uuuu)(uuuu))u)", "getAmfmControlRegionInfoAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::AmFmRegionInfoDeployment_t*>(nullptr)),
		amfmControlAfSwitch_(*this, "onAmfmControlAfSwitchAttributeChanged", "(bu)", "getAmfmControlAfSwitchAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentSwitchStateDeployment_t*>(nullptr)),
		amfmControlRegSwitch_(*this, "onAmfmControlRegSwitchAttributeChanged", "(bu)", "getAmfmControlRegSwitchAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentSwitchStateDeployment_t*>(nullptr)),
		amfmControlHdBallgameMode_(*this, "onAmfmControlHdBallgameModeAttributeChanged", "(iu)", "getAmfmControlHdBallgameModeAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentAmFmHdBallgameModeDeployment_t*>(nullptr)),
		amfmControlHdMode_(*this, "onAmfmControlHdModeAttributeChanged", "(iu)", "getAmfmControlHdModeAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentAmFmHdModeDeployment_t*>(nullptr)),
		dabControlRegionInfo_(*this, "onDabControlRegionInfoAttributeChanged", "(iu)", "getDabControlRegionInfoAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::DabRegionInfoDeployment_t*>(nullptr)),
		dabControlFollowingSwitch_(*this, "onDabControlFollowingSwitchAttributeChanged", "(bu)", "getDabControlFollowingSwitchAttribute", static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentSwitchStateDeployment_t*>(nullptr))
,		stationCurrentStation_(*this, "stationCurrentStation", "(u(tuui(uu))(ss(ussuss)s)(sa(is)sa((uu)sss))(bbb)(ii)u)", std::make_tuple(static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentStationDeployment_t*>(nullptr))),
		stationStationList_(*this, "stationStationList", "(uia(u(tuui(uu))(ss(ussuss)s))u)", std::make_tuple(static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::StationListDeployment_t*>(nullptr))),
		methodProcessed_(*this, "methodProcessed", "iui", std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)))
{
}

      OrinocoTunerDBusProxy::StationListSortingModeAttribute& OrinocoTunerDBusProxy::getStationListSortingModeAttribute() {
          return stationListSortingMode_;
      }
      OrinocoTunerDBusProxy::AudioStationUpdateModeAttribute& OrinocoTunerDBusProxy::getAudioStationUpdateModeAttribute() {
          return audioStationUpdateMode_;
      }
      OrinocoTunerDBusProxy::AudioCurrentStationAttribute& OrinocoTunerDBusProxy::getAudioCurrentStationAttribute() {
          return audioCurrentStation_;
      }
      OrinocoTunerDBusProxy::AudioStationListAttribute& OrinocoTunerDBusProxy::getAudioStationListAttribute() {
          return audioStationList_;
      }
      OrinocoTunerDBusProxy::AudioPresetListAttribute& OrinocoTunerDBusProxy::getAudioPresetListAttribute() {
          return audioPresetList_;
      }
      OrinocoTunerDBusProxy::AnnouncementCurrentStatusAttribute& OrinocoTunerDBusProxy::getAnnouncementCurrentStatusAttribute() {
          return announcementCurrentStatus_;
      }
      OrinocoTunerDBusProxy::AmfmControlRegionInfoAttribute& OrinocoTunerDBusProxy::getAmfmControlRegionInfoAttribute() {
          return amfmControlRegionInfo_;
      }
      OrinocoTunerDBusProxy::AmfmControlAfSwitchAttribute& OrinocoTunerDBusProxy::getAmfmControlAfSwitchAttribute() {
          return amfmControlAfSwitch_;
      }
      OrinocoTunerDBusProxy::AmfmControlRegSwitchAttribute& OrinocoTunerDBusProxy::getAmfmControlRegSwitchAttribute() {
          return amfmControlRegSwitch_;
      }
      OrinocoTunerDBusProxy::AmfmControlHdBallgameModeAttribute& OrinocoTunerDBusProxy::getAmfmControlHdBallgameModeAttribute() {
          return amfmControlHdBallgameMode_;
      }
      OrinocoTunerDBusProxy::AmfmControlHdModeAttribute& OrinocoTunerDBusProxy::getAmfmControlHdModeAttribute() {
          return amfmControlHdMode_;
      }
      OrinocoTunerDBusProxy::DabControlRegionInfoAttribute& OrinocoTunerDBusProxy::getDabControlRegionInfoAttribute() {
          return dabControlRegionInfo_;
      }
      OrinocoTunerDBusProxy::DabControlFollowingSwitchAttribute& OrinocoTunerDBusProxy::getDabControlFollowingSwitchAttribute() {
          return dabControlFollowingSwitch_;
      }

OrinocoTunerDBusProxy::StationCurrentStationEvent& OrinocoTunerDBusProxy::getStationCurrentStationEvent() {
    return stationCurrentStation_;
}
OrinocoTunerDBusProxy::StationStationListEvent& OrinocoTunerDBusProxy::getStationStationListEvent() {
    return stationStationList_;
}
OrinocoTunerDBusProxy::MethodProcessedEvent& OrinocoTunerDBusProxy::getMethodProcessedEvent() {
    return methodProcessed_;
}
    
    /**
     * description: Any manipulation of the current station: Selection by list / direct frequency
     *   tuning / preset selection / starting a search run. As result the information
     *   "stationCurrentStation" is updated with the given handle.
     */
    void OrinocoTunerDBusProxy::stationSelectStation(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector &_stationSelector, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t> deploy_stationSelector(_stationSelector, static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "stationSelectStation",
        "(tuui(uu))u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_stationSelector, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::stationSelectStationAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector &_stationSelector, const uint32_t &_handle, StationSelectStationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t> deploy_stationSelector(_stationSelector, static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "stationSelectStation",
        "(tuui(uu))u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_stationSelector, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Store the given station in corresponding preset list (depends on project
     *   configuration wether there is ony list per source or one common list) and
     *   assign the given preset number for later recalls (via "stationStartTune").   
     *   As result the corresponding information "stationStationList" is updated with
     *   the given handle.
     */
    void OrinocoTunerDBusProxy::stationStorePreset(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector &_stationSelector, const uint32_t &_preset, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t> deploy_stationSelector(_stationSelector, static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_preset(_preset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "stationStorePreset",
        "(tuui(uu))uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_stationSelector, deploy_preset, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::stationStorePresetAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector &_stationSelector, const uint32_t &_preset, const uint32_t &_handle, StationStorePresetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t> deploy_stationSelector(_stationSelector, static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_preset(_preset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationSelectorDeployment_t >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "stationStorePreset",
        "(tuui(uu))uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_stationSelector, deploy_preset, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Remove given preset number from corresponding preset list.     As result the
     *   corresponding information "stationStationList" is updated with the given handle
     */
    void OrinocoTunerDBusProxy::stationDeletePreset(const uint32_t &_preset, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_preset(_preset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "stationDeletePreset",
        "uu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_preset, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::stationDeletePresetAsync(const uint32_t &_preset, const uint32_t &_handle, StationDeletePresetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_preset(_preset, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "stationDeletePreset",
        "uu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_preset, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Customize the content and updates of current station and station list
     */
    void OrinocoTunerDBusProxy::audioSetStationUpdateMode(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationUpdateMode &_updateMode, const bool &_enable, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationUpdateMode, CommonAPI::EmptyDeployment> deploy_updateMode(_updateMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationUpdateMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "audioSetStationUpdateMode",
        "ibu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_updateMode, deploy_enable, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::audioSetStationUpdateModeAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationUpdateMode &_updateMode, const bool &_enable, const uint32_t &_handle, AudioSetStationUpdateModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationUpdateMode, CommonAPI::EmptyDeployment> deploy_updateMode(_updateMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationUpdateMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "audioSetStationUpdateMode",
        "ibu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_updateMode, deploy_enable, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Enable/disable the announcement monitoring for FM and DAB.    As result the
     *   attribute "announcementCurrentStatus" is updated with the given handle
     */
    void OrinocoTunerDBusProxy::announcementSetConfiguration(const ::v3::com::harman::tuner::OrinocoTunerTypes::AnnouncementConfiguration &_configuration, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AnnouncementConfiguration, ::v3::com::harman::tuner::OrinocoTunerTypes_::AnnouncementConfigurationDeployment_t> deploy_configuration(_configuration, static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::AnnouncementConfigurationDeployment_t*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AnnouncementConfiguration, ::v3::com::harman::tuner::OrinocoTunerTypes_::AnnouncementConfigurationDeployment_t >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "announcementSetConfiguration",
        "(iii)u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_configuration, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::announcementSetConfigurationAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::AnnouncementConfiguration &_configuration, const uint32_t &_handle, AnnouncementSetConfigurationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AnnouncementConfiguration, ::v3::com::harman::tuner::OrinocoTunerTypes_::AnnouncementConfigurationDeployment_t> deploy_configuration(_configuration, static_cast<::v3::com::harman::tuner::OrinocoTunerTypes_::AnnouncementConfigurationDeployment_t*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AnnouncementConfiguration, ::v3::com::harman::tuner::OrinocoTunerTypes_::AnnouncementConfigurationDeployment_t >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "announcementSetConfiguration",
        "(iii)u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_configuration, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Abort an active announcement. As a result the attribute
     *   "announcementCurrentStatus" is updated with the given handle.
     */
    void OrinocoTunerDBusProxy::announcementAbort(const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "announcementAbort",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::announcementAbortAsync(const uint32_t &_handle, AnnouncementAbortAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "announcementAbort",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: [AM/FM only] Set the desired RDS alternative frequency (AF) state. As result
     *   the attribute "amfmControlAfSwitch" is updated.
     */
    void OrinocoTunerDBusProxy::amfmControlSetAfSwitch(const bool &_enable, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "amfmControlSetAfSwitch",
        "bu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_enable, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::amfmControlSetAfSwitchAsync(const bool &_enable, const uint32_t &_handle, AmfmControlSetAfSwitchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "amfmControlSetAfSwitch",
        "bu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_enable, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: [AM/FM only] Set the desired RDS regionalisation (REG) state. As result the
     *   attribute "amfmControlRegSwitch" is updated.
     */
    void OrinocoTunerDBusProxy::amfmControlSetRegSwitch(const bool &_enable, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "amfmControlSetRegSwitch",
        "bu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_enable, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::amfmControlSetRegSwitchAsync(const bool &_enable, const uint32_t &_handle, AmfmControlSetRegSwitchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "amfmControlSetRegSwitch",
        "bu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_enable, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: [AM/FM only] Set the desired HD mode. As result the attribute
     *   "amfmControlHdMode" is updated.
     */
    void OrinocoTunerDBusProxy::amfmControlSetHdMode(const ::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdMode &_hdMode, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdMode, CommonAPI::EmptyDeployment> deploy_hdMode(_hdMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "amfmControlSetHdMode",
        "iu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_hdMode, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::amfmControlSetHdModeAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdMode &_hdMode, const uint32_t &_handle, AmfmControlSetHdModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdMode, CommonAPI::EmptyDeployment> deploy_hdMode(_hdMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "amfmControlSetHdMode",
        "iu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_hdMode, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: [AM/FM only] Set the desired HD ballgame mode. As result the attribute
     *   "amfmControlHdBallgameMode" is updated.
     */
    void OrinocoTunerDBusProxy::amfmControlSetHdBallgameMode(const ::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdBallgameMode &_hdBallgameMode, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdBallgameMode, CommonAPI::EmptyDeployment> deploy_hdBallgameMode(_hdBallgameMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdBallgameMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "amfmControlSetHdBallgameMode",
        "iu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_hdBallgameMode, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::amfmControlSetHdBallgameModeAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdBallgameMode &_hdBallgameMode, const uint32_t &_handle, AmfmControlSetHdBallgameModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdBallgameMode, CommonAPI::EmptyDeployment> deploy_hdBallgameMode(_hdBallgameMode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdBallgameMode, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "amfmControlSetHdBallgameMode",
        "iu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_hdBallgameMode, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Set the desired service following at the FollowingMaster. As result the
     *   attribute "dabControlFollowingSwitch" is updated with the given handle.   
     *   Note: This switch only affects DAB/FM linking, DAB/DAB is always on
     */
    void OrinocoTunerDBusProxy::dabControlSetFollowingSwitch(const bool &_enable, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "dabControlSetFollowingSwitch",
        "bu",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_enable, deploy_handle,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::dabControlSetFollowingSwitchAsync(const bool &_enable, const uint32_t &_handle, DabControlSetFollowingSwitchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_enable(_enable, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_handle(_handle, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "dabControlSetFollowingSwitch",
        "bu",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_enable, deploy_handle,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Request initial broadcast update at startup (stationCurrentStation,
     *   stationStationList) in order to force an "on change" update.
     */
    void OrinocoTunerDBusProxy::forceBroadcastUpdate(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "forceBroadcastUpdate",
        "",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> OrinocoTunerDBusProxy::forceBroadcastUpdateAsync(ForceBroadcastUpdateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "forceBroadcastUpdate",
        "",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void OrinocoTunerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 3;
          ownVersionMinor = 0;
      }

      } // namespace tuner
      } // namespace harman
      } // namespace com
      } // namespace v3
