/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v3/com/harman/btpresplugin/BtManagerExtDBusProxy.hpp>

namespace v3 {
namespace com {
namespace harman {
namespace btpresplugin {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createBtManagerExtDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<BtManagerExtDBusProxy>(_address, _connection);
}

INITIALIZER(registerBtManagerExtDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		BtManagerExt::getInterface(),
		&createBtManagerExtDBusProxy);
}

BtManagerExtDBusProxy::BtManagerExtDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		loopbackState_(*this, "onLoopbackStateAttributeChanged", "b", "getLoopbackStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
		ttsPlayState_(*this, "onTtsPlayStateAttributeChanged", "i", "getTtsPlayStateAttribute", static_cast<CommonAPI::EmptyDeployment*>(nullptr))
,		notifyCancelTTSPlay_(*this, "notifyCancelTTSPlay", "s", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr))),
		ecoFileStatusSelective_(*this, "ecoFileStatus", "ss", std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)))
{
}

      BtManagerExtDBusProxy::LoopbackStateAttribute& BtManagerExtDBusProxy::getLoopbackStateAttribute() {
          return loopbackState_;
      }
      BtManagerExtDBusProxy::TtsPlayStateAttribute& BtManagerExtDBusProxy::getTtsPlayStateAttribute() {
          return ttsPlayState_;
      }

BtManagerExtDBusProxy::NotifyCancelTTSPlayEvent& BtManagerExtDBusProxy::getNotifyCancelTTSPlayEvent() {
    return notifyCancelTTSPlay_;
}
BtManagerExtDBusProxy::EcoFileStatusSelectiveEvent& BtManagerExtDBusProxy::getEcoFileStatusSelectiveEvent() {
    return ecoFileStatusSelective_;
}
    
    /**
     * description: The method is used to enable HFP audio loop back testing.
     */
    void BtManagerExtDBusProxy::hfpLoopBackTest(const bool &_loopback_mode, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_loopback_mode(_loopback_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "hfpLoopBackTest",
        "b",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_loopback_mode,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtManagerExtDBusProxy::hfpLoopBackTestAsync(const bool &_loopback_mode, HfpLoopBackTestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment> deploy_loopback_mode(_loopback_mode, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<bool, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "hfpLoopBackTest",
        "b",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_loopback_mode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: The method is used to enable HFP audio loop back testing.
     */
    void BtManagerExtDBusProxy::autoPairing(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "autoPairing",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_inAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtManagerExtDBusProxy::autoPairingAsync(const std::string &_inAddress, AutoPairingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_inAddress(_inAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "autoPairing",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_inAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used for start tts playback
     * param: promptId (UInt32)        : prompt ID of playback
     * param: ttsText (String)         : text to be played on TTS prompt     returns:
     *   errorCode (eErrorType) : error code
     */
    void BtManagerExtDBusProxy::startTTSplay(const uint32_t &_promptId, const std::string &_ttsText, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_promptId(_promptId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ttsText(_ttsText, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "startTTSplay",
        "us",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_promptId, deploy_ttsText,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtManagerExtDBusProxy::startTTSplayAsync(const uint32_t &_promptId, const std::string &_ttsText, StartTTSplayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_promptId(_promptId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_ttsText(_ttsText, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "startTTSplay",
        "us",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_promptId, deploy_ttsText,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: Used to stop TTS playback
     * param: promptId (UInt32)        : prompt ID     returns: errorCode (eErrorType) :
     *   error code
     */
    void BtManagerExtDBusProxy::stopTTSplay(const uint32_t &_promptId, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_promptId(_promptId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "stopTTSplay",
        "u",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_promptId,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtManagerExtDBusProxy::stopTTSplayAsync(const uint32_t &_promptId, StopTTSplayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment> deploy_promptId(_promptId, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "stopTTSplay",
        "u",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_promptId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }
    /**
     * description: This method is used to generateEcoFile for synced contacts.
     * param: btAddress : BT Address of device whose eco file needs to be created.         
     *   returns: errorCode (eErrorType) : error code
     */
    void BtManagerExtDBusProxy::generateEcoFile(const std::string &_btAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_btAddress(_btAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodWithReply(
        *this,
        "generateEcoFile",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_btAddress,
_internalCallStatus,
deploy_errorCode);
_errorCode = deploy_errorCode.getValue();
}
    std::future<CommonAPI::CallStatus> BtManagerExtDBusProxy::generateEcoFileAsync(const std::string &_btAddress, GenerateEcoFileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_btAddress(_btAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> deploy_errorCode(static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType,CommonAPI::EmptyDeployment>
            >
        	>::callMethodAsync(
        *this,
        "generateEcoFile",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_btAddress,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable<::v7::com::harman::btpres::BTPresTypes::eErrorType, CommonAPI::EmptyDeployment> _errorCode) {
        	if (_callback)
        		_callback(_internalCallStatus, _errorCode.getValue());
        },
        std::make_tuple(deploy_errorCode));
    }


void BtManagerExtDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 3;
          ownVersionMinor = 2;
      }

      } // namespace btpresplugin
      } // namespace harman
      } // namespace com
      } // namespace v3
