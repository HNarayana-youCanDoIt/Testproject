/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_DBUS_PROXY_HPP_
#define V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_DBUS_PROXY_HPP_

#include <v3/com/harman/btpresplugin/BtManagerExtProxyBase.hpp>
#include "v3/com/harman/btpresplugin/BtManagerExtDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>
#include <CommonAPI/Types.hpp>
#include <CommonAPI/DBus/DBusSelectiveEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v3 {
namespace com {
namespace harman {
namespace btpresplugin {

class BtManagerExtDBusProxy
    : virtual public BtManagerExtProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    BtManagerExtDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~BtManagerExtDBusProxy() { }

    virtual LoopbackStateAttribute& getLoopbackStateAttribute();
    virtual TtsPlayStateAttribute& getTtsPlayStateAttribute();

    virtual NotifyCancelTTSPlayEvent& getNotifyCancelTTSPlayEvent();
    virtual EcoFileStatusSelectiveEvent& getEcoFileStatusSelectiveEvent();

    /**
     * description: The method is used to enable HFP audio loop back testing.
     */
    virtual void hfpLoopBackTest(const bool &_loopback_mode, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> hfpLoopBackTestAsync(const bool &_loopback_mode, HfpLoopBackTestAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: The method is used to enable HFP audio loop back testing.
     */
    virtual void autoPairing(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> autoPairingAsync(const std::string &_inAddress, AutoPairingAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Used for start tts playback
     * param: promptId (UInt32)        : prompt ID of playback
     * param: ttsText (String)         : text to be played on TTS prompt     returns:
     *   errorCode (eErrorType) : error code
     */
    virtual void startTTSplay(const uint32_t &_promptId, const std::string &_ttsText, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> startTTSplayAsync(const uint32_t &_promptId, const std::string &_ttsText, StartTTSplayAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Used to stop TTS playback
     * param: promptId (UInt32)        : prompt ID     returns: errorCode (eErrorType) :
     *   error code
     */
    virtual void stopTTSplay(const uint32_t &_promptId, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stopTTSplayAsync(const uint32_t &_promptId, StopTTSplayAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: This method is used to generateEcoFile for synced contacts.
     * param: btAddress : BT Address of device whose eco file needs to be created.         
     *   returns: errorCode (eErrorType) : error code
     */
    virtual void generateEcoFile(const std::string &_btAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> generateEcoFileAsync(const std::string &_btAddress, GenerateEcoFileAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<LoopbackStateAttribute>> loopbackState_;
    class DBusttsPlayState_Attribute : public CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TtsPlayStateAttribute>> {
    public:
    template <typename... _A>
    	DBusttsPlayState_Attribute(DBusProxy &_proxy,
    		_A ... arguments)
    		: CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<TtsPlayStateAttribute>>(
    			_proxy, arguments...) {}
    };
    DBusttsPlayState_Attribute ttsPlayState_;

    CommonAPI::DBus::DBusEvent<NotifyCancelTTSPlayEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> notifyCancelTTSPlay_;
    CommonAPI::DBus::DBusSelectiveEvent<EcoFileStatusSelectiveEvent, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>, CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment>> ecoFileStatusSelective_;

};

} // namespace btpresplugin
} // namespace harman
} // namespace com
} // namespace v3

#endif // V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_DBUS_PROXY_HPP_

