/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V3_COM_HARMAN_PRES_cpprescontrols_DBUS_PROXY_HPP_
#define V3_COM_HARMAN_PRES_cpprescontrols_DBUS_PROXY_HPP_

#include <v3/com/harman/pres/cpprescontrolsProxyBase.hpp>
#include "v3/com/harman/pres/cpprescontrolsDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v3 {
namespace com {
namespace harman {
namespace pres {

class cpprescontrolsDBusProxy
    : virtual public cpprescontrolsProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    cpprescontrolsDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~cpprescontrolsDBusProxy() { }

    virtual SessionAttribute& getSessionAttribute();
    virtual DeviceInfoAttribute& getDeviceInfoAttribute();


    /**
     * description: This request method allows client to request for the Projection screen        
     *   	show : true - show 		false - hide , If false client can disregard layer and
     *   appUrl 	appUrl : URL identifier of the desired CarPlay UI application to
     *   launch: 	  Blank String: CarPlay native screen will be shown 	  "maps:" -
     *   Carplay Maps application will be shown  	  "mobilephone:" - CarPlay Phone
     *   application will be shown 	  "music:" - CarPlay Music application will be
     *   shown 	  "nowplaying:" - CarPlay Now Playing screen will be shown 	 
     *   "tel:xxx-xxx-xxxx" - CarPlay Phone application will be shown and a phone call
     *   with desired 	  	number will be placed. 	Note: Show is just a request to the
     *   phone , if there is an issue with audio / video render 	from phone , the
     *   session would reflect the error
     */
    virtual void requestProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method to request for the Native screen. 	switchReason : reason for switching
     *   out of the carplay screen , refer enum values
     */
    virtual void requestNative(const ::v2::com::harman::pres::cpprestypes::eScreenSwitchReason &_switchReason, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method to request connection to a wireless carplay device
     */
    virtual void connect(const ::v2::com::harman::pres::cpprestypes::WifiInfo &_tranportInfo, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method allows client to request for disconnection of current 	active device
     */
    virtual void disconnect(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method allows client to request for the deletion of the     device from the
     *   wireless carplay device list
     */
    virtual void deleteDevice(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This request method allows client to request for cancelling 	the ongoing
     *   connect process.
     */
    virtual void cancelConnect(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This request method allows client to request for adding new device in HU.
     */
    virtual void addNewDevice(const std::string &_devName, const std::string &_devAddress, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This request method allows client to request for  connected device list.
     */
    virtual void getDeviceList(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getDeviceListAsync(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, GetDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<SessionAttribute, ::v1::com::harman::pres::pprestypes_::sSessionDetailsDeployment_t>> session_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DeviceInfoAttribute, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t>>> deviceInfo_;


};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v3

#endif // V3_COM_HARMAN_PRES_cpprescontrols_DBUS_PROXY_HPP_

