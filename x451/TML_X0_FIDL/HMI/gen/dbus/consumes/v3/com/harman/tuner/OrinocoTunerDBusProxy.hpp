/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Orinoco specific tuner interface. This interface is a facade to a bunch of
 *   plattform interfaces in order to provide a simplified access to tuner data and
 *   functionality.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2016
 */
#ifndef V3_COM_HARMAN_TUNER_Orinoco_Tuner_DBUS_PROXY_HPP_
#define V3_COM_HARMAN_TUNER_Orinoco_Tuner_DBUS_PROXY_HPP_

#include <v3/com/harman/tuner/OrinocoTunerProxyBase.hpp>
#include "v3/com/harman/tuner/OrinocoTunerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusAttribute.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v3 {
namespace com {
namespace harman {
namespace tuner {

class OrinocoTunerDBusProxy
    : virtual public OrinocoTunerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    OrinocoTunerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~OrinocoTunerDBusProxy() { }

    virtual StationListSortingModeAttribute& getStationListSortingModeAttribute();
    virtual AudioStationUpdateModeAttribute& getAudioStationUpdateModeAttribute();
    virtual AudioCurrentStationAttribute& getAudioCurrentStationAttribute();
    virtual AudioStationListAttribute& getAudioStationListAttribute();
    virtual AudioPresetListAttribute& getAudioPresetListAttribute();
    virtual AnnouncementCurrentStatusAttribute& getAnnouncementCurrentStatusAttribute();
    virtual AmfmControlRegionInfoAttribute& getAmfmControlRegionInfoAttribute();
    virtual AmfmControlAfSwitchAttribute& getAmfmControlAfSwitchAttribute();
    virtual AmfmControlRegSwitchAttribute& getAmfmControlRegSwitchAttribute();
    virtual AmfmControlHdBallgameModeAttribute& getAmfmControlHdBallgameModeAttribute();
    virtual AmfmControlHdModeAttribute& getAmfmControlHdModeAttribute();
    virtual DabControlRegionInfoAttribute& getDabControlRegionInfoAttribute();
    virtual DabControlFollowingSwitchAttribute& getDabControlFollowingSwitchAttribute();

    virtual StationCurrentStationEvent& getStationCurrentStationEvent();
    virtual StationStationListEvent& getStationStationListEvent();
    virtual MethodProcessedEvent& getMethodProcessedEvent();

    /**
     * description: Any manipulation of the current station: Selection by list / direct frequency
     *   tuning / preset selection / starting a search run. As result the information
     *   "stationCurrentStation" is updated with the given handle.
     */
    virtual void stationSelectStation(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector &_stationSelector, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stationSelectStationAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector &_stationSelector, const uint32_t &_handle, StationSelectStationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Store the given station in corresponding preset list (depends on project
     *   configuration wether there is ony list per source or one common list) and
     *   assign the given preset number for later recalls (via "stationStartTune").   
     *   As result the corresponding information "stationStationList" is updated with
     *   the given handle.
     */
    virtual void stationStorePreset(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector &_stationSelector, const uint32_t &_preset, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stationStorePresetAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationSelector &_stationSelector, const uint32_t &_preset, const uint32_t &_handle, StationStorePresetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Remove given preset number from corresponding preset list.     As result the
     *   corresponding information "stationStationList" is updated with the given handle
     */
    virtual void stationDeletePreset(const uint32_t &_preset, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> stationDeletePresetAsync(const uint32_t &_preset, const uint32_t &_handle, StationDeletePresetAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Customize the content and updates of current station and station list
     */
    virtual void audioSetStationUpdateMode(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationUpdateMode &_updateMode, const bool &_enable, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> audioSetStationUpdateModeAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::StationUpdateMode &_updateMode, const bool &_enable, const uint32_t &_handle, AudioSetStationUpdateModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Enable/disable the announcement monitoring for FM and DAB.    As result the
     *   attribute "announcementCurrentStatus" is updated with the given handle
     */
    virtual void announcementSetConfiguration(const ::v3::com::harman::tuner::OrinocoTunerTypes::AnnouncementConfiguration &_configuration, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> announcementSetConfigurationAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::AnnouncementConfiguration &_configuration, const uint32_t &_handle, AnnouncementSetConfigurationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Abort an active announcement. As a result the attribute
     *   "announcementCurrentStatus" is updated with the given handle.
     */
    virtual void announcementAbort(const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> announcementAbortAsync(const uint32_t &_handle, AnnouncementAbortAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: [AM/FM only] Set the desired RDS alternative frequency (AF) state. As result
     *   the attribute "amfmControlAfSwitch" is updated.
     */
    virtual void amfmControlSetAfSwitch(const bool &_enable, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> amfmControlSetAfSwitchAsync(const bool &_enable, const uint32_t &_handle, AmfmControlSetAfSwitchAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: [AM/FM only] Set the desired RDS regionalisation (REG) state. As result the
     *   attribute "amfmControlRegSwitch" is updated.
     */
    virtual void amfmControlSetRegSwitch(const bool &_enable, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> amfmControlSetRegSwitchAsync(const bool &_enable, const uint32_t &_handle, AmfmControlSetRegSwitchAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: [AM/FM only] Set the desired HD mode. As result the attribute
     *   "amfmControlHdMode" is updated.
     */
    virtual void amfmControlSetHdMode(const ::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdMode &_hdMode, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> amfmControlSetHdModeAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdMode &_hdMode, const uint32_t &_handle, AmfmControlSetHdModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: [AM/FM only] Set the desired HD ballgame mode. As result the attribute
     *   "amfmControlHdBallgameMode" is updated.
     */
    virtual void amfmControlSetHdBallgameMode(const ::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdBallgameMode &_hdBallgameMode, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> amfmControlSetHdBallgameModeAsync(const ::v3::com::harman::tuner::OrinocoTunerTypes::AmFmHdBallgameMode &_hdBallgameMode, const uint32_t &_handle, AmfmControlSetHdBallgameModeAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Set the desired service following at the FollowingMaster. As result the
     *   attribute "dabControlFollowingSwitch" is updated with the given handle.   
     *   Note: This switch only affects DAB/FM linking, DAB/DAB is always on
     */
    virtual void dabControlSetFollowingSwitch(const bool &_enable, const uint32_t &_handle, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> dabControlSetFollowingSwitchAsync(const bool &_enable, const uint32_t &_handle, DabControlSetFollowingSwitchAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Request initial broadcast update at startup (stationCurrentStation,
     *   stationStationList) in order to force an "on change" update.
     */
    virtual void forceBroadcastUpdate(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> forceBroadcastUpdateAsync(ForceBroadcastUpdateAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<StationListSortingModeAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentStationListSortingModeDeployment_t>> stationListSortingMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AudioStationUpdateModeAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::AudioStationUpdateModeDeployment_t>> audioStationUpdateMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AudioCurrentStationAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::AudioCurrentStationDeployment_t>> audioCurrentStation_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AudioStationListAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::AudioStationListDeployment_t>> audioStationList_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AudioPresetListAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationListDeployment_t>> audioPresetList_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AnnouncementCurrentStatusAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::AnnouncementStatusDeployment_t>> announcementCurrentStatus_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AmfmControlRegionInfoAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::AmFmRegionInfoDeployment_t>> amfmControlRegionInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AmfmControlAfSwitchAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentSwitchStateDeployment_t>> amfmControlAfSwitch_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AmfmControlRegSwitchAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentSwitchStateDeployment_t>> amfmControlRegSwitch_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AmfmControlHdBallgameModeAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentAmFmHdBallgameModeDeployment_t>> amfmControlHdBallgameMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<AmfmControlHdModeAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentAmFmHdModeDeployment_t>> amfmControlHdMode_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DabControlRegionInfoAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::DabRegionInfoDeployment_t>> dabControlRegionInfo_;
    CommonAPI::DBus::DBusObservableAttribute<CommonAPI::DBus::DBusReadonlyAttribute<DabControlFollowingSwitchAttribute, ::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentSwitchStateDeployment_t>> dabControlFollowingSwitch_;

    CommonAPI::DBus::DBusEvent<StationCurrentStationEvent, CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::CurrentStation, ::v3::com::harman::tuner::OrinocoTunerTypes_::CurrentStationDeployment_t>> stationCurrentStation_;
    CommonAPI::DBus::DBusEvent<StationStationListEvent, CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::StationList, ::v3::com::harman::tuner::OrinocoTunerTypes_::StationListDeployment_t>> stationStationList_;
    CommonAPI::DBus::DBusEvent<MethodProcessedEvent, CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::ProcessedMethod, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<uint32_t, CommonAPI::EmptyDeployment>, CommonAPI::Deployable<::v3::com::harman::tuner::OrinocoTunerTypes::Result, CommonAPI::EmptyDeployment>> methodProcessed_;

};

} // namespace tuner
} // namespace harman
} // namespace com
} // namespace v3

#endif // V3_COM_HARMAN_TUNER_Orinoco_Tuner_DBUS_PROXY_HPP_

