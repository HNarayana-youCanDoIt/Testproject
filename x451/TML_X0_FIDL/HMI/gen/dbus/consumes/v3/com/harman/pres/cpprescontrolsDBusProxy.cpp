/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v3/com/harman/pres/cpprescontrolsDBusProxy.hpp>

namespace v3 {
namespace com {
namespace harman {
namespace pres {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createcpprescontrolsDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<cpprescontrolsDBusProxy>(_address, _connection);
}

INITIALIZER(registercpprescontrolsDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		cpprescontrols::getInterface(),
		&createcpprescontrolsDBusProxy);
}

cpprescontrolsDBusProxy::cpprescontrolsDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		session_(*this, "onSessionAttributeChanged", "(sssbiib)", "getSessionAttribute", static_cast<::v1::com::harman::pres::pprestypes_::sSessionDetailsDeployment_t*>(nullptr)),
		deviceInfo_(*this, "onDeviceInfoAttributeChanged", "a(sssbi)", "getDeviceInfoAttribute", static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t>*>(nullptr))
{
}

      cpprescontrolsDBusProxy::SessionAttribute& cpprescontrolsDBusProxy::getSessionAttribute() {
          return session_;
      }
      cpprescontrolsDBusProxy::DeviceInfoAttribute& cpprescontrolsDBusProxy::getDeviceInfoAttribute() {
          return deviceInfo_;
      }

    
    /**
     * description: This request method allows client to request for the Projection screen        
     *   	show : true - show 		false - hide , If false client can disregard layer and
     *   appUrl 	appUrl : URL identifier of the desired CarPlay UI application to
     *   launch: 	  Blank String: CarPlay native screen will be shown 	  "maps:" -
     *   Carplay Maps application will be shown  	  "mobilephone:" - CarPlay Phone
     *   application will be shown 	  "music:" - CarPlay Music application will be
     *   shown 	  "nowplaying:" - CarPlay Now Playing screen will be shown 	 
     *   "tel:xxx-xxx-xxxx" - CarPlay Phone application will be shown and a phone call
     *   with desired 	  	number will be placed. 	Note: Show is just a request to the
     *   phone , if there is an issue with audio / video render 	from phone , the
     *   session would reflect the error
     */
    void cpprescontrolsDBusProxy::requestProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_appUrl(_appUrl, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "requestProjection",
        "s",
deploy_appUrl,
_internalCallStatus);
}
    /**
     * description: Method to request for the Native screen. 	switchReason : reason for switching
     *   out of the carplay screen , refer enum values
     */
    void cpprescontrolsDBusProxy::requestNative(const ::v2::com::harman::pres::cpprestypes::eScreenSwitchReason &_switchReason, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<::v2::com::harman::pres::cpprestypes::eScreenSwitchReason, CommonAPI::EmptyDeployment> deploy_switchReason(_switchReason, static_cast<CommonAPI::EmptyDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::com::harman::pres::cpprestypes::eScreenSwitchReason, CommonAPI::EmptyDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "requestNative",
        "i",
deploy_switchReason,
_internalCallStatus);
}
    /**
     * description: Method to request connection to a wireless carplay device
     */
    void cpprescontrolsDBusProxy::connect(const ::v2::com::harman::pres::cpprestypes::WifiInfo &_tranportInfo, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<::v2::com::harman::pres::cpprestypes::WifiInfo, ::v2::com::harman::pres::cpprestypes_::WifiInfoDeployment_t> deploy_tranportInfo(_tranportInfo, static_cast<::v2::com::harman::pres::cpprestypes_::WifiInfoDeployment_t*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<::v2::com::harman::pres::cpprestypes::WifiInfo, ::v2::com::harman::pres::cpprestypes_::WifiInfoDeployment_t >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "connect",
        "(ss)",
deploy_tranportInfo,
_internalCallStatus);
}
    /**
     * description: Method allows client to request for disconnection of current 	active device
     */
    void cpprescontrolsDBusProxy::disconnect(CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "disconnect",
        "",
_internalCallStatus);
}
    /**
     * description: Method allows client to request for the deletion of the     device from the
     *   wireless carplay device list
     */
    void cpprescontrolsDBusProxy::deleteDevice(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_btAddr(_btAddr, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "deleteDevice",
        "s",
deploy_btAddr,
_internalCallStatus);
}
    /**
     * description: This request method allows client to request for cancelling 	the ongoing
     *   connect process.
     */
    void cpprescontrolsDBusProxy::cancelConnect(CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "cancelConnect",
        "",
_internalCallStatus);
}
    /**
     * description: This request method allows client to request for adding new device in HU.
     */
    void cpprescontrolsDBusProxy::addNewDevice(const std::string &_devName, const std::string &_devAddress, CommonAPI::CallStatus &_internalCallStatus) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_devName(_devName, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_devAddress(_devAddress, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethod(
        *this,
        "addNewDevice",
        "ss",
deploy_devName, deploy_devAddress,
_internalCallStatus);
}
    /**
     * description: This request method allows client to request for  connected device list.
     */
    void cpprescontrolsDBusProxy::getDeviceList(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v1::com::harman::pres::pprestypes::sDevDetails>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t>> deploy_devDetails(_devDetails, static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::com::harman::pres::pprestypes::sDevDetails>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "getDeviceList",
        "a(sssbi)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_devDetails,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> cpprescontrolsDBusProxy::getDeviceListAsync(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, GetDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::vector<::v1::com::harman::pres::pprestypes::sDevDetails>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t>> deploy_devDetails(_devDetails, static_cast<CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::vector<::v1::com::harman::pres::pprestypes::sDevDetails>, CommonAPI::DBus::ArrayDeployment<::v1::com::harman::pres::pprestypes_::sDevDetailsDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "getDeviceList",
        "a(sssbi)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_devDetails,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void cpprescontrolsDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 3;
          ownVersionMinor = 0;
      }

      } // namespace pres
      } // namespace harman
      } // namespace com
      } // namespace v3
