/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: This is a Common API DBUS settings interface of audio presentation controller
 *   for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V3_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_PROXY_BASE_HPP_
#define V3_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_PROXY_BASE_HPP_

#include <v3/com/harman/audio/audioPresCtrl/audioPresCtrlSettings.hpp>


#include <v3/com/harman/audio/audioPresCtrl/audioPresCtrlTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

class audioPresCtrlSettingsProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> FadeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> BalanceAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> BassAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> MidAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> TrebleAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> EqualizerAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> ClarifiAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> LoudnessAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint16_t> AVCModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> AuxOffsetGainAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> MidLowAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> MidHighAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> A2dpOffsetGainAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> MicGainAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int16_t> UserDefCustomValueAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> ActiveSrcMuteAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> MasterMuteAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> MicMuteStatusAttribute;
    typedef CommonAPI::ObservableAttribute<std::string> TouchBeepSelectionAttribute;
    typedef CommonAPI::ObservableAttribute<std::string> KeypadBeepSelectionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::mBeepStatus> BeepStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eOccupancyModeType> OccupancyModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> USBAutoPlayStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId> LastPlayedTunerSrcAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId> LastPlayedMediaSrcAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId> PreviousEntSourceAttribute;
    typedef CommonAPI::Event<
        ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume, bool
    > VolumeChangeEvent;
    typedef CommonAPI::Event<
        ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume, bool, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eVolumeGroup
    > VolumeUpdateEvent;
    typedef CommonAPI::Event<
        ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId, bool
    > SourceMuteStateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors&)> SetSourceVolumeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors&, const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume&)> GetSourceVolumeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors&, const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::ListItems&)> GetListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors&, const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId&, const bool&)> GetSourceMuteAsyncCallback;

    /**
     * description: Attribute holding current fade level
     */
    virtual FadeAttribute& getFadeAttribute() = 0;
    /**
     * description: Attribute holding current Balance level
     */
    virtual BalanceAttribute& getBalanceAttribute() = 0;
    /**
     * description: Attribute holding current Bass level
     */
    virtual BassAttribute& getBassAttribute() = 0;
    /**
     * description: Attribute holding current Mid level
     */
    virtual MidAttribute& getMidAttribute() = 0;
    /**
     * description: Attribute holding current Treble level
     */
    virtual TrebleAttribute& getTrebleAttribute() = 0;
    /**
     * description: Attribute holding Equalizer set
     */
    virtual EqualizerAttribute& getEqualizerAttribute() = 0;
    /**
     * description: Attribute holding Clarifi status (enabled/disabled)
     */
    virtual ClarifiAttribute& getClarifiAttribute() = 0;
    /**
     * description: Attribute holding Loudness status (enabled/disabled)
     */
    virtual LoudnessAttribute& getLoudnessAttribute() = 0;
    /**
     * description: Attribute holding current AVCMode level
     */
    virtual AVCModeAttribute& getAVCModeAttribute() = 0;
    /**
     * description: Attribute holding Aux offset gain value
     */
    virtual AuxOffsetGainAttribute& getAuxOffsetGainAttribute() = 0;
    /**
     * description: Attribute holding Mid low value
     */
    virtual MidLowAttribute& getMidLowAttribute() = 0;
    /**
     * description: Attribute holding MidHigh value
     */
    virtual MidHighAttribute& getMidHighAttribute() = 0;
    /**
     * description: Attribute holding A2dp source offset gain value
     */
    virtual A2dpOffsetGainAttribute& getA2dpOffsetGainAttribute() = 0;
    /**
     * description: Attribute holding Mic gain value
     */
    virtual MicGainAttribute& getMicGainAttribute() = 0;
    /**
     * description: Attribute to hold CUSTOM EQ preset value defined by user
     */
    virtual UserDefCustomValueAttribute& getUserDefCustomValueAttribute() = 0;
    /**
     * description: Attribute holding mute state of active source
     */
    virtual ActiveSrcMuteAttribute& getActiveSrcMuteAttribute() = 0;
    /**
     * description: Attribute holding system mute state
     */
    virtual MasterMuteAttribute& getMasterMuteAttribute() = 0;
    /**
     * description: Attribute holding MicMute status
     */
    virtual MicMuteStatusAttribute& getMicMuteStatusAttribute() = 0;
    /**
     * description: Attribute holding touch beep tone selection
     */
    virtual TouchBeepSelectionAttribute& getTouchBeepSelectionAttribute() = 0;
    /**
     * description: Attribute holding touch beep tone selection
     */
    virtual KeypadBeepSelectionAttribute& getKeypadBeepSelectionAttribute() = 0;
    /**
     * description: Attribute to hold enable/disable state of all types of Touch beeps like
     *   WARNING, CONFIRMATION etc..
     */
    virtual BeepStatusAttribute& getBeepStatusAttribute() = 0;
    /**
     * description: Attribute holding occupancy mode selection
     */
    virtual OccupancyModeAttribute& getOccupancyModeAttribute() = 0;
    /**
     * description: Attribute holding AutoPlay Status
     */
    virtual USBAutoPlayStatusAttribute& getUSBAutoPlayStatusAttribute() = 0;
    /**
     * description: Attribute holding last played Tuner source in a power cycle.
     */
    virtual LastPlayedTunerSrcAttribute& getLastPlayedTunerSrcAttribute() = 0;
    /**
     * description: Attribute holding last played Media source in a power cycle
     */
    virtual LastPlayedMediaSrcAttribute& getLastPlayedMediaSrcAttribute() = 0;
    /**
     * description: Attribute holding previous Entertainment source in a power cycle. If previous
     *   source is unavailable, FM(default source) will be consider as previous source
     */
    virtual PreviousEntSourceAttribute& getPreviousEntSourceAttribute() = 0;

    /**
     * description: To broadcast volume change signal to HMI to display updated volume level
     */
    virtual VolumeChangeEvent& getVolumeChangeEvent() = 0;
    /**
     * description: To broadcast volume update signal to HMI to display updated volume level along
     *   with source volume group name
     */
    virtual VolumeUpdateEvent& getVolumeUpdateEvent() = 0;
    /**
     * description: To broadcast system mute state to HMI
     */
    virtual SourceMuteStateEvent& getSourceMuteStateEvent() = 0;

    /**
     * description: This method is used to set absolute volume of presently playing source.  	If
     *   interrupt source is active, it changes the volume of active interrupt source
     *   	If no interrupts are active, it changes volume of Entertainment source.
     *   	(at)broadast VolumeChange
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void SetVolume(const uint16_t &_absoluteVolume, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to set Volume of presently playing source where volume
     *   change is given in steps example -2 or +2 	(at)broadast VolumeChange
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void SetVolumeStep(const int16_t &_volumeStep, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to set Volume of any source group 	(at)broadast VolumeChange
     */
    virtual void SetSourceVolume(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume &_volume, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetSourceVolumeAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume &_volume, SetSourceVolumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to get Volume of any source 	(at)return eAudioPresErrors
     */
    virtual void GetSourceVolume(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourceID, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::sSourceVolume &_volumeOfSource, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetSourceVolumeAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourceID, GetSourceVolumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to toggle mute status of currently playing source
     *   	(at)attribute update ActiveSrcMute
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void ToggleActiveSrcMute(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to set mute status of any particular source 	(at)broadcast
     *   SourceMuteState
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void SetSourceMute(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourceID, const bool &_mute, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to toggle MIC mute status  	(at)attribute update
     *   MicMuteStatus
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void ToggleMicMute(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to get supported EQ preset, Touch tone list and keyboard
     *   tone list 	(at)return eAudioPresErrors
     */
    virtual void GetList(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eUserOption &_listType, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::ListItems &_list, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetListAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eUserOption &_listType, GetListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to get mute status of any particular source 	(at)return
     *   eAudioPresErrors
     */
    virtual void GetSourceMute(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourceID, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourceId, bool &_mute, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetSourceMuteAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::SourceId &_sourceID, GetSourceMuteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to toggle mute status of complete system 	(at)attribute
     *   update MasterMute
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void ToggleMasterMute(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to set audio settings attributes     You may pass a map of
     *   attributes rather than multiple calls.      For example , the balance and fade
     *   is always a combination 	(at)attribute update
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void setAudioAttribute(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::mAttribute &_attributesmap, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to do Factory reset or Master reset
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void ResetAudioSettings(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eResetType &_resetType, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to set custom EQ preset value
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void SetCustomPreset(const int16_t &_frequencyBandValue, CommonAPI::CallStatus &_internalCallStatus) = 0;
};

} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v3


// Compatibility
namespace v3_3 = v3;

#endif // V3_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Settings_PROXY_BASE_HPP_
