/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_PROXY_BASE_HPP_
#define V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_PROXY_BASE_HPP_

#include <v3/com/harman/btpresplugin/BtManagerExt.hpp>


#include <v1/com/harman/UISpeechService/UISSTypes.hpp>
#include <v7/com/harman/btpres/BTPresTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/SelectiveEvent.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace btpresplugin {

class BtManagerExtProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<bool> LoopbackStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::UISpeechService::UISSTypes::ePlayState> TtsPlayStateAttribute;
    typedef CommonAPI::Event<
        std::string
    > NotifyCancelTTSPlayEvent;
    typedef CommonAPI::SelectiveEvent<std::string, std::string> EcoFileStatusSelectiveEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v7::com::harman::btpres::BTPresTypes::eErrorType&)> HfpLoopBackTestAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v7::com::harman::btpres::BTPresTypes::eErrorType&)> AutoPairingAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v7::com::harman::btpres::BTPresTypes::eErrorType&)> StartTTSplayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v7::com::harman::btpres::BTPresTypes::eErrorType&)> StopTTSplayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v7::com::harman::btpres::BTPresTypes::eErrorType&)> GenerateEcoFileAsyncCallback;

    /**
     * description: This attribute indicates whether loopback test is in progress of not
     */
    virtual LoopbackStateAttribute& getLoopbackStateAttribute() = 0;
    /**
     * description: It will broadcast playstate update to registered client, true, if playing state
     */
    virtual TtsPlayStateAttribute& getTtsPlayStateAttribute() = 0;

    /**
     * description: notifyTTSPlayTermination:    domain: Type = 'String' ;Description = 'This is to
     *   identify the currently playing prompt channel for which cancel request has
     *   been sent to TTS'
     */
    virtual NotifyCancelTTSPlayEvent& getNotifyCancelTTSPlayEvent() = 0;
    /**
     * description: This will broadcast when there is any change in callstack
     * param: btAddress: BTAddress of device whose eco file status is sent.
     * param: btAddress: Location where eco file is created.
     */
    virtual EcoFileStatusSelectiveEvent& getEcoFileStatusSelectiveEvent() = 0;

    /**
     * description: The method is used to enable HFP audio loop back testing.
     */
    virtual void hfpLoopBackTest(const bool &_loopback_mode, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> hfpLoopBackTestAsync(const bool &_loopback_mode, HfpLoopBackTestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: The method is used to enable HFP audio loop back testing.
     */
    virtual void autoPairing(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> autoPairingAsync(const std::string &_inAddress, AutoPairingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used for start tts playback
     * param: promptId (UInt32)        : prompt ID of playback
     * param: ttsText (String)         : text to be played on TTS prompt     returns:
     *   errorCode (eErrorType) : error code
     */
    virtual void startTTSplay(const uint32_t &_promptId, const std::string &_ttsText, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startTTSplayAsync(const uint32_t &_promptId, const std::string &_ttsText, StartTTSplayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Used to stop TTS playback
     * param: promptId (UInt32)        : prompt ID     returns: errorCode (eErrorType) :
     *   error code
     */
    virtual void stopTTSplay(const uint32_t &_promptId, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopTTSplayAsync(const uint32_t &_promptId, StopTTSplayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to generateEcoFile for synced contacts.
     * param: btAddress : BT Address of device whose eco file needs to be created.         
     *   returns: errorCode (eErrorType) : error code
     */
    virtual void generateEcoFile(const std::string &_btAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> generateEcoFileAsync(const std::string &_btAddress, GenerateEcoFileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace btpresplugin
} // namespace harman
} // namespace com
} // namespace v3


// Compatibility
namespace v3_2 = v3;

#endif // V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_PROXY_BASE_HPP_
