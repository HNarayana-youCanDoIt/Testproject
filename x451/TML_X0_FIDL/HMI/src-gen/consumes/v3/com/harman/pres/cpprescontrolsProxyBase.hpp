/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V3_COM_HARMAN_PRES_cpprescontrols_PROXY_BASE_HPP_
#define V3_COM_HARMAN_PRES_cpprescontrols_PROXY_BASE_HPP_

#include <v3/com/harman/pres/cpprescontrols.hpp>


#include <v1/com/harman/pres/pprestypes.hpp>
#include <v2/com/harman/pres/cpprestypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace pres {

class cpprescontrolsProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sSessionDetails> SessionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::vector<::v1::com::harman::pres::pprestypes::sDevDetails>> DeviceInfoAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&)> GetDeviceListAsyncCallback;

    /**
     * description: This attribute is responsible to maintain status of projection sessions
     */
    virtual SessionAttribute& getSessionAttribute() = 0;
    /**
     * description: This attribute reflects the  known         carplay devices list update
     */
    virtual DeviceInfoAttribute& getDeviceInfoAttribute() = 0;


    /**
     * description: This request method allows client to request for the Projection screen        
     *   	show : true - show 		false - hide , If false client can disregard layer and
     *   appUrl 	appUrl : URL identifier of the desired CarPlay UI application to
     *   launch: 	  Blank String: CarPlay native screen will be shown 	  "maps:" -
     *   Carplay Maps application will be shown  	  "mobilephone:" - CarPlay Phone
     *   application will be shown 	  "music:" - CarPlay Music application will be
     *   shown 	  "nowplaying:" - CarPlay Now Playing screen will be shown 	 
     *   "tel:xxx-xxx-xxxx" - CarPlay Phone application will be shown and a phone call
     *   with desired 	  	number will be placed. 	Note: Show is just a request to the
     *   phone , if there is an issue with audio / video render 	from phone , the
     *   session would reflect the error
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void requestProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: Method to request for the Native screen. 	switchReason : reason for switching
     *   out of the carplay screen , refer enum values
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void requestNative(const ::v2::com::harman::pres::cpprestypes::eScreenSwitchReason &_switchReason, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: Method to request connection to a wireless carplay device
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void connect(const ::v2::com::harman::pres::cpprestypes::WifiInfo &_tranportInfo, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: Method allows client to request for disconnection of current 	active device
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void disconnect(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: Method allows client to request for the deletion of the     device from the
     *   wireless carplay device list
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void deleteDevice(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This request method allows client to request for cancelling 	the ongoing
     *   connect process.
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void cancelConnect(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This request method allows client to request for adding new device in HU.
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void addNewDevice(const std::string &_devName, const std::string &_devAddress, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This request method allows client to request for  connected device list.
     */
    virtual void getDeviceList(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDeviceListAsync(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, GetDeviceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v3


// Compatibility
namespace v3_0 = v3;

#endif // V3_COM_HARMAN_PRES_cpprescontrols_PROXY_BASE_HPP_
