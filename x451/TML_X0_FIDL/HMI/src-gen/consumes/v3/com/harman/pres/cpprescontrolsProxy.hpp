/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V3_COM_HARMAN_PRES_cpprescontrols_PROXY_HPP_
#define V3_COM_HARMAN_PRES_cpprescontrols_PROXY_HPP_

#include <v3/com/harman/pres/cpprescontrolsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace pres {

template <typename ... _AttributeExtensions>
class cpprescontrolsProxy
    : virtual public cpprescontrols, 
      virtual public cpprescontrolsProxyBase,
      virtual public _AttributeExtensions... {
public:
    cpprescontrolsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~cpprescontrolsProxy();

    typedef cpprescontrols InterfaceType;


    /**
     * description: This attribute is responsible to maintain status of projection sessions
     */
    /**
     * Returns the wrapper class that provides access to the attribute session.
     */
    virtual SessionAttribute& getSessionAttribute() {
        return delegate_->getSessionAttribute();
    }
    /**
     * description: This attribute reflects the  known         carplay devices list update
     */
    /**
     * Returns the wrapper class that provides access to the attribute deviceInfo.
     */
    virtual DeviceInfoAttribute& getDeviceInfoAttribute() {
        return delegate_->getDeviceInfoAttribute();
    }


    /**
     * description: This request method allows client to request for the Projection screen        
     *   	show : true - show 		false - hide , If false client can disregard layer and
     *   appUrl 	appUrl : URL identifier of the desired CarPlay UI application to
     *   launch: 	  Blank String: CarPlay native screen will be shown 	  "maps:" -
     *   Carplay Maps application will be shown  	  "mobilephone:" - CarPlay Phone
     *   application will be shown 	  "music:" - CarPlay Music application will be
     *   shown 	  "nowplaying:" - CarPlay Now Playing screen will be shown 	 
     *   "tel:xxx-xxx-xxxx" - CarPlay Phone application will be shown and a phone call
     *   with desired 	  	number will be placed. 	Note: Show is just a request to the
     *   phone , if there is an issue with audio / video render 	from phone , the
     *   session would reflect the error
     * Calls requestProjection with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method to request for the Native screen. 	switchReason : reason for switching
     *   out of the carplay screen , refer enum values
     * Calls requestNative with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestNative(const ::v2::com::harman::pres::cpprestypes::eScreenSwitchReason &_switchReason, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method to request connection to a wireless carplay device
     * Calls connect with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void connect(const ::v2::com::harman::pres::cpprestypes::WifiInfo &_tranportInfo, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method allows client to request for disconnection of current 	active device
     * Calls disconnect with Fire&Forget semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void disconnect(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method allows client to request for the deletion of the     device from the
     *   wireless carplay device list
     * Calls deleteDevice with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteDevice(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This request method allows client to request for cancelling 	the ongoing
     *   connect process.
     * Calls cancelConnect with Fire&Forget semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void cancelConnect(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This request method allows client to request for adding new device in HU.
     * Calls addNewDevice with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void addNewDevice(const std::string &_devName, const std::string &_devAddress, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This request method allows client to request for  connected device list.
     * Calls getDeviceList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDeviceList(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDeviceList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDeviceListAsync(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, GetDeviceListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<cpprescontrolsProxyBase> delegate_;
};

typedef cpprescontrolsProxy<> cpprescontrolsProxyDefault;

namespace cpprescontrolsExtensions {
    /**
     * description: This attribute is responsible to maintain status of projection sessions
     */
    template <template <typename > class _ExtensionType>
    class SessionAttributeExtension {
     public:
        typedef _ExtensionType<cpprescontrolsProxyBase::SessionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cpprescontrolsProxyBase::SessionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SessionAttributeExtension() {}
    #endif
    
        SessionAttributeExtension(cpprescontrolsProxyBase& proxy): attributeExtension_(proxy.getSessionAttribute()) {
        }
    
        inline extension_type& getSessionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: This attribute reflects the  known         carplay devices list update
     */
    template <template <typename > class _ExtensionType>
    class DeviceInfoAttributeExtension {
     public:
        typedef _ExtensionType<cpprescontrolsProxyBase::DeviceInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cpprescontrolsProxyBase::DeviceInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DeviceInfoAttributeExtension() {}
    #endif
    
        DeviceInfoAttributeExtension(cpprescontrolsProxyBase& proxy): attributeExtension_(proxy.getDeviceInfoAttribute()) {
        }
    
        inline extension_type& getDeviceInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace cpprescontrolsExtensions

//
// cpprescontrolsProxy Implementation
//
template <typename ... _AttributeExtensions>
cpprescontrolsProxy<_AttributeExtensions...>::cpprescontrolsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<cpprescontrolsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<cpprescontrolsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
cpprescontrolsProxy<_AttributeExtensions...>::~cpprescontrolsProxy() {
}

/**
 * description: This request method allows client to request for the Projection screen        
 *   	show : true - show 		false - hide , If false client can disregard layer and
 *   appUrl 	appUrl : URL identifier of the desired CarPlay UI application to
 *   launch: 	  Blank String: CarPlay native screen will be shown 	  "maps:" -
 *   Carplay Maps application will be shown  	  "mobilephone:" - CarPlay Phone
 *   application will be shown 	  "music:" - CarPlay Music application will be
 *   shown 	  "nowplaying:" - CarPlay Now Playing screen will be shown 	 
 *   "tel:xxx-xxx-xxxx" - CarPlay Phone application will be shown and a phone call
 *   with desired 	  	number will be placed. 	Note: Show is just a request to the
 *   phone , if there is an issue with audio / video render 	from phone , the
 *   session would reflect the error
 */
template <typename ... _AttributeExtensions>
void cpprescontrolsProxy<_AttributeExtensions...>::requestProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->requestProjection(_appUrl, _internalCallStatus);
}
/**
 * description: Method to request for the Native screen. 	switchReason : reason for switching
 *   out of the carplay screen , refer enum values
 */
template <typename ... _AttributeExtensions>
void cpprescontrolsProxy<_AttributeExtensions...>::requestNative(const ::v2::com::harman::pres::cpprestypes::eScreenSwitchReason &_switchReason, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_switchReason.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->requestNative(_switchReason, _internalCallStatus);
}
/**
 * description: Method to request connection to a wireless carplay device
 */
template <typename ... _AttributeExtensions>
void cpprescontrolsProxy<_AttributeExtensions...>::connect(const ::v2::com::harman::pres::cpprestypes::WifiInfo &_tranportInfo, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->connect(_tranportInfo, _internalCallStatus);
}
/**
 * description: Method allows client to request for disconnection of current 	active device
 */
template <typename ... _AttributeExtensions>
void cpprescontrolsProxy<_AttributeExtensions...>::disconnect(CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->disconnect(_internalCallStatus);
}
/**
 * description: Method allows client to request for the deletion of the     device from the
 *   wireless carplay device list
 */
template <typename ... _AttributeExtensions>
void cpprescontrolsProxy<_AttributeExtensions...>::deleteDevice(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->deleteDevice(_btAddr, _internalCallStatus);
}
/**
 * description: This request method allows client to request for cancelling 	the ongoing
 *   connect process.
 */
template <typename ... _AttributeExtensions>
void cpprescontrolsProxy<_AttributeExtensions...>::cancelConnect(CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->cancelConnect(_internalCallStatus);
}
/**
 * description: This request method allows client to request for adding new device in HU.
 */
template <typename ... _AttributeExtensions>
void cpprescontrolsProxy<_AttributeExtensions...>::addNewDevice(const std::string &_devName, const std::string &_devAddress, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->addNewDevice(_devName, _devAddress, _internalCallStatus);
}
/**
 * description: This request method allows client to request for  connected device list.
 */
template <typename ... _AttributeExtensions>
void cpprescontrolsProxy<_AttributeExtensions...>::getDeviceList(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->getDeviceList(_devDetails, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> cpprescontrolsProxy<_AttributeExtensions...>::getDeviceListAsync(const std::vector<::v1::com::harman::pres::pprestypes::sDevDetails> &_devDetails, GetDeviceListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDeviceListAsync(_devDetails, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &cpprescontrolsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool cpprescontrolsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool cpprescontrolsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& cpprescontrolsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& cpprescontrolsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace pres
} // namespace harman
} // namespace com
} // namespace v3

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v3::com::harman::pres::cpprescontrolsProxy,
    _AttributeExtension> {
    typedef typename ::v3::com::harman::pres::cpprescontrolsProxy<
            ::v3::com::harman::pres::cpprescontrolsExtensions::SessionAttributeExtension<_AttributeExtension>, 
            ::v3::com::harman::pres::cpprescontrolsExtensions::DeviceInfoAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v3_0 = v3;

#endif // V3_COM_HARMAN_PRES_cpprescontrols_PROXY_HPP_
