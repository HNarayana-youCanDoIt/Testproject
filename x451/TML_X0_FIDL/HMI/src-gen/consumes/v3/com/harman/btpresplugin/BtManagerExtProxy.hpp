/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_PROXY_HPP_
#define V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_PROXY_HPP_

#include <v3/com/harman/btpresplugin/BtManagerExtProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v3 {
namespace com {
namespace harman {
namespace btpresplugin {

template <typename ... _AttributeExtensions>
class BtManagerExtProxy
    : virtual public BtManagerExt, 
      virtual public BtManagerExtProxyBase,
      virtual public _AttributeExtensions... {
public:
    BtManagerExtProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~BtManagerExtProxy();

    typedef BtManagerExt InterfaceType;


    /**
     * description: This attribute indicates whether loopback test is in progress of not
     */
    /**
     * Returns the wrapper class that provides access to the attribute loopbackState.
     */
    virtual LoopbackStateAttribute& getLoopbackStateAttribute() {
        return delegate_->getLoopbackStateAttribute();
    }
    /**
     * description: It will broadcast playstate update to registered client, true, if playing state
     */
    /**
     * Returns the wrapper class that provides access to the attribute ttsPlayState.
     */
    virtual TtsPlayStateAttribute& getTtsPlayStateAttribute() {
        return delegate_->getTtsPlayStateAttribute();
    }

    /**
     * description: notifyTTSPlayTermination:    domain: Type = 'String' ;Description = 'This is to
     *   identify the currently playing prompt channel for which cancel request has
     *   been sent to TTS'
     */
    /**
     * Returns the wrapper class that provides access to the broadcast notifyCancelTTSPlay.
     */
    virtual NotifyCancelTTSPlayEvent& getNotifyCancelTTSPlayEvent() {
        return delegate_->getNotifyCancelTTSPlayEvent();
    }
    /**
     * description: This will broadcast when there is any change in callstack
     * param: btAddress: BTAddress of device whose eco file status is sent.
     * param: btAddress: Location where eco file is created.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast ecoFileStatus.
     */
    virtual EcoFileStatusSelectiveEvent& getEcoFileStatusSelectiveEvent() {
        return delegate_->getEcoFileStatusSelectiveEvent();
    }

    /**
     * description: The method is used to enable HFP audio loop back testing.
     * Calls hfpLoopBackTest with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void hfpLoopBackTest(const bool &_loopback_mode, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls hfpLoopBackTest with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> hfpLoopBackTestAsync(const bool &_loopback_mode, HfpLoopBackTestAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: The method is used to enable HFP audio loop back testing.
     * Calls autoPairing with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void autoPairing(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls autoPairing with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> autoPairingAsync(const std::string &_inAddress, AutoPairingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used for start tts playback
     * param: promptId (UInt32)        : prompt ID of playback
     * param: ttsText (String)         : text to be played on TTS prompt     returns:
     *   errorCode (eErrorType) : error code
     * Calls startTTSplay with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startTTSplay(const uint32_t &_promptId, const std::string &_ttsText, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startTTSplay with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startTTSplayAsync(const uint32_t &_promptId, const std::string &_ttsText, StartTTSplayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Used to stop TTS playback
     * param: promptId (UInt32)        : prompt ID     returns: errorCode (eErrorType) :
     *   error code
     * Calls stopTTSplay with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stopTTSplay(const uint32_t &_promptId, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stopTTSplay with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopTTSplayAsync(const uint32_t &_promptId, StopTTSplayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is used to generateEcoFile for synced contacts.
     * param: btAddress : BT Address of device whose eco file needs to be created.         
     *   returns: errorCode (eErrorType) : error code
     * Calls generateEcoFile with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void generateEcoFile(const std::string &_btAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls generateEcoFile with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> generateEcoFileAsync(const std::string &_btAddress, GenerateEcoFileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<BtManagerExtProxyBase> delegate_;
};

typedef BtManagerExtProxy<> BtManagerExtProxyDefault;

namespace BtManagerExtExtensions {
    /**
     * description: This attribute indicates whether loopback test is in progress of not
     */
    template <template <typename > class _ExtensionType>
    class LoopbackStateAttributeExtension {
     public:
        typedef _ExtensionType<BtManagerExtProxyBase::LoopbackStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<BtManagerExtProxyBase::LoopbackStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        LoopbackStateAttributeExtension() {}
    #endif
    
        LoopbackStateAttributeExtension(BtManagerExtProxyBase& proxy): attributeExtension_(proxy.getLoopbackStateAttribute()) {
        }
    
        inline extension_type& getLoopbackStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: It will broadcast playstate update to registered client, true, if playing state
     */
    template <template <typename > class _ExtensionType>
    class TtsPlayStateAttributeExtension {
     public:
        typedef _ExtensionType<BtManagerExtProxyBase::TtsPlayStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<BtManagerExtProxyBase::TtsPlayStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TtsPlayStateAttributeExtension() {}
    #endif
    
        TtsPlayStateAttributeExtension(BtManagerExtProxyBase& proxy): attributeExtension_(proxy.getTtsPlayStateAttribute()) {
        }
    
        inline extension_type& getTtsPlayStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace BtManagerExtExtensions

//
// BtManagerExtProxy Implementation
//
template <typename ... _AttributeExtensions>
BtManagerExtProxy<_AttributeExtensions...>::BtManagerExtProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<BtManagerExtProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<BtManagerExtProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
BtManagerExtProxy<_AttributeExtensions...>::~BtManagerExtProxy() {
}

/**
 * description: The method is used to enable HFP audio loop back testing.
 */
template <typename ... _AttributeExtensions>
void BtManagerExtProxy<_AttributeExtensions...>::hfpLoopBackTest(const bool &_loopback_mode, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->hfpLoopBackTest(_loopback_mode, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtManagerExtProxy<_AttributeExtensions...>::hfpLoopBackTestAsync(const bool &_loopback_mode, HfpLoopBackTestAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->hfpLoopBackTestAsync(_loopback_mode, _callback, _info);
}
/**
 * description: The method is used to enable HFP audio loop back testing.
 */
template <typename ... _AttributeExtensions>
void BtManagerExtProxy<_AttributeExtensions...>::autoPairing(const std::string &_inAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->autoPairing(_inAddress, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtManagerExtProxy<_AttributeExtensions...>::autoPairingAsync(const std::string &_inAddress, AutoPairingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->autoPairingAsync(_inAddress, _callback, _info);
}
/**
 * description: Used for start tts playback
 * param: promptId (UInt32)        : prompt ID of playback
 * param: ttsText (String)         : text to be played on TTS prompt     returns:
 *   errorCode (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void BtManagerExtProxy<_AttributeExtensions...>::startTTSplay(const uint32_t &_promptId, const std::string &_ttsText, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->startTTSplay(_promptId, _ttsText, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtManagerExtProxy<_AttributeExtensions...>::startTTSplayAsync(const uint32_t &_promptId, const std::string &_ttsText, StartTTSplayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->startTTSplayAsync(_promptId, _ttsText, _callback, _info);
}
/**
 * description: Used to stop TTS playback
 * param: promptId (UInt32)        : prompt ID     returns: errorCode (eErrorType) :
 *   error code
 */
template <typename ... _AttributeExtensions>
void BtManagerExtProxy<_AttributeExtensions...>::stopTTSplay(const uint32_t &_promptId, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->stopTTSplay(_promptId, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtManagerExtProxy<_AttributeExtensions...>::stopTTSplayAsync(const uint32_t &_promptId, StopTTSplayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->stopTTSplayAsync(_promptId, _callback, _info);
}
/**
 * description: This method is used to generateEcoFile for synced contacts.
 * param: btAddress : BT Address of device whose eco file needs to be created.         
 *   returns: errorCode (eErrorType) : error code
 */
template <typename ... _AttributeExtensions>
void BtManagerExtProxy<_AttributeExtensions...>::generateEcoFile(const std::string &_btAddress, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->generateEcoFile(_btAddress, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> BtManagerExtProxy<_AttributeExtensions...>::generateEcoFileAsync(const std::string &_btAddress, GenerateEcoFileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->generateEcoFileAsync(_btAddress, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &BtManagerExtProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool BtManagerExtProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool BtManagerExtProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& BtManagerExtProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& BtManagerExtProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace btpresplugin
} // namespace harman
} // namespace com
} // namespace v3

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v3::com::harman::btpresplugin::BtManagerExtProxy,
    _AttributeExtension> {
    typedef typename ::v3::com::harman::btpresplugin::BtManagerExtProxy<
            ::v3::com::harman::btpresplugin::BtManagerExtExtensions::LoopbackStateAttributeExtension<_AttributeExtension>, 
            ::v3::com::harman::btpresplugin::BtManagerExtExtensions::TtsPlayStateAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v3_2 = v3;

#endif // V3_COM_HARMAN_BTPRESPLUGIN_Bt_Manager_Ext_PROXY_HPP_
