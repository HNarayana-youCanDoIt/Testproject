/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Interface for managing the GENIVI LUC (Last User Context)      The GENIVI Node
 *   Startup Controller remembers applications that were used     in the last
 *   session of a user. It is used in order to restore these     applications on
 *   the next start-up.      The Node Startup Controller is a passive component in
 *   the sense that it     does not remember applications on its own; instead,
 *   applications need to     register and deregister themselves proactively.     
 *   Applications can be registered for different LUC types, the standard ones
 * author: Giridhar
 */
#ifndef V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_NODE_STARTUP_CONTROLLER_HPP_
#define V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_NODE_STARTUP_CONTROLLER_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Types.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace NodeStartupController1 {

class NodeStartupController {
public:
    virtual ~NodeStartupController() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
};

const char* NodeStartupController::getInterface() {
    return ("org.genivi.NodeStartupController1.NodeStartupController");
}

CommonAPI::Version NodeStartupController::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace NodeStartupController1
} // namespace genivi
} // namespace org
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_NODE_STARTUP_CONTROLLER_HPP_
