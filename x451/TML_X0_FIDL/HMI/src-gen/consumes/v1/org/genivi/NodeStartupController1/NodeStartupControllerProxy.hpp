/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Interface for managing the GENIVI LUC (Last User Context)      The GENIVI Node
 *   Startup Controller remembers applications that were used     in the last
 *   session of a user. It is used in order to restore these     applications on
 *   the next start-up.      The Node Startup Controller is a passive component in
 *   the sense that it     does not remember applications on its own; instead,
 *   applications need to     register and deregister themselves proactively.     
 *   Applications can be registered for different LUC types, the standard ones
 * author: Giridhar
 */
#ifndef V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_Node_Startup_Controller_PROXY_HPP_
#define V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_Node_Startup_Controller_PROXY_HPP_

#include <v1/org/genivi/NodeStartupController1/NodeStartupControllerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {
namespace NodeStartupController1 {

template <typename ... _AttributeExtensions>
class NodeStartupControllerProxy
    : virtual public NodeStartupController, 
      virtual public NodeStartupControllerProxyBase,
      virtual public _AttributeExtensions... {
public:
    NodeStartupControllerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~NodeStartupControllerProxy();

    typedef NodeStartupController InterfaceType;




    /**
     * description: BeginLUCRegistration:        Initialises the LUC registration sequence at
     *   shutdown in order to register       the applications which are running in the
     *   LUC in this moment.   	  consumer.
     * author: Giridhar
     * Calls BeginLUCRegistration with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void BeginLUCRegistration(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls BeginLUCRegistration with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> BeginLUCRegistrationAsync(BeginLUCRegistrationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: RegisterWithLUC:       apps: A dictionary that maps LUC types to arrays of
     *   application unit names.        Registers one or more applications for certain
     *   LUC types. Applications may       be listed multiple times. For LUC types
     *   where only a single application may       be registered at a time, the last
     *   application in the corresponding list wins.        An example for the apps
     *   parameter would be:          {           0 : [ "app1.unit" ],           1 : [
     *   "app2.unit", "app3.unit" ],           2 : [ "app3.unit" ]         }      
     *   where 0 = "foreground", 1 = background , 2 = "audible"
     * author: Giridhar
     * Calls RegisterWithLUC with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void RegisterWithLUC(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls RegisterWithLUC with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> RegisterWithLUCAsync(RegisterWithLUCAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: FinishLUCRegistration:        Finishes the LUC registration sequence and
     *   atomically replaces the       previous LUC.       consumer.
     * author: Giridhar
     * Calls FinishLUCRegistration with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void FinishLUCRegistration(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls FinishLUCRegistration with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> FinishLUCRegistrationAsync(FinishLUCRegistrationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<NodeStartupControllerProxyBase> delegate_;
};

typedef NodeStartupControllerProxy<> NodeStartupControllerProxyDefault;


//
// NodeStartupControllerProxy Implementation
//
template <typename ... _AttributeExtensions>
NodeStartupControllerProxy<_AttributeExtensions...>::NodeStartupControllerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<NodeStartupControllerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<NodeStartupControllerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
NodeStartupControllerProxy<_AttributeExtensions...>::~NodeStartupControllerProxy() {
}

/**
 * description: BeginLUCRegistration:        Initialises the LUC registration sequence at
 *   shutdown in order to register       the applications which are running in the
 *   LUC in this moment.   	  consumer.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void NodeStartupControllerProxy<_AttributeExtensions...>::BeginLUCRegistration(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->BeginLUCRegistration(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> NodeStartupControllerProxy<_AttributeExtensions...>::BeginLUCRegistrationAsync(BeginLUCRegistrationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->BeginLUCRegistrationAsync(_callback, _info);
}
/**
 * description: RegisterWithLUC:       apps: A dictionary that maps LUC types to arrays of
 *   application unit names.        Registers one or more applications for certain
 *   LUC types. Applications may       be listed multiple times. For LUC types
 *   where only a single application may       be registered at a time, the last
 *   application in the corresponding list wins.        An example for the apps
 *   parameter would be:          {           0 : [ "app1.unit" ],           1 : [
 *   "app2.unit", "app3.unit" ],           2 : [ "app3.unit" ]         }      
 *   where 0 = "foreground", 1 = background , 2 = "audible"
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void NodeStartupControllerProxy<_AttributeExtensions...>::RegisterWithLUC(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->RegisterWithLUC(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> NodeStartupControllerProxy<_AttributeExtensions...>::RegisterWithLUCAsync(RegisterWithLUCAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->RegisterWithLUCAsync(_callback, _info);
}
/**
 * description: FinishLUCRegistration:        Finishes the LUC registration sequence and
 *   atomically replaces the       previous LUC.       consumer.
 * author: Giridhar
 */
template <typename ... _AttributeExtensions>
void NodeStartupControllerProxy<_AttributeExtensions...>::FinishLUCRegistration(CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->FinishLUCRegistration(_internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> NodeStartupControllerProxy<_AttributeExtensions...>::FinishLUCRegistrationAsync(FinishLUCRegistrationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->FinishLUCRegistrationAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &NodeStartupControllerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool NodeStartupControllerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool NodeStartupControllerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& NodeStartupControllerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& NodeStartupControllerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace NodeStartupController1
} // namespace genivi
} // namespace org
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_NODESTARTUPCONTROLLER1_Node_Startup_Controller_PROXY_HPP_
