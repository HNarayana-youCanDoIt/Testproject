/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_pprestypes_HPP_
#define V1_COM_HARMAN_PRES_pprestypes_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

struct pprestypes {
    
    struct eSessionStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SESSION_NONE = 0,
            SESSION_ACTIVATING = 1,
            SESSION_ACTIVATED = 2,
            SESSION_DEACTIVATED = 3,
            SESSION_ERROR = 4,
            SESSION_RECONNECT = 5,
            SESSION_WPNOT_SUPPORTED = 6,
            SESSION_WPNOT_AVAILABLE = 7,
            SESSION_DELETEDEVICE = 8,
            SESSION_UNKNOWNERROR = 9
        };
        
        eSessionStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SESSION_NONE)) {}
        eSessionStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SESSION_NONE):
                case static_cast<int32_t>(Literal::SESSION_ACTIVATING):
                case static_cast<int32_t>(Literal::SESSION_ACTIVATED):
                case static_cast<int32_t>(Literal::SESSION_DEACTIVATED):
                case static_cast<int32_t>(Literal::SESSION_ERROR):
                case static_cast<int32_t>(Literal::SESSION_RECONNECT):
                case static_cast<int32_t>(Literal::SESSION_WPNOT_SUPPORTED):
                case static_cast<int32_t>(Literal::SESSION_WPNOT_AVAILABLE):
                case static_cast<int32_t>(Literal::SESSION_DELETEDEVICE):
                case static_cast<int32_t>(Literal::SESSION_UNKNOWNERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSessionStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSessionStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSessionStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSessionStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSessionStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSessionStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eMetadataType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            METADATATYPE_UNKNOWN = 0,
            METADATATYPE_NAME = 1,
            METADATATYPE_TITLE = 2,
            METADATATYPE_ARTIST = 4,
            METADATATYPE_NORMALIZEDARTIST = 8,
            METADATATYPE_ALBUMARTIST = 16,
            METADATATYPE_ALBUM = 32,
            METADATATYPE_GENRE = 64,
            METADATATYPE_COVERART = 128,
            METADTATATYPE_PLAYLIST = 256,
            METADTATATYPE_AUDIOBOOK = 1024,
            METADTATATYPE_CHAPTER = 2048,
            METADTATATYPE_PODCAST = 4096,
            METADTATATYPE_EPISODE = 8192,
            METADATATYPE_CATEGORY = 16384,
            METADATATYPE_FILE = 32768,
            METADATATYPE_COMPOSER = 65536,
            METADATATYPE_FOLDER = 131072,
            METADATATYPE_RELEASEDATE = 262144,
            METADATATYPE_YEAR = 524288,
            METADATATYPE_DECADE = 1048576,
            METADATATYPE_DURATION = 2097152,
            METADATATYPE_VIDEO = 4194304,
            METADATATYPE_KEYWORDS = 8388608,
            METADATATYPE_BPM = 16777216,
            METADATATYPE_TRACKNUM = 33554432,
            METADATATYPE_IMAGE = 67108864,
            METADATATYPE_MEDIUMID = 134217728,
            METADATATYPE_COMPILATION = 268435456,
            METADATATYPE_RATING = 536870912,
            METADATATYPE_CONDUCTOR = 1073741824
        };
        
        eMetadataType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::METADATATYPE_UNKNOWN)) {}
        eMetadataType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::METADATATYPE_UNKNOWN):
                case static_cast<int32_t>(Literal::METADATATYPE_NAME):
                case static_cast<int32_t>(Literal::METADATATYPE_TITLE):
                case static_cast<int32_t>(Literal::METADATATYPE_ARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_NORMALIZEDARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_ALBUMARTIST):
                case static_cast<int32_t>(Literal::METADATATYPE_ALBUM):
                case static_cast<int32_t>(Literal::METADATATYPE_GENRE):
                case static_cast<int32_t>(Literal::METADATATYPE_COVERART):
                case static_cast<int32_t>(Literal::METADTATATYPE_PLAYLIST):
                case static_cast<int32_t>(Literal::METADTATATYPE_AUDIOBOOK):
                case static_cast<int32_t>(Literal::METADTATATYPE_CHAPTER):
                case static_cast<int32_t>(Literal::METADTATATYPE_PODCAST):
                case static_cast<int32_t>(Literal::METADTATATYPE_EPISODE):
                case static_cast<int32_t>(Literal::METADATATYPE_CATEGORY):
                case static_cast<int32_t>(Literal::METADATATYPE_FILE):
                case static_cast<int32_t>(Literal::METADATATYPE_COMPOSER):
                case static_cast<int32_t>(Literal::METADATATYPE_FOLDER):
                case static_cast<int32_t>(Literal::METADATATYPE_RELEASEDATE):
                case static_cast<int32_t>(Literal::METADATATYPE_YEAR):
                case static_cast<int32_t>(Literal::METADATATYPE_DECADE):
                case static_cast<int32_t>(Literal::METADATATYPE_DURATION):
                case static_cast<int32_t>(Literal::METADATATYPE_VIDEO):
                case static_cast<int32_t>(Literal::METADATATYPE_KEYWORDS):
                case static_cast<int32_t>(Literal::METADATATYPE_BPM):
                case static_cast<int32_t>(Literal::METADATATYPE_TRACKNUM):
                case static_cast<int32_t>(Literal::METADATATYPE_IMAGE):
                case static_cast<int32_t>(Literal::METADATATYPE_MEDIUMID):
                case static_cast<int32_t>(Literal::METADATATYPE_COMPILATION):
                case static_cast<int32_t>(Literal::METADATATYPE_RATING):
                case static_cast<int32_t>(Literal::METADATATYPE_CONDUCTOR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eMetadataType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eMetadataType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eMetadataType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eMetadataType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eMetadataType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eMetadataType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eArtWorkAvailabilityStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ARTWORK_STATUS_AVAILABLE = 0,
            ARTWORK_STATUS_UNAVAILABLE = 1,
            ARTWORK_STATUS_UNKNOWN = 2,
            ARTWORK_NOT_SUPPORTED = 3
        };
        
        eArtWorkAvailabilityStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ARTWORK_STATUS_AVAILABLE)) {}
        eArtWorkAvailabilityStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_AVAILABLE):
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_UNAVAILABLE):
                case static_cast<int32_t>(Literal::ARTWORK_STATUS_UNKNOWN):
                case static_cast<int32_t>(Literal::ARTWORK_NOT_SUPPORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eArtWorkAvailabilityStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eArtWorkAvailabilityStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eArtWorkAvailabilityStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eArtWorkAvailabilityStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eArtWorkAvailabilityStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eArtWorkAvailabilityStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct sArtWorkImagePositionType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ALBUMART_POSITION_TIME = 0,
            ALBUMART_POSITION_CHAPTERNUMBER = 1,
            ALBUMART_POSITION_NONE = 2
        };
        
        sArtWorkImagePositionType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ALBUMART_POSITION_TIME)) {}
        sArtWorkImagePositionType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_TIME):
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_CHAPTERNUMBER):
                case static_cast<int32_t>(Literal::ALBUMART_POSITION_NONE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const sArtWorkImagePositionType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const sArtWorkImagePositionType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const sArtWorkImagePositionType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const sArtWorkImagePositionType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const sArtWorkImagePositionType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const sArtWorkImagePositionType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ePlayState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PLAYSTATE_PLAYING = 0,
            PLAYSTATE_PAUSED = 1,
            PLAYSTATE_STOPPED = 2,
            PLAYSTATE_FASTFORWARD = 3,
            PLAYSTATE_FASTREVERSE = 4,
            PLAYSTATE_ERROR = 5,
            PLAYSTATE_UNKNOWN = 6
        };
        
        ePlayState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PLAYSTATE_PLAYING)) {}
        ePlayState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PLAYSTATE_PLAYING):
                case static_cast<int32_t>(Literal::PLAYSTATE_PAUSED):
                case static_cast<int32_t>(Literal::PLAYSTATE_STOPPED):
                case static_cast<int32_t>(Literal::PLAYSTATE_FASTFORWARD):
                case static_cast<int32_t>(Literal::PLAYSTATE_FASTREVERSE):
                case static_cast<int32_t>(Literal::PLAYSTATE_ERROR):
                case static_cast<int32_t>(Literal::PLAYSTATE_UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ePlayState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ePlayState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ePlayState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ePlayState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ePlayState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ePlayState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTransportType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TRANSPORT_NONE = 0,
            TRANSPORT_USB = 1,
            TRANSPORT_WIFI = 2
        };
        
        eTransportType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TRANSPORT_NONE)) {}
        eTransportType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TRANSPORT_NONE):
                case static_cast<int32_t>(Literal::TRANSPORT_USB):
                case static_cast<int32_t>(Literal::TRANSPORT_WIFI):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTransportType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTransportType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTransportType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTransportType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTransportType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTransportType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eCallResult : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CALLRESULT_OK = 0,
            CALLRESULT_CANCELLED_USER_REQUEST = 1,
            CALLRESULT_BAD_PARAMETER = 2,
            CALLRESULT_FAILED_MEDIUM_REMOVED = 3,
            CALLRESULT_FAILED_INTERNALERROR = 4,
            CALLRESULT_FAILED_NORES = 5
        };
        
        eCallResult() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CALLRESULT_OK)) {}
        eCallResult(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CALLRESULT_OK):
                case static_cast<int32_t>(Literal::CALLRESULT_CANCELLED_USER_REQUEST):
                case static_cast<int32_t>(Literal::CALLRESULT_BAD_PARAMETER):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_MEDIUM_REMOVED):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_INTERNALERROR):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_NORES):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallResult &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eCallState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            STATUS_DISCONNECTED = 0,
            STATUS_SENDING = 1,
            STATUS_RINGING = 2,
            STATUS_CONNECTING = 3,
            STATUS_ACTIVE = 4,
            STATUS_HOLD = 5,
            STATUS_DISCONNECTING = 6
        };
        
        eCallState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::STATUS_DISCONNECTED)) {}
        eCallState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::STATUS_DISCONNECTED):
                case static_cast<int32_t>(Literal::STATUS_SENDING):
                case static_cast<int32_t>(Literal::STATUS_RINGING):
                case static_cast<int32_t>(Literal::STATUS_CONNECTING):
                case static_cast<int32_t>(Literal::STATUS_ACTIVE):
                case static_cast<int32_t>(Literal::STATUS_HOLD):
                case static_cast<int32_t>(Literal::STATUS_DISCONNECTING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eCallDirection : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DIRECTION_UNKNOWN = 0,
            DIRECTION_INCOMING = 1,
            DIRECTION_OUTGOING = 2
        };
        
        eCallDirection() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DIRECTION_UNKNOWN)) {}
        eCallDirection(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DIRECTION_UNKNOWN):
                case static_cast<int32_t>(Literal::DIRECTION_INCOMING):
                case static_cast<int32_t>(Literal::DIRECTION_OUTGOING):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallDirection &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallDirection &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallDirection &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallDirection &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallDirection &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallDirection &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enTelephonySignalStrength : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ZERO_BARS = 0,
            ONE_BARS = 1,
            TWO_BARS = 2,
            THREE_BARS = 3,
            FOUR_BARS = 4,
            FIVE_BARS = 5
        };
        
        enTelephonySignalStrength() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ZERO_BARS)) {}
        enTelephonySignalStrength(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ZERO_BARS):
                case static_cast<int32_t>(Literal::ONE_BARS):
                case static_cast<int32_t>(Literal::TWO_BARS):
                case static_cast<int32_t>(Literal::THREE_BARS):
                case static_cast<int32_t>(Literal::FOUR_BARS):
                case static_cast<int32_t>(Literal::FIVE_BARS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enTelephonySignalStrength &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enTelephonySignalStrength &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enTelephonySignalStrength &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enTelephonySignalStrength &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enTelephonySignalStrength &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enTelephonySignalStrength &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enTelephonyRegistrationStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            UNKNOWN = 0,
            NOT_REGISTERED = 1,
            SEARCHING = 2,
            DENIED = 3,
            REGISTERED_HOME = 4,
            ROAMING = 5,
            EMERGENCY_CALLS_ONLY = 6
        };
        
        enTelephonyRegistrationStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::UNKNOWN)) {}
        enTelephonyRegistrationStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::UNKNOWN):
                case static_cast<int32_t>(Literal::NOT_REGISTERED):
                case static_cast<int32_t>(Literal::SEARCHING):
                case static_cast<int32_t>(Literal::DENIED):
                case static_cast<int32_t>(Literal::REGISTERED_HOME):
                case static_cast<int32_t>(Literal::ROAMING):
                case static_cast<int32_t>(Literal::EMERGENCY_CALLS_ONLY):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enTelephonyRegistrationStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enTelephonyRegistrationStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enTelephonyRegistrationStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enTelephonyRegistrationStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enTelephonyRegistrationStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enTelephonyRegistrationStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct tTelephonyUpdate : CommonAPI::Struct<enTelephonySignalStrength, enTelephonyRegistrationStatus, bool, std::string, bool, bool, bool, bool, bool, uint8_t, uint8_t, bool, bool, bool, bool, bool, bool> {
    	
    	tTelephonyUpdate() {
    		std::get<2>(values_) = false;
    		std::get<4>(values_) = false;
    		std::get<5>(values_) = false;
    		std::get<6>(values_) = false;
    		std::get<7>(values_) = false;
    		std::get<8>(values_) = false;
    		std::get<11>(values_) = false;
    		std::get<12>(values_) = false;
    		std::get<13>(values_) = false;
    		std::get<14>(values_) = false;
    		std::get<15>(values_) = false;
    		std::get<16>(values_) = false;
    	}
    	tTelephonyUpdate(const enTelephonySignalStrength &_telephonySignalStrength, const enTelephonyRegistrationStatus &_telephonyRegistrationStatus, const bool &_telephonyAirplaneModeStatus, const std::string &_carrierName, const bool &_cellularSupported, const bool &_telephonyEnabled, const bool &_faceTimeAudioEnabled, const bool &_faceTimeVideoEnabled, const bool &_muteStatus, const uint8_t &_currentCallCount, const uint8_t &_newVoiceMailCount, const bool &_initiateCallAvailable, const bool &_endAndAcceptAvailable, const bool &_holdAndAcceptAvailable, const bool &_swapAvaialable, const bool &_mergeAvaialable, const bool &_holdAvaialable)
    	{
    		std::get<0>(values_) = _telephonySignalStrength;
    		std::get<1>(values_) = _telephonyRegistrationStatus;
    		std::get<2>(values_) = _telephonyAirplaneModeStatus;
    		std::get<3>(values_) = _carrierName;
    		std::get<4>(values_) = _cellularSupported;
    		std::get<5>(values_) = _telephonyEnabled;
    		std::get<6>(values_) = _faceTimeAudioEnabled;
    		std::get<7>(values_) = _faceTimeVideoEnabled;
    		std::get<8>(values_) = _muteStatus;
    		std::get<9>(values_) = _currentCallCount;
    		std::get<10>(values_) = _newVoiceMailCount;
    		std::get<11>(values_) = _initiateCallAvailable;
    		std::get<12>(values_) = _endAndAcceptAvailable;
    		std::get<13>(values_) = _holdAndAcceptAvailable;
    		std::get<14>(values_) = _swapAvaialable;
    		std::get<15>(values_) = _mergeAvaialable;
    		std::get<16>(values_) = _holdAvaialable;
    	}
    	inline const enTelephonySignalStrength &getTelephonySignalStrength() const { return std::get<0>(values_); }
    	inline void setTelephonySignalStrength(const enTelephonySignalStrength &_value) { std::get<0>(values_) = _value; }
    	inline const enTelephonyRegistrationStatus &getTelephonyRegistrationStatus() const { return std::get<1>(values_); }
    	inline void setTelephonyRegistrationStatus(const enTelephonyRegistrationStatus &_value) { std::get<1>(values_) = _value; }
    	inline const bool &getTelephonyAirplaneModeStatus() const { return std::get<2>(values_); }
    	inline void setTelephonyAirplaneModeStatus(const bool _value) { std::get<2>(values_) = _value; }
    	inline const std::string &getCarrierName() const { return std::get<3>(values_); }
    	inline void setCarrierName(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const bool &getCellularSupported() const { return std::get<4>(values_); }
    	inline void setCellularSupported(const bool _value) { std::get<4>(values_) = _value; }
    	inline const bool &getTelephonyEnabled() const { return std::get<5>(values_); }
    	inline void setTelephonyEnabled(const bool _value) { std::get<5>(values_) = _value; }
    	inline const bool &getFaceTimeAudioEnabled() const { return std::get<6>(values_); }
    	inline void setFaceTimeAudioEnabled(const bool _value) { std::get<6>(values_) = _value; }
    	inline const bool &getFaceTimeVideoEnabled() const { return std::get<7>(values_); }
    	inline void setFaceTimeVideoEnabled(const bool _value) { std::get<7>(values_) = _value; }
    	inline const bool &getMuteStatus() const { return std::get<8>(values_); }
    	inline void setMuteStatus(const bool _value) { std::get<8>(values_) = _value; }
    	inline const uint8_t &getCurrentCallCount() const { return std::get<9>(values_); }
    	inline void setCurrentCallCount(const uint8_t &_value) { std::get<9>(values_) = _value; }
    	inline const uint8_t &getNewVoiceMailCount() const { return std::get<10>(values_); }
    	inline void setNewVoiceMailCount(const uint8_t &_value) { std::get<10>(values_) = _value; }
    	inline const bool &getInitiateCallAvailable() const { return std::get<11>(values_); }
    	inline void setInitiateCallAvailable(const bool _value) { std::get<11>(values_) = _value; }
    	inline const bool &getEndAndAcceptAvailable() const { return std::get<12>(values_); }
    	inline void setEndAndAcceptAvailable(const bool _value) { std::get<12>(values_) = _value; }
    	inline const bool &getHoldAndAcceptAvailable() const { return std::get<13>(values_); }
    	inline void setHoldAndAcceptAvailable(const bool _value) { std::get<13>(values_) = _value; }
    	inline const bool &getSwapAvaialable() const { return std::get<14>(values_); }
    	inline void setSwapAvaialable(const bool _value) { std::get<14>(values_) = _value; }
    	inline const bool &getMergeAvaialable() const { return std::get<15>(values_); }
    	inline void setMergeAvaialable(const bool _value) { std::get<15>(values_) = _value; }
    	inline const bool &getHoldAvaialable() const { return std::get<16>(values_); }
    	inline void setHoldAvaialable(const bool _value) { std::get<16>(values_) = _value; }
    	inline bool operator==(const tTelephonyUpdate& _other) const {
                return (getTelephonySignalStrength() == _other.getTelephonySignalStrength() && getTelephonyRegistrationStatus() == _other.getTelephonyRegistrationStatus() && getTelephonyAirplaneModeStatus() == _other.getTelephonyAirplaneModeStatus() && getCarrierName() == _other.getCarrierName() && getCellularSupported() == _other.getCellularSupported() && getTelephonyEnabled() == _other.getTelephonyEnabled() && getFaceTimeAudioEnabled() == _other.getFaceTimeAudioEnabled() && getFaceTimeVideoEnabled() == _other.getFaceTimeVideoEnabled() && getMuteStatus() == _other.getMuteStatus() && getCurrentCallCount() == _other.getCurrentCallCount() && getNewVoiceMailCount() == _other.getNewVoiceMailCount() && getInitiateCallAvailable() == _other.getInitiateCallAvailable() && getEndAndAcceptAvailable() == _other.getEndAndAcceptAvailable() && getHoldAndAcceptAvailable() == _other.getHoldAndAcceptAvailable() && getSwapAvaialable() == _other.getSwapAvaialable() && getMergeAvaialable() == _other.getMergeAvaialable() && getHoldAvaialable() == _other.getHoldAvaialable());
        }
    	inline bool operator!=(const tTelephonyUpdate &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct tTrackTimePosition : CommonAPI::Struct<uint32_t, uint32_t> {
    	
    	tTrackTimePosition() {
    	}
    	tTrackTimePosition(const uint32_t &_totalDuration, const uint32_t &_trackPosiiton)
    	{
    		std::get<0>(values_) = _totalDuration;
    		std::get<1>(values_) = _trackPosiiton;
    	}
    	inline const uint32_t &getTotalDuration() const { return std::get<0>(values_); }
    	inline void setTotalDuration(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getTrackPosiiton() const { return std::get<1>(values_); }
    	inline void setTrackPosiiton(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const tTrackTimePosition& _other) const {
                return (getTotalDuration() == _other.getTotalDuration() && getTrackPosiiton() == _other.getTrackPosiiton());
        }
    	inline bool operator!=(const tTrackTimePosition &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Base data structure 	devName : device name 	btAddress : bt address of the
     *   device 	status : status of the session
     */
    struct sDevDetails : CommonAPI::Struct<std::string, std::string, std::string, bool, eTransportType> {
    	
    	sDevDetails() {
    		std::get<3>(values_) = false;
    	}
    	sDevDetails(const std::string &_devName, const std::string &_btAddress, const std::string &_usbSerialNo, const bool &_isConnected, const eTransportType &_transport)
    	{
    		std::get<0>(values_) = _devName;
    		std::get<1>(values_) = _btAddress;
    		std::get<2>(values_) = _usbSerialNo;
    		std::get<3>(values_) = _isConnected;
    		std::get<4>(values_) = _transport;
    	}
    	inline const std::string &getDevName() const { return std::get<0>(values_); }
    	inline void setDevName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getBtAddress() const { return std::get<1>(values_); }
    	inline void setBtAddress(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getUsbSerialNo() const { return std::get<2>(values_); }
    	inline void setUsbSerialNo(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const bool &getIsConnected() const { return std::get<3>(values_); }
    	inline void setIsConnected(const bool _value) { std::get<3>(values_) = _value; }
    	inline const eTransportType &getTransport() const { return std::get<4>(values_); }
    	inline void setTransport(const eTransportType &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const sDevDetails& _other) const {
                return (getDevName() == _other.getDevName() && getBtAddress() == _other.getBtAddress() && getUsbSerialNo() == _other.getUsbSerialNo() && getIsConnected() == _other.getIsConnected() && getTransport() == _other.getTransport());
        }
    	inline bool operator!=(const sDevDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Data structure holding session details 	transport : type of transport
     */
    struct sSessionDetails : CommonAPI::Struct<std::string, std::string, std::string, bool, eTransportType, eSessionStatus, bool> {
    	
    	sSessionDetails() {
    		std::get<3>(values_) = false;
    		std::get<6>(values_) = false;
    	}
    	sSessionDetails(const std::string &_devName, const std::string &_btAddress, const std::string &_usbSerialNo, const bool &_isConnected, const eTransportType &_transport, const eSessionStatus &_status, const bool &_remoteUI)
    	{
    		std::get<0>(values_) = _devName;
    		std::get<1>(values_) = _btAddress;
    		std::get<2>(values_) = _usbSerialNo;
    		std::get<3>(values_) = _isConnected;
    		std::get<4>(values_) = _transport;
    		std::get<5>(values_) = _status;
    		std::get<6>(values_) = _remoteUI;
    	}
    	inline const std::string &getDevName() const { return std::get<0>(values_); }
    	inline void setDevName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getBtAddress() const { return std::get<1>(values_); }
    	inline void setBtAddress(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getUsbSerialNo() const { return std::get<2>(values_); }
    	inline void setUsbSerialNo(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const bool &getIsConnected() const { return std::get<3>(values_); }
    	inline void setIsConnected(const bool _value) { std::get<3>(values_) = _value; }
    	inline const eTransportType &getTransport() const { return std::get<4>(values_); }
    	inline void setTransport(const eTransportType &_value) { std::get<4>(values_) = _value; }
    	inline const eSessionStatus &getStatus() const { return std::get<5>(values_); }
    	inline void setStatus(const eSessionStatus &_value) { std::get<5>(values_) = _value; }
    	inline const bool &getRemoteUI() const { return std::get<6>(values_); }
    	inline void setRemoteUI(const bool _value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const sSessionDetails& _other) const {
                return (getDevName() == _other.getDevName() && getBtAddress() == _other.getBtAddress() && getUsbSerialNo() == _other.getUsbSerialNo() && getIsConnected() == _other.getIsConnected() && getTransport() == _other.getTransport() && getStatus() == _other.getStatus() && getRemoteUI() == _other.getRemoteUI());
        }
    	inline bool operator!=(const sSessionDetails &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Data Structure to hold the device batteryLevel info
     * param: batteryLevelPercentage The current battery percentage of the mobile device.
     * param: timeRemainingS An estimate of how long the battery will last, in seconds.
     * param: isBatteryCritical Whether the mobile device's battery is at a critical level,
     *   as determined by the mobile device.
     */
    struct sBatteryLevelInfo : CommonAPI::Struct<int32_t, int32_t, bool> {
    	
    	sBatteryLevelInfo() {
    		std::get<2>(values_) = false;
    	}
    	sBatteryLevelInfo(const int32_t &_batteryLevelPercentage, const int32_t &_timeRemainingSec, const bool &_isBatteryCritical)
    	{
    		std::get<0>(values_) = _batteryLevelPercentage;
    		std::get<1>(values_) = _timeRemainingSec;
    		std::get<2>(values_) = _isBatteryCritical;
    	}
    	inline const int32_t &getBatteryLevelPercentage() const { return std::get<0>(values_); }
    	inline void setBatteryLevelPercentage(const int32_t &_value) { std::get<0>(values_) = _value; }
    	inline const int32_t &getTimeRemainingSec() const { return std::get<1>(values_); }
    	inline void setTimeRemainingSec(const int32_t &_value) { std::get<1>(values_) = _value; }
    	inline const bool &getIsBatteryCritical() const { return std::get<2>(values_); }
    	inline void setIsBatteryCritical(const bool _value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const sBatteryLevelInfo& _other) const {
                return (getBatteryLevelPercentage() == _other.getBatteryLevelPercentage() && getTimeRemainingSec() == _other.getTimeRemainingSec() && getIsBatteryCritical() == _other.getIsBatteryCritical());
        }
    	inline bool operator!=(const sBatteryLevelInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct sMediaPlayState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            STOPPED = 1,
            PLAYING = 2,
            PAUSED = 3
        };
        
        sMediaPlayState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::STOPPED)) {}
        sMediaPlayState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::STOPPED):
                case static_cast<int32_t>(Literal::PLAYING):
                case static_cast<int32_t>(Literal::PAUSED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const sMediaPlayState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const sMediaPlayState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const sMediaPlayState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const sMediaPlayState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const sMediaPlayState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const sMediaPlayState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct sMediaPlaybackStatusUpdate : CommonAPI::Struct<sMediaPlayState, std::string, uint32_t, bool, bool, bool> {
    	
    	sMediaPlaybackStatusUpdate() {
    		std::get<3>(values_) = false;
    		std::get<4>(values_) = false;
    		std::get<5>(values_) = false;
    	}
    	sMediaPlaybackStatusUpdate(const sMediaPlayState &_playState, const std::string &_source, const uint32_t &_elapsedTime, const bool &_isShuffleOn, const bool &_isRepeatOn, const bool &_isRepeatSong)
    	{
    		std::get<0>(values_) = _playState;
    		std::get<1>(values_) = _source;
    		std::get<2>(values_) = _elapsedTime;
    		std::get<3>(values_) = _isShuffleOn;
    		std::get<4>(values_) = _isRepeatOn;
    		std::get<5>(values_) = _isRepeatSong;
    	}
    	inline const sMediaPlayState &getPlayState() const { return std::get<0>(values_); }
    	inline void setPlayState(const sMediaPlayState &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getSource() const { return std::get<1>(values_); }
    	inline void setSource(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getElapsedTime() const { return std::get<2>(values_); }
    	inline void setElapsedTime(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const bool &getIsShuffleOn() const { return std::get<3>(values_); }
    	inline void setIsShuffleOn(const bool _value) { std::get<3>(values_) = _value; }
    	inline const bool &getIsRepeatOn() const { return std::get<4>(values_); }
    	inline void setIsRepeatOn(const bool _value) { std::get<4>(values_) = _value; }
    	inline const bool &getIsRepeatSong() const { return std::get<5>(values_); }
    	inline void setIsRepeatSong(const bool _value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const sMediaPlaybackStatusUpdate& _other) const {
                return (getPlayState() == _other.getPlayState() && getSource() == _other.getSource() && getElapsedTime() == _other.getElapsedTime() && getIsShuffleOn() == _other.getIsShuffleOn() && getIsRepeatOn() == _other.getIsRepeatOn() && getIsRepeatSong() == _other.getIsRepeatSong());
        }
    	inline bool operator!=(const sMediaPlaybackStatusUpdate &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sMetaDataUpdate : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, uint32_t, int32_t> {
    	
    	sMetaDataUpdate() {
    	}
    	sMetaDataUpdate(const std::string &_songName, const std::string &_albumName, const std::string &_artistName, const std::string &_songAlbumArt, const std::string &_playlist, const uint32_t &_time, const int32_t &_songRating)
    	{
    		std::get<0>(values_) = _songName;
    		std::get<1>(values_) = _albumName;
    		std::get<2>(values_) = _artistName;
    		std::get<3>(values_) = _songAlbumArt;
    		std::get<4>(values_) = _playlist;
    		std::get<5>(values_) = _time;
    		std::get<6>(values_) = _songRating;
    	}
    	inline const std::string &getSongName() const { return std::get<0>(values_); }
    	inline void setSongName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getAlbumName() const { return std::get<1>(values_); }
    	inline void setAlbumName(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getArtistName() const { return std::get<2>(values_); }
    	inline void setArtistName(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getSongAlbumArt() const { return std::get<3>(values_); }
    	inline void setSongAlbumArt(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getPlaylist() const { return std::get<4>(values_); }
    	inline void setPlaylist(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const uint32_t &getTime() const { return std::get<5>(values_); }
    	inline void setTime(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline const int32_t &getSongRating() const { return std::get<6>(values_); }
    	inline void setSongRating(const int32_t &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const sMetaDataUpdate& _other) const {
                return (getSongName() == _other.getSongName() && getAlbumName() == _other.getAlbumName() && getArtistName() == _other.getArtistName() && getSongAlbumArt() == _other.getSongAlbumArt() && getPlaylist() == _other.getPlaylist() && getTime() == _other.getTime() && getSongRating() == _other.getSongRating());
        }
    	inline bool operator!=(const sMetaDataUpdate &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct nxtTurnSideType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NextTurnTurnSide_Left = 1,
            NextTurnTurnSide_Right = 2,
            NextTurnTurnSide_Unspecified = 3
        };
        
        nxtTurnSideType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NextTurnTurnSide_Left)) {}
        nxtTurnSideType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NextTurnTurnSide_Left):
                case static_cast<int32_t>(Literal::NextTurnTurnSide_Right):
                case static_cast<int32_t>(Literal::NextTurnTurnSide_Unspecified):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const nxtTurnSideType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const nxtTurnSideType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const nxtTurnSideType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const nxtTurnSideType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const nxtTurnSideType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const nxtTurnSideType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct nxtTurnEvent : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NextTurnEvent_Unknown = 0,
            NextTurnEvent_Depart = 1,
            NextTurnEvent_Name_Change = 2,
            NextTurnEvent_Slight_Turn = 3,
            NextTurnEvent_Turn = 4,
            NextTurnEvent_Sharp_Turn = 5,
            NextTurnEvent_U_Turn = 6,
            NextTurnEvent_On_Turn = 7,
            NextTurnEvent_Off_Ramp = 8,
            NextTurnEvent_Fork = 9,
            NextTurnEvent_Merge = 10,
            NextTurnEvent_RoundAbout_Enter = 11,
            NextTurnEvent_RoundAbout_Exit = 12,
            NextTurnEvent_RoundAbout_Enter_And_Exit = 13,
            NextTurnEvent_Stright = 14,
            NextTurnEvent_Ferry_Boat = 16,
            NextTurnEvent_Ferry_Train = 17,
            NextTurnEvent_Destination = 19
        };
        
        nxtTurnEvent() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NextTurnEvent_Unknown)) {}
        nxtTurnEvent(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NextTurnEvent_Unknown):
                case static_cast<int32_t>(Literal::NextTurnEvent_Depart):
                case static_cast<int32_t>(Literal::NextTurnEvent_Name_Change):
                case static_cast<int32_t>(Literal::NextTurnEvent_Slight_Turn):
                case static_cast<int32_t>(Literal::NextTurnEvent_Turn):
                case static_cast<int32_t>(Literal::NextTurnEvent_Sharp_Turn):
                case static_cast<int32_t>(Literal::NextTurnEvent_U_Turn):
                case static_cast<int32_t>(Literal::NextTurnEvent_On_Turn):
                case static_cast<int32_t>(Literal::NextTurnEvent_Off_Ramp):
                case static_cast<int32_t>(Literal::NextTurnEvent_Fork):
                case static_cast<int32_t>(Literal::NextTurnEvent_Merge):
                case static_cast<int32_t>(Literal::NextTurnEvent_RoundAbout_Enter):
                case static_cast<int32_t>(Literal::NextTurnEvent_RoundAbout_Exit):
                case static_cast<int32_t>(Literal::NextTurnEvent_RoundAbout_Enter_And_Exit):
                case static_cast<int32_t>(Literal::NextTurnEvent_Stright):
                case static_cast<int32_t>(Literal::NextTurnEvent_Ferry_Boat):
                case static_cast<int32_t>(Literal::NextTurnEvent_Ferry_Train):
                case static_cast<int32_t>(Literal::NextTurnEvent_Destination):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const nxtTurnEvent &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const nxtTurnEvent &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const nxtTurnEvent &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const nxtTurnEvent &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const nxtTurnEvent &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const nxtTurnEvent &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct sNaviNextTurnInfo : CommonAPI::Struct<std::string, nxtTurnSideType, nxtTurnEvent, std::string, int32_t, int32_t> {
    	
    	sNaviNextTurnInfo() {
    	}
    	sNaviNextTurnInfo(const std::string &_roadName, const nxtTurnSideType &_sideType, const nxtTurnEvent &_turnEvent, const std::string &_Image, const int32_t &_TurnAngle, const int32_t &_TurnNo)
    	{
    		std::get<0>(values_) = _roadName;
    		std::get<1>(values_) = _sideType;
    		std::get<2>(values_) = _turnEvent;
    		std::get<3>(values_) = _Image;
    		std::get<4>(values_) = _TurnAngle;
    		std::get<5>(values_) = _TurnNo;
    	}
    	inline const std::string &getRoadName() const { return std::get<0>(values_); }
    	inline void setRoadName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const nxtTurnSideType &getSideType() const { return std::get<1>(values_); }
    	inline void setSideType(const nxtTurnSideType &_value) { std::get<1>(values_) = _value; }
    	inline const nxtTurnEvent &getTurnEvent() const { return std::get<2>(values_); }
    	inline void setTurnEvent(const nxtTurnEvent &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getImage() const { return std::get<3>(values_); }
    	inline void setImage(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const int32_t &getTurnAngle() const { return std::get<4>(values_); }
    	inline void setTurnAngle(const int32_t &_value) { std::get<4>(values_) = _value; }
    	inline const int32_t &getTurnNo() const { return std::get<5>(values_); }
    	inline void setTurnNo(const int32_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const sNaviNextTurnInfo& _other) const {
                return (getRoadName() == _other.getRoadName() && getSideType() == _other.getSideType() && getTurnEvent() == _other.getTurnEvent() && getImage() == _other.getImage() && getTurnAngle() == _other.getTurnAngle() && getTurnNo() == _other.getTurnNo());
        }
    	inline bool operator!=(const sNaviNextTurnInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct nxtTurnDistEventDistUnitType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NextTurnDistanceEventDistanceUnits_Unknown = 0,
            NextTurnDistanceEventDistanceUnits_Meters = 1,
            NextTurnDistanceEventDistanceUnits_KiloMeters = 2,
            NextTurnDistanceEventDistanceUnits_KiloMeters_P1 = 3,
            NextTurnDistanceEventDistanceUnits_Miles = 4,
            NextTurnDistanceEventDistanceUnits_Miles_P1 = 5,
            NextTurnDistanceEventDistanceUnits_Feet = 6,
            NextTurnDistanceEventDistanceUnits_Yards = 7
        };
        
        nxtTurnDistEventDistUnitType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_Unknown)) {}
        nxtTurnDistEventDistUnitType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_Unknown):
                case static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_Meters):
                case static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_KiloMeters):
                case static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_KiloMeters_P1):
                case static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_Miles):
                case static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_Miles_P1):
                case static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_Feet):
                case static_cast<int32_t>(Literal::NextTurnDistanceEventDistanceUnits_Yards):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const nxtTurnDistEventDistUnitType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const nxtTurnDistEventDistUnitType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const nxtTurnDistEventDistUnitType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const nxtTurnDistEventDistUnitType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const nxtTurnDistEventDistUnitType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const nxtTurnDistEventDistUnitType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct navigationFocusType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NavFocus_Native = 1,
            NavFocus_Projected = 2,
            NavFocus_Unknown = 3
        };
        
        navigationFocusType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NavFocus_Native)) {}
        navigationFocusType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NavFocus_Native):
                case static_cast<int32_t>(Literal::NavFocus_Projected):
                case static_cast<int32_t>(Literal::NavFocus_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const navigationFocusType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const navigationFocusType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const navigationFocusType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const navigationFocusType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const navigationFocusType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const navigationFocusType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct navigationStatusType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NavigationStatus_Unavailable = 0,
            NavigationStatus_Active = 1,
            NavigationStatus_Inactive = 2,
            NavigationStatus_Unknown = 3
        };
        
        navigationStatusType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NavigationStatus_Unavailable)) {}
        navigationStatusType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NavigationStatus_Unavailable):
                case static_cast<int32_t>(Literal::NavigationStatus_Active):
                case static_cast<int32_t>(Literal::NavigationStatus_Inactive):
                case static_cast<int32_t>(Literal::NavigationStatus_Unknown):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const navigationStatusType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const navigationStatusType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const navigationStatusType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const navigationStatusType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const navigationStatusType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const navigationStatusType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct sNaviNextTurnDistInfo : CommonAPI::Struct<int32_t, int32_t, int32_t, nxtTurnDistEventDistUnitType> {
    	
    	sNaviNextTurnDistInfo() {
    	}
    	sNaviNextTurnDistInfo(const int32_t &_dist, const int32_t &_timeDuration, const int32_t &_displayDist, const nxtTurnDistEventDistUnitType &_unitType)
    	{
    		std::get<0>(values_) = _dist;
    		std::get<1>(values_) = _timeDuration;
    		std::get<2>(values_) = _displayDist;
    		std::get<3>(values_) = _unitType;
    	}
    	inline const int32_t &getDist() const { return std::get<0>(values_); }
    	inline void setDist(const int32_t &_value) { std::get<0>(values_) = _value; }
    	inline const int32_t &getTimeDuration() const { return std::get<1>(values_); }
    	inline void setTimeDuration(const int32_t &_value) { std::get<1>(values_) = _value; }
    	inline const int32_t &getDisplayDist() const { return std::get<2>(values_); }
    	inline void setDisplayDist(const int32_t &_value) { std::get<2>(values_) = _value; }
    	inline const nxtTurnDistEventDistUnitType &getUnitType() const { return std::get<3>(values_); }
    	inline void setUnitType(const nxtTurnDistEventDistUnitType &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sNaviNextTurnDistInfo& _other) const {
                return (getDist() == _other.getDist() && getTimeDuration() == _other.getTimeDuration() && getDisplayDist() == _other.getDisplayDist() && getUnitType() == _other.getUnitType());
        }
    	inline bool operator!=(const sNaviNextTurnDistInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sSongNodeUpdate : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, uint32_t> {
    	
    	sSongNodeUpdate() {
    	}
    	sSongNodeUpdate(const std::string &_songName, const std::string &_songPath, const std::string &_albumName, const std::string &_artistName, const std::string &_songAlbumArt, const uint32_t &_timeDuration)
    	{
    		std::get<0>(values_) = _songName;
    		std::get<1>(values_) = _songPath;
    		std::get<2>(values_) = _albumName;
    		std::get<3>(values_) = _artistName;
    		std::get<4>(values_) = _songAlbumArt;
    		std::get<5>(values_) = _timeDuration;
    	}
    	inline const std::string &getSongName() const { return std::get<0>(values_); }
    	inline void setSongName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getSongPath() const { return std::get<1>(values_); }
    	inline void setSongPath(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getAlbumName() const { return std::get<2>(values_); }
    	inline void setAlbumName(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getArtistName() const { return std::get<3>(values_); }
    	inline void setArtistName(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getSongAlbumArt() const { return std::get<4>(values_); }
    	inline void setSongAlbumArt(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const uint32_t &getTimeDuration() const { return std::get<5>(values_); }
    	inline void setTimeDuration(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline bool operator==(const sSongNodeUpdate& _other) const {
                return (getSongName() == _other.getSongName() && getSongPath() == _other.getSongPath() && getAlbumName() == _other.getAlbumName() && getArtistName() == _other.getArtistName() && getSongAlbumArt() == _other.getSongAlbumArt() && getTimeDuration() == _other.getTimeDuration());
        }
    	inline bool operator!=(const sSongNodeUpdate &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Data structure holding cover image details 	width : width of image 	height :
     *   height if image 	size : size of image 	description : description of image
     */
    struct sArtWorkImageProperty : CommonAPI::Struct<uint64_t, uint64_t, uint64_t, std::string> {
    	
    	sArtWorkImageProperty() {
    	}
    	sArtWorkImageProperty(const uint64_t &_width, const uint64_t &_height, const uint64_t &_size, const std::string &_description)
    	{
    		std::get<0>(values_) = _width;
    		std::get<1>(values_) = _height;
    		std::get<2>(values_) = _size;
    		std::get<3>(values_) = _description;
    	}
    	inline const uint64_t &getWidth() const { return std::get<0>(values_); }
    	inline void setWidth(const uint64_t &_value) { std::get<0>(values_) = _value; }
    	inline const uint64_t &getHeight() const { return std::get<1>(values_); }
    	inline void setHeight(const uint64_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint64_t &getSize() const { return std::get<2>(values_); }
    	inline void setSize(const uint64_t &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getDescription() const { return std::get<3>(values_); }
    	inline void setDescription(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sArtWorkImageProperty& _other) const {
                return (getWidth() == _other.getWidth() && getHeight() == _other.getHeight() && getSize() == _other.getSize() && getDescription() == _other.getDescription());
        }
    	inline bool operator!=(const sArtWorkImageProperty &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Data structure of image currently showing  	imageNumber : image index
     *   	tArtWorkImagePositionType : enum for image position type  	artWorkPosition
     *   :position of image 	tArtWorkImageProperty : structure holding image property
     */
    struct tArtWorkArtImage : CommonAPI::Struct<uint8_t, sArtWorkImagePositionType, uint64_t, sArtWorkImageProperty> {
    	
    	tArtWorkArtImage() {
    	}
    	tArtWorkArtImage(const uint8_t &_imageNumber, const sArtWorkImagePositionType &_positionType, const uint64_t &_artWorkPosition, const sArtWorkImageProperty &_property)
    	{
    		std::get<0>(values_) = _imageNumber;
    		std::get<1>(values_) = _positionType;
    		std::get<2>(values_) = _artWorkPosition;
    		std::get<3>(values_) = _property;
    	}
    	inline const uint8_t &getImageNumber() const { return std::get<0>(values_); }
    	inline void setImageNumber(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const sArtWorkImagePositionType &getPositionType() const { return std::get<1>(values_); }
    	inline void setPositionType(const sArtWorkImagePositionType &_value) { std::get<1>(values_) = _value; }
    	inline const uint64_t &getArtWorkPosition() const { return std::get<2>(values_); }
    	inline void setArtWorkPosition(const uint64_t &_value) { std::get<2>(values_) = _value; }
    	inline const sArtWorkImageProperty &getProperty() const { return std::get<3>(values_); }
    	inline void setProperty(const sArtWorkImageProperty &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const tArtWorkArtImage& _other) const {
                return (getImageNumber() == _other.getImageNumber() && getPositionType() == _other.getPositionType() && getArtWorkPosition() == _other.getArtWorkPosition() && getProperty() == _other.getProperty());
        }
    	inline bool operator!=(const tArtWorkArtImage &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<pprestypes::tArtWorkArtImage> artWorkImageInfo;
    /**
     * description: Data structure Album Art details 	totalImages : no if images 	artWorkImageInfo
     *   : array of tArtWorkArtImage
     */
    struct sAlbumArtInformation : CommonAPI::Struct<uint8_t, artWorkImageInfo> {
    	
    	sAlbumArtInformation() {
    	}
    	sAlbumArtInformation(const uint8_t &_totalImages, const artWorkImageInfo &_info)
    	{
    		std::get<0>(values_) = _totalImages;
    		std::get<1>(values_) = _info;
    	}
    	inline const uint8_t &getTotalImages() const { return std::get<0>(values_); }
    	inline void setTotalImages(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	inline const artWorkImageInfo &getInfo() const { return std::get<1>(values_); }
    	inline void setInfo(const artWorkImageInfo &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sAlbumArtInformation& _other) const {
                return (getTotalImages() == _other.getTotalImages() && getInfo() == _other.getInfo());
        }
    	inline bool operator!=(const sAlbumArtInformation &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Data structure of now playing songs.
     */
    struct sNowPlayingInfo : CommonAPI::Struct<std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, uint64_t, bool, uint64_t, uint64_t, uint64_t, bool, eMetadataType> {
    	
    	sNowPlayingInfo() {
    		std::get<11>(values_) = false;
    		std::get<15>(values_) = false;
    	}
    	sNowPlayingInfo(const std::string &_title, const std::string &_artist, const std::string &_album, const std::string &_genre, const std::string &_composer, const std::string &_filename, const std::string &_audiobook, const std::string &_podcast, const std::string &_episode, const std::string &_playlist, const uint64_t &_year, const bool &_chaptersAvailable, const uint64_t &_chapterNumber, const uint64_t &_mediumId, const uint64_t &_fid, const bool &_isFav, const eMetadataType &_nowPlayingItemType)
    	{
    		std::get<0>(values_) = _title;
    		std::get<1>(values_) = _artist;
    		std::get<2>(values_) = _album;
    		std::get<3>(values_) = _genre;
    		std::get<4>(values_) = _composer;
    		std::get<5>(values_) = _filename;
    		std::get<6>(values_) = _audiobook;
    		std::get<7>(values_) = _podcast;
    		std::get<8>(values_) = _episode;
    		std::get<9>(values_) = _playlist;
    		std::get<10>(values_) = _year;
    		std::get<11>(values_) = _chaptersAvailable;
    		std::get<12>(values_) = _chapterNumber;
    		std::get<13>(values_) = _mediumId;
    		std::get<14>(values_) = _fid;
    		std::get<15>(values_) = _isFav;
    		std::get<16>(values_) = _nowPlayingItemType;
    	}
    	inline const std::string &getTitle() const { return std::get<0>(values_); }
    	inline void setTitle(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getArtist() const { return std::get<1>(values_); }
    	inline void setArtist(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getAlbum() const { return std::get<2>(values_); }
    	inline void setAlbum(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getGenre() const { return std::get<3>(values_); }
    	inline void setGenre(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getComposer() const { return std::get<4>(values_); }
    	inline void setComposer(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getFilename() const { return std::get<5>(values_); }
    	inline void setFilename(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const std::string &getAudiobook() const { return std::get<6>(values_); }
    	inline void setAudiobook(const std::string &_value) { std::get<6>(values_) = _value; }
    	inline const std::string &getPodcast() const { return std::get<7>(values_); }
    	inline void setPodcast(const std::string &_value) { std::get<7>(values_) = _value; }
    	inline const std::string &getEpisode() const { return std::get<8>(values_); }
    	inline void setEpisode(const std::string &_value) { std::get<8>(values_) = _value; }
    	inline const std::string &getPlaylist() const { return std::get<9>(values_); }
    	inline void setPlaylist(const std::string &_value) { std::get<9>(values_) = _value; }
    	inline const uint64_t &getYear() const { return std::get<10>(values_); }
    	inline void setYear(const uint64_t &_value) { std::get<10>(values_) = _value; }
    	inline const bool &getChaptersAvailable() const { return std::get<11>(values_); }
    	inline void setChaptersAvailable(const bool _value) { std::get<11>(values_) = _value; }
    	inline const uint64_t &getChapterNumber() const { return std::get<12>(values_); }
    	inline void setChapterNumber(const uint64_t &_value) { std::get<12>(values_) = _value; }
    	inline const uint64_t &getMediumId() const { return std::get<13>(values_); }
    	inline void setMediumId(const uint64_t &_value) { std::get<13>(values_) = _value; }
    	inline const uint64_t &getFid() const { return std::get<14>(values_); }
    	inline void setFid(const uint64_t &_value) { std::get<14>(values_) = _value; }
    	inline const bool &getIsFav() const { return std::get<15>(values_); }
    	inline void setIsFav(const bool _value) { std::get<15>(values_) = _value; }
    	inline const eMetadataType &getNowPlayingItemType() const { return std::get<16>(values_); }
    	inline void setNowPlayingItemType(const eMetadataType &_value) { std::get<16>(values_) = _value; }
    	inline bool operator==(const sNowPlayingInfo& _other) const {
                return (getTitle() == _other.getTitle() && getArtist() == _other.getArtist() && getAlbum() == _other.getAlbum() && getGenre() == _other.getGenre() && getComposer() == _other.getComposer() && getFilename() == _other.getFilename() && getAudiobook() == _other.getAudiobook() && getPodcast() == _other.getPodcast() && getEpisode() == _other.getEpisode() && getPlaylist() == _other.getPlaylist() && getYear() == _other.getYear() && getChaptersAvailable() == _other.getChaptersAvailable() && getChapterNumber() == _other.getChapterNumber() && getMediumId() == _other.getMediumId() && getFid() == _other.getFid() && getIsFav() == _other.getIsFav() && getNowPlayingItemType() == _other.getNowPlayingItemType());
        }
    	inline bool operator!=(const sNowPlayingInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Data structure of current call state information.
     */
    struct sCallStateInfo : CommonAPI::Struct<eCallState, std::string, uint32_t, std::string, std::string, std::string, uint32_t, bool, bool, bool, bool, std::string, std::string, eCallDirection> {
    	
    	sCallStateInfo() {
    		std::get<7>(values_) = false;
    		std::get<8>(values_) = false;
    		std::get<9>(values_) = false;
    		std::get<10>(values_) = false;
    	}
    	sCallStateInfo(const eCallState &_cstate, const std::string &_number, const uint32_t &_contactId, const std::string &_name, const std::string &_imageUrl, const std::string &_reqNumber, const uint32_t &_callId, const bool &_callStateChanged, const bool &_inBand, const bool &_loc, const bool &_rhState, const std::string &_codec, const std::string &_audio, const eCallDirection &_callDirection)
    	{
    		std::get<0>(values_) = _cstate;
    		std::get<1>(values_) = _number;
    		std::get<2>(values_) = _contactId;
    		std::get<3>(values_) = _name;
    		std::get<4>(values_) = _imageUrl;
    		std::get<5>(values_) = _reqNumber;
    		std::get<6>(values_) = _callId;
    		std::get<7>(values_) = _callStateChanged;
    		std::get<8>(values_) = _inBand;
    		std::get<9>(values_) = _loc;
    		std::get<10>(values_) = _rhState;
    		std::get<11>(values_) = _codec;
    		std::get<12>(values_) = _audio;
    		std::get<13>(values_) = _callDirection;
    	}
    	inline const eCallState &getCstate() const { return std::get<0>(values_); }
    	inline void setCstate(const eCallState &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getNumber() const { return std::get<1>(values_); }
    	inline void setNumber(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getContactId() const { return std::get<2>(values_); }
    	inline void setContactId(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getName() const { return std::get<3>(values_); }
    	inline void setName(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const std::string &getImageUrl() const { return std::get<4>(values_); }
    	inline void setImageUrl(const std::string &_value) { std::get<4>(values_) = _value; }
    	inline const std::string &getReqNumber() const { return std::get<5>(values_); }
    	inline void setReqNumber(const std::string &_value) { std::get<5>(values_) = _value; }
    	inline const uint32_t &getCallId() const { return std::get<6>(values_); }
    	inline void setCallId(const uint32_t &_value) { std::get<6>(values_) = _value; }
    	inline const bool &getCallStateChanged() const { return std::get<7>(values_); }
    	inline void setCallStateChanged(const bool _value) { std::get<7>(values_) = _value; }
    	inline const bool &getInBand() const { return std::get<8>(values_); }
    	inline void setInBand(const bool _value) { std::get<8>(values_) = _value; }
    	inline const bool &getLoc() const { return std::get<9>(values_); }
    	inline void setLoc(const bool _value) { std::get<9>(values_) = _value; }
    	inline const bool &getRhState() const { return std::get<10>(values_); }
    	inline void setRhState(const bool _value) { std::get<10>(values_) = _value; }
    	inline const std::string &getCodec() const { return std::get<11>(values_); }
    	inline void setCodec(const std::string &_value) { std::get<11>(values_) = _value; }
    	inline const std::string &getAudio() const { return std::get<12>(values_); }
    	inline void setAudio(const std::string &_value) { std::get<12>(values_) = _value; }
    	inline const eCallDirection &getCallDirection() const { return std::get<13>(values_); }
    	inline void setCallDirection(const eCallDirection &_value) { std::get<13>(values_) = _value; }
    	inline bool operator==(const sCallStateInfo& _other) const {
                return (getCstate() == _other.getCstate() && getNumber() == _other.getNumber() && getContactId() == _other.getContactId() && getName() == _other.getName() && getImageUrl() == _other.getImageUrl() && getReqNumber() == _other.getReqNumber() && getCallId() == _other.getCallId() && getCallStateChanged() == _other.getCallStateChanged() && getInBand() == _other.getInBand() && getLoc() == _other.getLoc() && getRhState() == _other.getRhState() && getCodec() == _other.getCodec() && getAudio() == _other.getAudio() && getCallDirection() == _other.getCallDirection());
        }
    	inline bool operator!=(const sCallStateInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.pres.pprestypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 2);
}

}; // struct pprestypes

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for eSessionStatus
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::eSessionStatus> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::eSessionStatus& eSessionStatus) const {
            return static_cast<int32_t>(eSessionStatus);
        }
    };
    //Hash for eMetadataType
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::eMetadataType> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::eMetadataType& eMetadataType) const {
            return static_cast<int32_t>(eMetadataType);
        }
    };
    //Hash for eArtWorkAvailabilityStatus
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::eArtWorkAvailabilityStatus> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::eArtWorkAvailabilityStatus& eArtWorkAvailabilityStatus) const {
            return static_cast<int32_t>(eArtWorkAvailabilityStatus);
        }
    };
    //Hash for sArtWorkImagePositionType
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::sArtWorkImagePositionType> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::sArtWorkImagePositionType& sArtWorkImagePositionType) const {
            return static_cast<int32_t>(sArtWorkImagePositionType);
        }
    };
    //Hash for ePlayState
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::ePlayState> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::ePlayState& ePlayState) const {
            return static_cast<int32_t>(ePlayState);
        }
    };
    //Hash for eTransportType
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::eTransportType> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::eTransportType& eTransportType) const {
            return static_cast<int32_t>(eTransportType);
        }
    };
    //Hash for eCallResult
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::eCallResult> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::eCallResult& eCallResult) const {
            return static_cast<int32_t>(eCallResult);
        }
    };
    //Hash for eCallState
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::eCallState> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::eCallState& eCallState) const {
            return static_cast<int32_t>(eCallState);
        }
    };
    //Hash for eCallDirection
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::eCallDirection> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::eCallDirection& eCallDirection) const {
            return static_cast<int32_t>(eCallDirection);
        }
    };
    //Hash for enTelephonySignalStrength
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::enTelephonySignalStrength> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::enTelephonySignalStrength& enTelephonySignalStrength) const {
            return static_cast<int32_t>(enTelephonySignalStrength);
        }
    };
    //Hash for enTelephonyRegistrationStatus
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::enTelephonyRegistrationStatus> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::enTelephonyRegistrationStatus& enTelephonyRegistrationStatus) const {
            return static_cast<int32_t>(enTelephonyRegistrationStatus);
        }
    };
    //Hash for sMediaPlayState
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::sMediaPlayState> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::sMediaPlayState& sMediaPlayState) const {
            return static_cast<int32_t>(sMediaPlayState);
        }
    };
    //Hash for nxtTurnSideType
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::nxtTurnSideType> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::nxtTurnSideType& nxtTurnSideType) const {
            return static_cast<int32_t>(nxtTurnSideType);
        }
    };
    //Hash for nxtTurnEvent
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::nxtTurnEvent> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::nxtTurnEvent& nxtTurnEvent) const {
            return static_cast<int32_t>(nxtTurnEvent);
        }
    };
    //Hash for nxtTurnDistEventDistUnitType
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::nxtTurnDistEventDistUnitType> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::nxtTurnDistEventDistUnitType& nxtTurnDistEventDistUnitType) const {
            return static_cast<int32_t>(nxtTurnDistEventDistUnitType);
        }
    };
    //Hash for navigationFocusType
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::navigationFocusType> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::navigationFocusType& navigationFocusType) const {
            return static_cast<int32_t>(navigationFocusType);
        }
    };
    //Hash for navigationStatusType
    template<>
    struct hash<::v1::com::harman::pres::pprestypes::navigationStatusType> {
        inline size_t operator()(const ::v1::com::harman::pres::pprestypes::navigationStatusType& navigationStatusType) const {
            return static_cast<int32_t>(navigationStatusType);
        }
    };
}


// Compatibility
namespace v1_2 = v1;

#endif // V1_COM_HARMAN_PRES_pprestypes_HPP_
