/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Orinoco specific tuner introspection interface. This interface is a facade to a
 *   bunch of platform     interfaces in order to provide a simplified access to
 *   tuner diagnosis/engineering data and functionality.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2016
 */
#ifndef V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_PROXY_HPP_
#define V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_PROXY_HPP_

#include <v1/com/harman/tuner/OrinocoTunerIntrospectionProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace tuner {

template <typename ... _AttributeExtensions>
class OrinocoTunerIntrospectionProxy
    : virtual public OrinocoTunerIntrospection, 
      virtual public OrinocoTunerIntrospectionProxyBase,
      virtual public _AttributeExtensions... {
public:
    OrinocoTunerIntrospectionProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~OrinocoTunerIntrospectionProxy();

    typedef OrinocoTunerIntrospection InterfaceType;


    /**
     * description: List of power sync frequencies. The specific order and meaning of the entries
     *   is defined by a         project specific enum PowerSyncIndex
     */
    /**
     * Returns the wrapper class that provides access to the attribute powerSync.
     */
    virtual PowerSyncAttribute& getPowerSyncAttribute() {
        return delegate_->getPowerSyncAttribute();
    }
    /**
     * description: Antenna information
     */
    /**
     * Returns the wrapper class that provides access to the attribute antennaInfos.
     */
    virtual AntennaInfosAttribute& getAntennaInfosAttribute() {
        return delegate_->getAntennaInfosAttribute();
    }
    /**
     * description: Bitmask of tuner devices with enabled introspection mode        CAUTION: The
     *   introspection mode can lead to unexspected behavior and reduced functionality,
     *   don't forget to disable again!
     */
    /**
     * Returns the wrapper class that provides access to the attribute DevicesInIntrospectionMode.
     */
    virtual DevicesInIntrospectionModeAttribute& getDevicesInIntrospectionModeAttribute() {
        return delegate_->getDevicesInIntrospectionModeAttribute();
    }
    /**
     * description: Version information (e.g. firmware versions)
     */
    /**
     * Returns the wrapper class that provides access to the attribute VersionInfos.
     */
    virtual VersionInfosAttribute& getVersionInfosAttribute() {
        return delegate_->getVersionInfosAttribute();
    }
    /**
     * description: Active fatal errors
     */
    /**
     * Returns the wrapper class that provides access to the attribute ActiveErrors.
     */
    virtual ActiveErrorsAttribute& getActiveErrorsAttribute() {
        return delegate_->getActiveErrorsAttribute();
    }

    /**
     * description: Factory reset done
     */
    /**
     * Returns the wrapper class that provides access to the broadcast factoryReset.
     */
    virtual FactoryResetEvent& getFactoryResetEvent() {
        return delegate_->getFactoryResetEvent();
    }
    /**
     * description: Quality values. Only sent if enabled via controlQualityMonitor.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast qualityMonitor.
     */
    virtual QualityMonitorEvent& getQualityMonitorEvent() {
        return delegate_->getQualityMonitorEvent();
    }

    /**
     * description: Perform factory reset of peristent data, broadcast factoryReset will be called
     *   when done
     * Calls performFactoryReset with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void performFactoryReset(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode &_factoryResetMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls performFactoryReset with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> performFactoryResetAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode &_factoryResetMode, PerformFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Disable/enable antenna power supply. After toggling the power supply the
     *   corresponding "antennaInfo"        entry will change
     * Calls switchAntennaPowerSupply with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void switchAntennaPowerSupply(const std::string &_name, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls switchAntennaPowerSupply with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> switchAntennaPowerSupplyAsync(const std::string &_name, const bool &_enable, SwitchAntennaPowerSupplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Enable introspection mode        CAUTION: The introspection mode can lead to
     *   unexspected behavior and reduced functionality, don't forget to disable again!
     * Calls switchIntrospectionMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void switchIntrospectionMode(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls switchIntrospectionMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> switchIntrospectionModeAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const bool &_enable, SwitchIntrospectionModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Calls tune with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void tune(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const uint8_t &_deviceInstance, const uint32_t &_frequency, const std::string &_frequencyLabel, const bool &_automaticServiceSelection, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls tune with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> tuneAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const uint8_t &_deviceInstance, const uint32_t &_frequency, const std::string &_frequencyLabel, const bool &_automaticServiceSelection, TuneAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Start/stop sending the quality values for a specific device incl. cyclic
     *   updates (via qualityMonitor).
     * Calls controlQualityMonitor with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void controlQualityMonitor(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls controlQualityMonitor with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> controlQualityMonitorAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, ControlQualityMonitorAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<OrinocoTunerIntrospectionProxyBase> delegate_;
};

typedef OrinocoTunerIntrospectionProxy<> OrinocoTunerIntrospectionProxyDefault;

namespace OrinocoTunerIntrospectionExtensions {
    /**
     * description: List of power sync frequencies. The specific order and meaning of the entries
     *   is defined by a         project specific enum PowerSyncIndex
     */
    template <template <typename > class _ExtensionType>
    class PowerSyncAttributeExtension {
     public:
        typedef _ExtensionType<OrinocoTunerIntrospectionProxyBase::PowerSyncAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<OrinocoTunerIntrospectionProxyBase::PowerSyncAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PowerSyncAttributeExtension() {}
    #endif
    
        PowerSyncAttributeExtension(OrinocoTunerIntrospectionProxyBase& proxy): attributeExtension_(proxy.getPowerSyncAttribute()) {
        }
    
        inline extension_type& getPowerSyncAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Antenna information
     */
    template <template <typename > class _ExtensionType>
    class AntennaInfosAttributeExtension {
     public:
        typedef _ExtensionType<OrinocoTunerIntrospectionProxyBase::AntennaInfosAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<OrinocoTunerIntrospectionProxyBase::AntennaInfosAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AntennaInfosAttributeExtension() {}
    #endif
    
        AntennaInfosAttributeExtension(OrinocoTunerIntrospectionProxyBase& proxy): attributeExtension_(proxy.getAntennaInfosAttribute()) {
        }
    
        inline extension_type& getAntennaInfosAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Bitmask of tuner devices with enabled introspection mode        CAUTION: The
     *   introspection mode can lead to unexspected behavior and reduced functionality,
     *   don't forget to disable again!
     */
    template <template <typename > class _ExtensionType>
    class DevicesInIntrospectionModeAttributeExtension {
     public:
        typedef _ExtensionType<OrinocoTunerIntrospectionProxyBase::DevicesInIntrospectionModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<OrinocoTunerIntrospectionProxyBase::DevicesInIntrospectionModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DevicesInIntrospectionModeAttributeExtension() {}
    #endif
    
        DevicesInIntrospectionModeAttributeExtension(OrinocoTunerIntrospectionProxyBase& proxy): attributeExtension_(proxy.getDevicesInIntrospectionModeAttribute()) {
        }
    
        inline extension_type& getDevicesInIntrospectionModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Version information (e.g. firmware versions)
     */
    template <template <typename > class _ExtensionType>
    class VersionInfosAttributeExtension {
     public:
        typedef _ExtensionType<OrinocoTunerIntrospectionProxyBase::VersionInfosAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<OrinocoTunerIntrospectionProxyBase::VersionInfosAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VersionInfosAttributeExtension() {}
    #endif
    
        VersionInfosAttributeExtension(OrinocoTunerIntrospectionProxyBase& proxy): attributeExtension_(proxy.getVersionInfosAttribute()) {
        }
    
        inline extension_type& getVersionInfosAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Active fatal errors
     */
    template <template <typename > class _ExtensionType>
    class ActiveErrorsAttributeExtension {
     public:
        typedef _ExtensionType<OrinocoTunerIntrospectionProxyBase::ActiveErrorsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<OrinocoTunerIntrospectionProxyBase::ActiveErrorsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ActiveErrorsAttributeExtension() {}
    #endif
    
        ActiveErrorsAttributeExtension(OrinocoTunerIntrospectionProxyBase& proxy): attributeExtension_(proxy.getActiveErrorsAttribute()) {
        }
    
        inline extension_type& getActiveErrorsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace OrinocoTunerIntrospectionExtensions

//
// OrinocoTunerIntrospectionProxy Implementation
//
template <typename ... _AttributeExtensions>
OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::OrinocoTunerIntrospectionProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<OrinocoTunerIntrospectionProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<OrinocoTunerIntrospectionProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::~OrinocoTunerIntrospectionProxy() {
}

/**
 * description: Perform factory reset of peristent data, broadcast factoryReset will be called
 *   when done
 */
template <typename ... _AttributeExtensions>
void OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::performFactoryReset(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode &_factoryResetMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_factoryResetMode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->performFactoryReset(_factoryResetMode, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::performFactoryResetAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode &_factoryResetMode, PerformFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_factoryResetMode.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->performFactoryResetAsync(_factoryResetMode, _callback, _info);
}
/**
 * description: Disable/enable antenna power supply. After toggling the power supply the
 *   corresponding "antennaInfo"        entry will change
 */
template <typename ... _AttributeExtensions>
void OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::switchAntennaPowerSupply(const std::string &_name, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->switchAntennaPowerSupply(_name, _enable, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::switchAntennaPowerSupplyAsync(const std::string &_name, const bool &_enable, SwitchAntennaPowerSupplyAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->switchAntennaPowerSupplyAsync(_name, _enable, _callback, _info);
}
/**
 * description: Enable introspection mode        CAUTION: The introspection mode can lead to
 *   unexspected behavior and reduced functionality, don't forget to disable again!
 */
template <typename ... _AttributeExtensions>
void OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::switchIntrospectionMode(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_device.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->switchIntrospectionMode(_device, _enable, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::switchIntrospectionModeAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const bool &_enable, SwitchIntrospectionModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_device.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->switchIntrospectionModeAsync(_device, _enable, _callback, _info);
}
/**
 * description: 
 */
template <typename ... _AttributeExtensions>
void OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::tune(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const uint8_t &_deviceInstance, const uint32_t &_frequency, const std::string &_frequencyLabel, const bool &_automaticServiceSelection, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_device.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->tune(_device, _deviceInstance, _frequency, _frequencyLabel, _automaticServiceSelection, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::tuneAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const uint8_t &_deviceInstance, const uint32_t &_frequency, const std::string &_frequencyLabel, const bool &_automaticServiceSelection, TuneAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_device.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->tuneAsync(_device, _deviceInstance, _frequency, _frequencyLabel, _automaticServiceSelection, _callback, _info);
}
/**
 * description: Start/stop sending the quality values for a specific device incl. cyclic
 *   updates (via qualityMonitor).
 */
template <typename ... _AttributeExtensions>
void OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::controlQualityMonitor(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_device.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->controlQualityMonitor(_device, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::controlQualityMonitorAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, ControlQualityMonitorAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_device.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->controlQualityMonitorAsync(_device, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& OrinocoTunerIntrospectionProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace tuner
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::tuner::OrinocoTunerIntrospectionProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::tuner::OrinocoTunerIntrospectionProxy<
            ::v1::com::harman::tuner::OrinocoTunerIntrospectionExtensions::PowerSyncAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::tuner::OrinocoTunerIntrospectionExtensions::AntennaInfosAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::tuner::OrinocoTunerIntrospectionExtensions::DevicesInIntrospectionModeAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::tuner::OrinocoTunerIntrospectionExtensions::VersionInfosAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::tuner::OrinocoTunerIntrospectionExtensions::ActiveErrorsAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_PROXY_HPP_
