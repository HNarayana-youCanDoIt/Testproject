/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_Device_Mode_Handler_PROXY_HPP_
#define V1_COM_HARMAN_PRES_Device_Mode_Handler_PROXY_HPP_

#include <v1/com/harman/pres/DeviceModeHandlerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

template <typename ... _AttributeExtensions>
class DeviceModeHandlerProxy
    : virtual public DeviceModeHandler, 
      virtual public DeviceModeHandlerProxyBase,
      virtual public _AttributeExtensions... {
public:
    DeviceModeHandlerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~DeviceModeHandlerProxy();

    typedef DeviceModeHandler InterfaceType;



    /**
     * description: This broadcast gets emitted, whenever device is inserted. 						 		parameters
     *   are explained in devprestypes FIDL.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast deviceInserted.
     */
    virtual DeviceInsertedEvent& getDeviceInsertedEvent() {
        return delegate_->getDeviceInsertedEvent();
    }
    /**
     * description: This broadcast gets emitted, whenever device is removed. 						 		parameters
     *   are explained in devprestypes FIDL.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast deviceRemoved.
     */
    virtual DeviceRemovedEvent& getDeviceRemovedEvent() {
        return delegate_->getDeviceRemovedEvent();
    }
    /**
     * description: This broadcast gets emitted to update status of method calls startMode &
     *   stopMode.  		whenever startMode is requested,  		 		a) It may be required to
     *   unplug device and plug in again and select the mode again, 		   before
     *   starting requested mode. 		   Then "reinsertNeeded" is set to TRUE and
     *   remaining parameters are to be ignored. 		    		b) It may not be required to
     *   unplug device, but there are conflicting modes to be terminated  		   before
     *   starting requested mode. 		   Then "reinsertNeeded" is set to FALSE, but
     *   "hasConflictModes" is set to TRUE and conflicting  		   mode details can be
     *   found with "details" parameter. 		    		c) It may not be required to unplug
     *   device & there may not be any conflicting modes, 		   before starting
     *   requested mode. 		   Then "reinsertNeeded" is set to FALSE and
     *   "hasConflictModes" is set to FALSE.  		   mode progress can be found with
     *   "status". 		    		whenever stopMode is requested, 		 		mode progress can be
     *   found with "status" and other parameters to be ignored. 						 		parameters
     *   are explained in devprestypes FIDL.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast modeStatus.
     */
    virtual ModeStatusEvent& getModeStatusEvent() {
        return delegate_->getModeStatusEvent();
    }

    /**
     * description: This method to be called to get device details. 		parameters are explained in
     *   devprestypes FIDL.
     * Calls getDeviceDetails with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDeviceDetails(const ::v1::com::harman::pres::devprestypes::eDeviceFilter &_devFilter, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, ::v1::com::harman::pres::devprestypes::eRequestStatus &_reqStatus, std::vector<::v1::com::harman::pres::devprestypes::sDeviceInfo> &_devDetails, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDeviceDetails with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDeviceDetailsAsync(const ::v1::com::harman::pres::devprestypes::eDeviceFilter &_devFilter, GetDeviceDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to be called to delete device from known wifi projection device
     *   list. 	 		The confirmation for this request happens with broadcast
     *   "deviceRemoved" 						 		parameters are explained in devprestypes FIDL.
     * Calls deleteDevice with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteDevice(const uint8_t &_Id, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deleteDevice with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const uint8_t &_Id, DeleteDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: (WIFI_AA/WIFI_CP) This is to be called whenever user wants to search for new
     *   wifi devices and pair                         Once the connected devices list
     *   comes to HMI, user can start session on any one of them                       
     *    User has to provide the mode as input, based on which corresponding devices
     *   will be paired and given back
     * Calls searchAndPairWifiDevices with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void searchAndPairWifiDevices(const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls searchAndPairWifiDevices with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> searchAndPairWifiDevicesAsync(const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, SearchAndPairWifiDevicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to be called whenever user selects a mode and mode is in CAPABLE
     *   state (session to be established). 		If mode is in ACTIVE state (session
     *   already established), HMI should communicate with corresponding pres control
     *   to control the device. 		 		when this method gets called, devPresCntrl updates
     *   status through a broadcast "modeStatus". 		 		If user wants to close
     *   conflicting modes before starting requested mode, "forceStart" should be set
     *   to TRUE.  		otherwise "forceStart" should be set to FALSE. 		 		other
     *   parameters are explained in devprestypes FIDL.
     * Calls startMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, const bool &_forceStart, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, const bool &_forceStart, StartModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to be called whenever user wants to terminate an active mode. 				
     *   		when this method gets called, devPresCntrl updates status through a
     *   broadcast "modeStatus". 			 		parameters are explained in devprestypes FIDL.
     * Calls stopMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stopMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stopMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, StopModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to be called to cancel ongoing "startMode" request. 	 		when this
     *   method gets called, devPresCntrl updates status through a broadcast
     *   "modeStatus". 		 		parameters are explained in devprestypes FIDL.
     * Calls cancelMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void cancelMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls cancelMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> cancelModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CancelModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This broadcast gets emitted, whenever device is inserted. 		parameters are
     *   explained in devprestypes FIDL.
     * Calls getinserteddeviceinfo with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getinserteddeviceinfo(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::vDeviceInfo &_devInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getinserteddeviceinfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getinserteddeviceinfoAsync(GetinserteddeviceinfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<DeviceModeHandlerProxyBase> delegate_;
};

typedef DeviceModeHandlerProxy<> DeviceModeHandlerProxyDefault;


//
// DeviceModeHandlerProxy Implementation
//
template <typename ... _AttributeExtensions>
DeviceModeHandlerProxy<_AttributeExtensions...>::DeviceModeHandlerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<DeviceModeHandlerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<DeviceModeHandlerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
DeviceModeHandlerProxy<_AttributeExtensions...>::~DeviceModeHandlerProxy() {
}

/**
 * description: This method to be called to get device details. 		parameters are explained in
 *   devprestypes FIDL.
 */
template <typename ... _AttributeExtensions>
void DeviceModeHandlerProxy<_AttributeExtensions...>::getDeviceDetails(const ::v1::com::harman::pres::devprestypes::eDeviceFilter &_devFilter, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, ::v1::com::harman::pres::devprestypes::eRequestStatus &_reqStatus, std::vector<::v1::com::harman::pres::devprestypes::sDeviceInfo> &_devDetails, const CommonAPI::CallInfo *_info) {
    if (!_devFilter.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->getDeviceDetails(_devFilter, _internalCallStatus, _ackStatus, _reqStatus, _devDetails, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DeviceModeHandlerProxy<_AttributeExtensions...>::getDeviceDetailsAsync(const ::v1::com::harman::pres::devprestypes::eDeviceFilter &_devFilter, GetDeviceDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_devFilter.validate()) {
        ::v1::com::harman::pres::devprestypes::eAcknowledgement ackStatus = ::v1::com::harman::pres::devprestypes::eAcknowledgement::VALID_INPUT;
        ::v1::com::harman::pres::devprestypes::eRequestStatus reqStatus = ::v1::com::harman::pres::devprestypes::eRequestStatus::REQUEST_SUCCESS;
        std::vector<::v1::com::harman::pres::devprestypes::sDeviceInfo> devDetails = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ackStatus, reqStatus, devDetails);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->getDeviceDetailsAsync(_devFilter, _callback, _info);
}
/**
 * description: This method to be called to delete device from known wifi projection device
 *   list. 	 		The confirmation for this request happens with broadcast
 *   "deviceRemoved" 						 		parameters are explained in devprestypes FIDL.
 */
template <typename ... _AttributeExtensions>
void DeviceModeHandlerProxy<_AttributeExtensions...>::deleteDevice(const uint8_t &_Id, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
    delegate_->deleteDevice(_Id, _internalCallStatus, _ackStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DeviceModeHandlerProxy<_AttributeExtensions...>::deleteDeviceAsync(const uint8_t &_Id, DeleteDeviceAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->deleteDeviceAsync(_Id, _callback, _info);
}
/**
 * description: (WIFI_AA/WIFI_CP) This is to be called whenever user wants to search for new
 *   wifi devices and pair                         Once the connected devices list
 *   comes to HMI, user can start session on any one of them                       
 *    User has to provide the mode as input, based on which corresponding devices
 *   will be paired and given back
 */
template <typename ... _AttributeExtensions>
void DeviceModeHandlerProxy<_AttributeExtensions...>::searchAndPairWifiDevices(const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
    if (!_modeName.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->searchAndPairWifiDevices(_modeName, _internalCallStatus, _ackStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DeviceModeHandlerProxy<_AttributeExtensions...>::searchAndPairWifiDevicesAsync(const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, SearchAndPairWifiDevicesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_modeName.validate()) {
        ::v1::com::harman::pres::devprestypes::eAcknowledgement ackStatus = ::v1::com::harman::pres::devprestypes::eAcknowledgement::VALID_INPUT;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ackStatus);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->searchAndPairWifiDevicesAsync(_modeName, _callback, _info);
}
/**
 * description: This method to be called whenever user selects a mode and mode is in CAPABLE
 *   state (session to be established). 		If mode is in ACTIVE state (session
 *   already established), HMI should communicate with corresponding pres control
 *   to control the device. 		 		when this method gets called, devPresCntrl updates
 *   status through a broadcast "modeStatus". 		 		If user wants to close
 *   conflicting modes before starting requested mode, "forceStart" should be set
 *   to TRUE.  		otherwise "forceStart" should be set to FALSE. 		 		other
 *   parameters are explained in devprestypes FIDL.
 */
template <typename ... _AttributeExtensions>
void DeviceModeHandlerProxy<_AttributeExtensions...>::startMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, const bool &_forceStart, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
    if (!_modeName.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->startMode(_Id, _modeName, _forceStart, _internalCallStatus, _ackStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DeviceModeHandlerProxy<_AttributeExtensions...>::startModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, const bool &_forceStart, StartModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_modeName.validate()) {
        ::v1::com::harman::pres::devprestypes::eAcknowledgement ackStatus = ::v1::com::harman::pres::devprestypes::eAcknowledgement::VALID_INPUT;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ackStatus);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->startModeAsync(_Id, _modeName, _forceStart, _callback, _info);
}
/**
 * description: This method to be called whenever user wants to terminate an active mode. 				
 *   		when this method gets called, devPresCntrl updates status through a
 *   broadcast "modeStatus". 			 		parameters are explained in devprestypes FIDL.
 */
template <typename ... _AttributeExtensions>
void DeviceModeHandlerProxy<_AttributeExtensions...>::stopMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
    if (!_modeName.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->stopMode(_Id, _modeName, _internalCallStatus, _ackStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DeviceModeHandlerProxy<_AttributeExtensions...>::stopModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, StopModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_modeName.validate()) {
        ::v1::com::harman::pres::devprestypes::eAcknowledgement ackStatus = ::v1::com::harman::pres::devprestypes::eAcknowledgement::VALID_INPUT;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ackStatus);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->stopModeAsync(_Id, _modeName, _callback, _info);
}
/**
 * description: This method to be called to cancel ongoing "startMode" request. 	 		when this
 *   method gets called, devPresCntrl updates status through a broadcast
 *   "modeStatus". 		 		parameters are explained in devprestypes FIDL.
 */
template <typename ... _AttributeExtensions>
void DeviceModeHandlerProxy<_AttributeExtensions...>::cancelMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
    if (!_modeName.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->cancelMode(_Id, _modeName, _internalCallStatus, _ackStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DeviceModeHandlerProxy<_AttributeExtensions...>::cancelModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CancelModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_modeName.validate()) {
        ::v1::com::harman::pres::devprestypes::eAcknowledgement ackStatus = ::v1::com::harman::pres::devprestypes::eAcknowledgement::VALID_INPUT;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ackStatus);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->cancelModeAsync(_Id, _modeName, _callback, _info);
}
/**
 * description: This broadcast gets emitted, whenever device is inserted. 		parameters are
 *   explained in devprestypes FIDL.
 */
template <typename ... _AttributeExtensions>
void DeviceModeHandlerProxy<_AttributeExtensions...>::getinserteddeviceinfo(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::vDeviceInfo &_devInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getinserteddeviceinfo(_internalCallStatus, _devInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> DeviceModeHandlerProxy<_AttributeExtensions...>::getinserteddeviceinfoAsync(GetinserteddeviceinfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getinserteddeviceinfoAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &DeviceModeHandlerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool DeviceModeHandlerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool DeviceModeHandlerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& DeviceModeHandlerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& DeviceModeHandlerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_PRES_Device_Mode_Handler_PROXY_HPP_
