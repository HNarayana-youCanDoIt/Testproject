/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_Device_Mode_Handler_PROXY_BASE_HPP_
#define V1_COM_HARMAN_PRES_Device_Mode_Handler_PROXY_BASE_HPP_

#include <v1/com/harman/pres/DeviceModeHandler.hpp>


#include <v1/com/harman/pres/devprestypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

class DeviceModeHandlerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v1::com::harman::pres::devprestypes::sDeviceInfo
    > DeviceInsertedEvent;
    typedef CommonAPI::Event<
        uint8_t
    > DeviceRemovedEvent;
    typedef CommonAPI::Event<
        uint8_t, bool, bool, std::vector<::v1::com::harman::pres::devprestypes::sConflictMode>, ::v1::com::harman::pres::devprestypes::sModeInfo
    > ModeStatusEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eAcknowledgement&, const ::v1::com::harman::pres::devprestypes::eRequestStatus&, const std::vector<::v1::com::harman::pres::devprestypes::sDeviceInfo>&)> GetDeviceDetailsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eAcknowledgement&)> DeleteDeviceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eAcknowledgement&)> SearchAndPairWifiDevicesAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eAcknowledgement&)> StartModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eAcknowledgement&)> StopModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eAcknowledgement&)> CancelModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::vDeviceInfo&)> GetinserteddeviceinfoAsyncCallback;


    /**
     * description: This broadcast gets emitted, whenever device is inserted. 						 		parameters
     *   are explained in devprestypes FIDL.
     */
    virtual DeviceInsertedEvent& getDeviceInsertedEvent() = 0;
    /**
     * description: This broadcast gets emitted, whenever device is removed. 						 		parameters
     *   are explained in devprestypes FIDL.
     */
    virtual DeviceRemovedEvent& getDeviceRemovedEvent() = 0;
    /**
     * description: This broadcast gets emitted to update status of method calls startMode &
     *   stopMode.  		whenever startMode is requested,  		 		a) It may be required to
     *   unplug device and plug in again and select the mode again, 		   before
     *   starting requested mode. 		   Then "reinsertNeeded" is set to TRUE and
     *   remaining parameters are to be ignored. 		    		b) It may not be required to
     *   unplug device, but there are conflicting modes to be terminated  		   before
     *   starting requested mode. 		   Then "reinsertNeeded" is set to FALSE, but
     *   "hasConflictModes" is set to TRUE and conflicting  		   mode details can be
     *   found with "details" parameter. 		    		c) It may not be required to unplug
     *   device & there may not be any conflicting modes, 		   before starting
     *   requested mode. 		   Then "reinsertNeeded" is set to FALSE and
     *   "hasConflictModes" is set to FALSE.  		   mode progress can be found with
     *   "status". 		    		whenever stopMode is requested, 		 		mode progress can be
     *   found with "status" and other parameters to be ignored. 						 		parameters
     *   are explained in devprestypes FIDL.
     */
    virtual ModeStatusEvent& getModeStatusEvent() = 0;

    /**
     * description: This method to be called to get device details. 		parameters are explained in
     *   devprestypes FIDL.
     */
    virtual void getDeviceDetails(const ::v1::com::harman::pres::devprestypes::eDeviceFilter &_devFilter, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, ::v1::com::harman::pres::devprestypes::eRequestStatus &_reqStatus, std::vector<::v1::com::harman::pres::devprestypes::sDeviceInfo> &_devDetails, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDeviceDetailsAsync(const ::v1::com::harman::pres::devprestypes::eDeviceFilter &_devFilter, GetDeviceDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to be called to delete device from known wifi projection device
     *   list. 	 		The confirmation for this request happens with broadcast
     *   "deviceRemoved" 						 		parameters are explained in devprestypes FIDL.
     */
    virtual void deleteDevice(const uint8_t &_Id, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteDeviceAsync(const uint8_t &_Id, DeleteDeviceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: (WIFI_AA/WIFI_CP) This is to be called whenever user wants to search for new
     *   wifi devices and pair                         Once the connected devices list
     *   comes to HMI, user can start session on any one of them                       
     *    User has to provide the mode as input, based on which corresponding devices
     *   will be paired and given back
     */
    virtual void searchAndPairWifiDevices(const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> searchAndPairWifiDevicesAsync(const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, SearchAndPairWifiDevicesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to be called whenever user selects a mode and mode is in CAPABLE
     *   state (session to be established). 		If mode is in ACTIVE state (session
     *   already established), HMI should communicate with corresponding pres control
     *   to control the device. 		 		when this method gets called, devPresCntrl updates
     *   status through a broadcast "modeStatus". 		 		If user wants to close
     *   conflicting modes before starting requested mode, "forceStart" should be set
     *   to TRUE.  		otherwise "forceStart" should be set to FALSE. 		 		other
     *   parameters are explained in devprestypes FIDL.
     */
    virtual void startMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, const bool &_forceStart, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> startModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, const bool &_forceStart, StartModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to be called whenever user wants to terminate an active mode. 				
     *   		when this method gets called, devPresCntrl updates status through a
     *   broadcast "modeStatus". 			 		parameters are explained in devprestypes FIDL.
     */
    virtual void stopMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> stopModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, StopModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to be called to cancel ongoing "startMode" request. 	 		when this
     *   method gets called, devPresCntrl updates status through a broadcast
     *   "modeStatus". 		 		parameters are explained in devprestypes FIDL.
     */
    virtual void cancelMode(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> cancelModeAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_modeName, CancelModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This broadcast gets emitted, whenever device is inserted. 		parameters are
     *   explained in devprestypes FIDL.
     */
    virtual void getinserteddeviceinfo(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::vDeviceInfo &_devInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getinserteddeviceinfoAsync(GetinserteddeviceinfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_PRES_Device_Mode_Handler_PROXY_BASE_HPP_
