/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_User_Preference_Handler_PROXY_BASE_HPP_
#define V1_COM_HARMAN_PRES_User_Preference_Handler_PROXY_BASE_HPP_

#include <v1/com/harman/pres/UserPreferenceHandler.hpp>


#include <v1/com/harman/pres/devprestypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

class UserPreferenceHandlerProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<std::vector<::v1::com::harman::pres::devprestypes::sPrefByDevType>> UserPrefByDevTypeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::vector<::v1::com::harman::pres::devprestypes::sPrefByDevName>> UserPrefByDevNameAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eAcknowledgement&)> SetUserPrefByDevTypeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eAcknowledgement&)> SetUserPrefByDevNameAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::devprestypes::eRequestStatus&)> ClearAllPreferencesAsyncCallback;

    /**
     * description: This attribute holds user preference details for all device types 	
     *   		parameters are explained in devprestypes FIDL.
     */
    virtual UserPrefByDevTypeAttribute& getUserPrefByDevTypeAttribute() = 0;
    /**
     * description: This attribute holds user preference details ONLY for currently connected
     *   devices. 	 		parameters are explained in devprestypes FIDL.
     */
    virtual UserPrefByDevNameAttribute& getUserPrefByDevNameAttribute() = 0;


    /**
     * description: This method to be called to set user preference by device type. 		As
     *   confirmation to this request, attribute "userPrefByDevType" gets updated. 	
     *   		parameters are explained in devprestypes FIDL.
     */
    virtual void setUserPrefByDevType(const ::v1::com::harman::pres::devprestypes::eDeviceType &_devType, const ::v1::com::harman::pres::devprestypes::eModeName &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setUserPrefByDevTypeAsync(const ::v1::com::harman::pres::devprestypes::eDeviceType &_devType, const ::v1::com::harman::pres::devprestypes::eModeName &_mode, SetUserPrefByDevTypeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to be called to set user preference by device name. 		As
     *   confirmation to this request, attribute "userPrefByDevName" gets updated. 	
     *   		parameters are explained in devprestypes FIDL.
     */
    virtual void setUserPrefByDevName(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_mode, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setUserPrefByDevNameAsync(const uint8_t &_Id, const ::v1::com::harman::pres::devprestypes::eModeName &_mode, SetUserPrefByDevNameAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to be called to clear all user preferences  		including both by
     *   device name & by device type. 	 		parameters are explained in devprestypes
     *   FIDL.
     */
    virtual void clearAllPreferences(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eRequestStatus &_reqStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> clearAllPreferencesAsync(ClearAllPreferencesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_PRES_User_Preference_Handler_PROXY_BASE_HPP_
