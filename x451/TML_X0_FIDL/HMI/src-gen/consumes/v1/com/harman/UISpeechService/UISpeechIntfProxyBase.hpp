/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_PROXY_BASE_HPP_
#define V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_PROXY_BASE_HPP_

#include <v1/com/harman/UISpeechService/UISpeechIntf.hpp>


#include <v1/com/harman/UISpeechService/UISSTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace UISpeechService {

class UISpeechIntfProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::UISpeechService::UISSTypes::sTTSAvailable> TtsAvailableStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::UISpeechService::UISSTypes::sTTSPlayState> TtsPlayStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::UISpeechService::UISSTypes::eVRStateEnum> VoiceRecognitionStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::UISpeechService::UISSTypes::eVRDialogActive> VrDialogActiveStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::UISpeechService::UISSTypes::sVRAvailable> VrAvailableStateAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::UISpeechService::UISSTypes::eReturnCode&)> TtsReadOutAsyncCallback;

    /**
     * description: attributes for getting TTS available state and TTS play state
     */
    virtual TtsAvailableStateAttribute& getTtsAvailableStateAttribute() = 0;
    virtual TtsPlayStateAttribute& getTtsPlayStateAttribute() = 0;
    virtual VoiceRecognitionStateAttribute& getVoiceRecognitionStateAttribute() = 0;
    virtual VrDialogActiveStateAttribute& getVrDialogActiveStateAttribute() = 0;
    virtual VrAvailableStateAttribute& getVrAvailableStateAttribute() = 0;


    /**
     * description: The interface provides text readout and prompt readout
     * author: Shrinivas Kulkarni
     */
    virtual void ttsReadOut(const std::string &_data, const bool &_dataisFile, const std::string &_domain, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::UISpeechService::UISSTypes::eReturnCode &_errorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ttsReadOutAsync(const std::string &_data, const bool &_dataisFile, const std::string &_domain, TtsReadOutAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace UISpeechService
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_PROXY_BASE_HPP_
