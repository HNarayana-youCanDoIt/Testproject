/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Settings_PROXY_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Settings_PROXY_HPP_

#include <v1/com/harman/mmpres/MediaSettingsProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

template <typename ... _AttributeExtensions>
class MediaSettingsProxy
    : virtual public MediaSettings, 
      virtual public MediaSettingsProxyBase,
      virtual public _AttributeExtensions... {
public:
    MediaSettingsProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MediaSettingsProxy();

    typedef MediaSettings InterfaceType;




    /**
     * description: reset all the Media related settings to the default.  		e: error code.
     * Calls masterMediaReset with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void masterMediaReset(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls masterMediaReset with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> masterMediaResetAsync(MasterMediaResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: removes the database file of specified device on device ejection.
     * param: slotId: the specified slot id         returns:	  eCallResult:	Result of the API
     *   call
     * Calls resetMediaIndex with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void resetMediaIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls resetMediaIndex with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> resetMediaIndexAsync(const uint8_t &_slotId, ResetMediaIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Updates the index of a device
     * param: slotId: the specified slot id         returns:	  e:	Result of the API call
     * Calls updateIndex with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void updateIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls updateIndex with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> updateIndexAsync(const uint8_t &_slotId, UpdateIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Set Subtitle ON or OFF
     * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
     *   to disable subtitle
     * Calls setSubtitle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSubtitle(const ::v1::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSubtitle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSubtitleAsync(const ::v1::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, SetSubtitleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Set the display window coordinates of video playback
     * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
     *   manually assign by screeenDimension                 screeenDimension  Screen
     *   coordinates
     * Calls setDisplayWindow with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setDisplayWindow(const bool &_isFullscreen, const ::v1::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setDisplayWindow with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setDisplayWindowAsync(const bool &_isFullscreen, const ::v1::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, SetDisplayWindowAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<MediaSettingsProxyBase> delegate_;
};

typedef MediaSettingsProxy<> MediaSettingsProxyDefault;


//
// MediaSettingsProxy Implementation
//
template <typename ... _AttributeExtensions>
MediaSettingsProxy<_AttributeExtensions...>::MediaSettingsProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<MediaSettingsProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<MediaSettingsProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MediaSettingsProxy<_AttributeExtensions...>::~MediaSettingsProxy() {
}

/**
 * description: reset all the Media related settings to the default.  		e: error code.
 */
template <typename ... _AttributeExtensions>
void MediaSettingsProxy<_AttributeExtensions...>::masterMediaReset(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info) {
    delegate_->masterMediaReset(_internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaSettingsProxy<_AttributeExtensions...>::masterMediaResetAsync(MasterMediaResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->masterMediaResetAsync(_callback, _info);
}
/**
 * description: removes the database file of specified device on device ejection.
 * param: slotId: the specified slot id         returns:	  eCallResult:	Result of the API
 *   call
 */
template <typename ... _AttributeExtensions>
void MediaSettingsProxy<_AttributeExtensions...>::resetMediaIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_e, const CommonAPI::CallInfo *_info) {
    delegate_->resetMediaIndex(_slotId, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaSettingsProxy<_AttributeExtensions...>::resetMediaIndexAsync(const uint8_t &_slotId, ResetMediaIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->resetMediaIndexAsync(_slotId, _callback, _info);
}
/**
 * description: Updates the index of a device
 * param: slotId: the specified slot id         returns:	  e:	Result of the API call
 */
template <typename ... _AttributeExtensions>
void MediaSettingsProxy<_AttributeExtensions...>::updateIndex(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->updateIndex(_slotId, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaSettingsProxy<_AttributeExtensions...>::updateIndexAsync(const uint8_t &_slotId, UpdateIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->updateIndexAsync(_slotId, _callback, _info);
}
/**
 * description: Set Subtitle ON or OFF
 * param: dispSubtitle - eSubtitleStatus:ON is to enable Subtitle, eSubtitleStatus:OFF is
 *   to disable subtitle
 */
template <typename ... _AttributeExtensions>
void MediaSettingsProxy<_AttributeExtensions...>::setSubtitle(const ::v1::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_dispSubtitle.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setSubtitle(_dispSubtitle, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaSettingsProxy<_AttributeExtensions...>::setSubtitleAsync(const ::v1::com::harman::mmpres::MMPresTypes::eSubtitleStatus &_dispSubtitle, SetSubtitleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_dispSubtitle.validate()) {
        ::v1::com::harman::mmpres::MMPresTypes::eCallResult result = ::v1::com::harman::mmpres::MMPresTypes::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setSubtitleAsync(_dispSubtitle, _callback, _info);
}
/**
 * description: Set the display window coordinates of video playback
 * param: isFullscreen True is to enable fullscreen, false is to disable fullscreen and
 *   manually assign by screeenDimension                 screeenDimension  Screen
 *   coordinates
 */
template <typename ... _AttributeExtensions>
void MediaSettingsProxy<_AttributeExtensions...>::setDisplayWindow(const bool &_isFullscreen, const ::v1::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::eMediaError &_e, const CommonAPI::CallInfo *_info) {
    delegate_->setDisplayWindow(_isFullscreen, _screeenDimension, _internalCallStatus, _e, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaSettingsProxy<_AttributeExtensions...>::setDisplayWindowAsync(const bool &_isFullscreen, const ::v1::com::harman::mmpres::MMPresTypes::tScreen &_screeenDimension, SetDisplayWindowAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setDisplayWindowAsync(_isFullscreen, _screeenDimension, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MediaSettingsProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MediaSettingsProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MediaSettingsProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MediaSettingsProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MediaSettingsProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Settings_PROXY_HPP_
