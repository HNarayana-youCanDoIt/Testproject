/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Orinoco specific tuner data type collection.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2016
 */
#ifndef V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_Types_HPP_
#define V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace tuner {

struct OrinocoTunerIntrospectionTypes {
    
    struct AntennaState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ANT_OK = 0,
            ANT_OPEN = 1,
            ANT_SHORT_CIRCUIT_GND = 2,
            ANT_SHORT_CIRCUIT_UBAT = 3,
            ANT_SHORT_CIRCUIT = 4,
            ANT_CURRENT_TOO_LOW = 5,
            ANT_CURRENT_TOO_HIGH = 6,
            ANT_NOT_AVAILABLE = 7,
            ANT_OUT_OF_RANGE = 8,
            ANT_NOT_CHECKED = 9,
            ANT_ANTENNA_MISSING = 10,
            ANT_OVERTEMPERATURE = 11,
            ANT_COMMUNICATION_NOK = 12,
            ANT_POWER_SUPPLY_OFF = 15
        };
        
        AntennaState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ANT_OK)) {}
        AntennaState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ANT_OK):
                case static_cast<int32_t>(Literal::ANT_OPEN):
                case static_cast<int32_t>(Literal::ANT_SHORT_CIRCUIT_GND):
                case static_cast<int32_t>(Literal::ANT_SHORT_CIRCUIT_UBAT):
                case static_cast<int32_t>(Literal::ANT_SHORT_CIRCUIT):
                case static_cast<int32_t>(Literal::ANT_CURRENT_TOO_LOW):
                case static_cast<int32_t>(Literal::ANT_CURRENT_TOO_HIGH):
                case static_cast<int32_t>(Literal::ANT_NOT_AVAILABLE):
                case static_cast<int32_t>(Literal::ANT_OUT_OF_RANGE):
                case static_cast<int32_t>(Literal::ANT_NOT_CHECKED):
                case static_cast<int32_t>(Literal::ANT_ANTENNA_MISSING):
                case static_cast<int32_t>(Literal::ANT_OVERTEMPERATURE):
                case static_cast<int32_t>(Literal::ANT_COMMUNICATION_NOK):
                case static_cast<int32_t>(Literal::ANT_POWER_SUPPLY_OFF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const AntennaState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const AntennaState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const AntennaState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const AntennaState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const AntennaState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const AntennaState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Device : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DEV_NONE = 0,
            DEV_AMFM = 1,
            DEV_DAB = 2,
            DEV_AMFM_DAB = 3,
            DEV_DRM = 4,
            DEV_AMFM_DRM = 5,
            DEV_AMFM_DRM_DAB = 6
        };
        
        Device() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DEV_NONE)) {}
        Device(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DEV_NONE):
                case static_cast<int32_t>(Literal::DEV_AMFM):
                case static_cast<int32_t>(Literal::DEV_DAB):
                case static_cast<int32_t>(Literal::DEV_AMFM_DAB):
                case static_cast<int32_t>(Literal::DEV_DRM):
                case static_cast<int32_t>(Literal::DEV_AMFM_DRM):
                case static_cast<int32_t>(Literal::DEV_AMFM_DRM_DAB):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Device &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Device &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Device &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Device &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Device &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Device &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct FactoryResetMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            FRM_RESET_ALL = 0,
            FRM_RESET_PROFILES = 1
        };
        
        FactoryResetMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::FRM_RESET_ALL)) {}
        FactoryResetMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::FRM_RESET_ALL):
                case static_cast<int32_t>(Literal::FRM_RESET_PROFILES):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const FactoryResetMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const FactoryResetMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const FactoryResetMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const FactoryResetMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const FactoryResetMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const FactoryResetMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct VersionElement : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            VER_FW_AMFM_FG = 0,
            VER_FW_AMFM_BG = 1,
            VER_FW_AMFM_HD = 2,
            VER_FW_AMFM_DRM = 3,
            VER_FW_AMFM_VICS = 4,
            VER_FW_DAB = 5
        };
        
        VersionElement() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::VER_FW_AMFM_FG)) {}
        VersionElement(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::VER_FW_AMFM_FG):
                case static_cast<int32_t>(Literal::VER_FW_AMFM_BG):
                case static_cast<int32_t>(Literal::VER_FW_AMFM_HD):
                case static_cast<int32_t>(Literal::VER_FW_AMFM_DRM):
                case static_cast<int32_t>(Literal::VER_FW_AMFM_VICS):
                case static_cast<int32_t>(Literal::VER_FW_DAB):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VersionElement &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VersionElement &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VersionElement &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VersionElement &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VersionElement &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VersionElement &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ErrorElement : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ERR_DAB_COMMUNICATION = 0,
            ERR_DAB_FIRMWARE = 1,
            ERR_AMFM_FG = 2,
            ERR_AMFM_FG_PHD = 3,
            ERR_AMFM_BG = 4,
            ERR_AMFM_DRM = 5,
            ERR_AMFM_HD = 6
        };
        
        ErrorElement() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ERR_DAB_COMMUNICATION)) {}
        ErrorElement(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ERR_DAB_COMMUNICATION):
                case static_cast<int32_t>(Literal::ERR_DAB_FIRMWARE):
                case static_cast<int32_t>(Literal::ERR_AMFM_FG):
                case static_cast<int32_t>(Literal::ERR_AMFM_FG_PHD):
                case static_cast<int32_t>(Literal::ERR_AMFM_BG):
                case static_cast<int32_t>(Literal::ERR_AMFM_DRM):
                case static_cast<int32_t>(Literal::ERR_AMFM_HD):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ErrorElement &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ErrorElement &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ErrorElement &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ErrorElement &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ErrorElement &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ErrorElement &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DabProtectionLevel : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DPL_EEP_LEVEL_1A = 0,
            DPL_EEP_LEVEL_2A = 1,
            DPL_EEP_LEVEL_3A = 2,
            DPL_EEP_LEVEL_4A = 3,
            DPL_EEP_LEVEL_1B = 4,
            DPL_EEP_LEVEL_2B = 5,
            DPL_EEP_LEVEL_3B = 6,
            DPL_EEP_LEVEL_4B = 7,
            DPL_UEP_LEVEL_1 = 8,
            DPL_UEP_LEVEL_2 = 9,
            DPL_UEP_LEVEL_3 = 10,
            DPL_UEP_LEVEL_4 = 11,
            DPL_UEP_LEVEL_5 = 12,
            DPL_UNDEF = 255
        };
        
        DabProtectionLevel() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DPL_EEP_LEVEL_1A)) {}
        DabProtectionLevel(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DPL_EEP_LEVEL_1A):
                case static_cast<int32_t>(Literal::DPL_EEP_LEVEL_2A):
                case static_cast<int32_t>(Literal::DPL_EEP_LEVEL_3A):
                case static_cast<int32_t>(Literal::DPL_EEP_LEVEL_4A):
                case static_cast<int32_t>(Literal::DPL_EEP_LEVEL_1B):
                case static_cast<int32_t>(Literal::DPL_EEP_LEVEL_2B):
                case static_cast<int32_t>(Literal::DPL_EEP_LEVEL_3B):
                case static_cast<int32_t>(Literal::DPL_EEP_LEVEL_4B):
                case static_cast<int32_t>(Literal::DPL_UEP_LEVEL_1):
                case static_cast<int32_t>(Literal::DPL_UEP_LEVEL_2):
                case static_cast<int32_t>(Literal::DPL_UEP_LEVEL_3):
                case static_cast<int32_t>(Literal::DPL_UEP_LEVEL_4):
                case static_cast<int32_t>(Literal::DPL_UEP_LEVEL_5):
                case static_cast<int32_t>(Literal::DPL_UNDEF):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DabProtectionLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DabProtectionLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DabProtectionLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DabProtectionLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DabProtectionLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DabProtectionLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrmSpectrumOccupancy : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DSO_4_5KHZ = 0,
            DSO_5KHZ = 1,
            DSO_9KHZ = 2,
            DSO_10KHZ = 3,
            DSO_18KHZ = 4,
            DSO_20KHZ = 5,
            DSO_100KHZ = 8
        };
        
        DrmSpectrumOccupancy() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DSO_4_5KHZ)) {}
        DrmSpectrumOccupancy(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DSO_4_5KHZ):
                case static_cast<int32_t>(Literal::DSO_5KHZ):
                case static_cast<int32_t>(Literal::DSO_9KHZ):
                case static_cast<int32_t>(Literal::DSO_10KHZ):
                case static_cast<int32_t>(Literal::DSO_18KHZ):
                case static_cast<int32_t>(Literal::DSO_20KHZ):
                case static_cast<int32_t>(Literal::DSO_100KHZ):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrmSpectrumOccupancy &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrmSpectrumOccupancy &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrmSpectrumOccupancy &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrmSpectrumOccupancy &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrmSpectrumOccupancy &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrmSpectrumOccupancy &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrmInterleaverDepth : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DID_2S = 0,
            DID_400MS = 1,
            DID_600MS = 2
        };
        
        DrmInterleaverDepth() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DID_2S)) {}
        DrmInterleaverDepth(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DID_2S):
                case static_cast<int32_t>(Literal::DID_400MS):
                case static_cast<int32_t>(Literal::DID_600MS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrmInterleaverDepth &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrmInterleaverDepth &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrmInterleaverDepth &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrmInterleaverDepth &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrmInterleaverDepth &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrmInterleaverDepth &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrmMscMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DMM_NON_HIERARCHICAL_64QAM = 0,
            DMM_HIERARCHICAL_ON_I_64QAM = 1,
            DMM_HIERARCHICAL_ON_I_AND_Q_64QAM = 2,
            DMM_NON_HIERARCHICAL_16QAM = 3,
            DMM_NON_HIERARCHICAL_4QAM = 7
        };
        
        DrmMscMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DMM_NON_HIERARCHICAL_64QAM)) {}
        DrmMscMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DMM_NON_HIERARCHICAL_64QAM):
                case static_cast<int32_t>(Literal::DMM_HIERARCHICAL_ON_I_64QAM):
                case static_cast<int32_t>(Literal::DMM_HIERARCHICAL_ON_I_AND_Q_64QAM):
                case static_cast<int32_t>(Literal::DMM_NON_HIERARCHICAL_16QAM):
                case static_cast<int32_t>(Literal::DMM_NON_HIERARCHICAL_4QAM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrmMscMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrmMscMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrmMscMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrmMscMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrmMscMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrmMscMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrmSdcMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DSM_CODE_RATE_0_5_16QAM = 0,
            DSM_CODE_RATE_0_5_4QAM = 1,
            DSM_CODE_RATE_0_25_4QAM = 3
        };
        
        DrmSdcMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DSM_CODE_RATE_0_5_16QAM)) {}
        DrmSdcMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DSM_CODE_RATE_0_5_16QAM):
                case static_cast<int32_t>(Literal::DSM_CODE_RATE_0_5_4QAM):
                case static_cast<int32_t>(Literal::DSM_CODE_RATE_0_25_4QAM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrmSdcMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrmSdcMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrmSdcMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrmSdcMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrmSdcMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrmSdcMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrmSampleRate : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DSR_8KHZ = 0,
            DSR_12KHZ = 1,
            DSR_16KHZ = 2,
            DSR_24KHZ = 3,
            DSR_32KHZ = 4,
            DSR_44_1KHZ = 5,
            DSR_48KHZ = 6,
            DSR_4_6KHZ = 7,
            DSR_19_2KHZ = 8,
            DSR_38_4KHZ = 9
        };
        
        DrmSampleRate() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DSR_8KHZ)) {}
        DrmSampleRate(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DSR_8KHZ):
                case static_cast<int32_t>(Literal::DSR_12KHZ):
                case static_cast<int32_t>(Literal::DSR_16KHZ):
                case static_cast<int32_t>(Literal::DSR_24KHZ):
                case static_cast<int32_t>(Literal::DSR_32KHZ):
                case static_cast<int32_t>(Literal::DSR_44_1KHZ):
                case static_cast<int32_t>(Literal::DSR_48KHZ):
                case static_cast<int32_t>(Literal::DSR_4_6KHZ):
                case static_cast<int32_t>(Literal::DSR_19_2KHZ):
                case static_cast<int32_t>(Literal::DSR_38_4KHZ):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrmSampleRate &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrmSampleRate &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrmSampleRate &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrmSampleRate &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrmSampleRate &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrmSampleRate &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrmAudioMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DAM_STEREO = 0,
            DAM_JOINT_STEREO = 1,
            DAM_DUAL_CHANNEL = 2,
            DAM_MONO = 3,
            DAM_MPEG_SURROUND = 4,
            DAM_PARAMETRIC_STEREO = 5,
            DAM_MPEG_SURROUND_5_1 = 6,
            DAM_MPEG_SURROUND_7_1 = 7
        };
        
        DrmAudioMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DAM_STEREO)) {}
        DrmAudioMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DAM_STEREO):
                case static_cast<int32_t>(Literal::DAM_JOINT_STEREO):
                case static_cast<int32_t>(Literal::DAM_DUAL_CHANNEL):
                case static_cast<int32_t>(Literal::DAM_MONO):
                case static_cast<int32_t>(Literal::DAM_MPEG_SURROUND):
                case static_cast<int32_t>(Literal::DAM_PARAMETRIC_STEREO):
                case static_cast<int32_t>(Literal::DAM_MPEG_SURROUND_5_1):
                case static_cast<int32_t>(Literal::DAM_MPEG_SURROUND_7_1):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrmAudioMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrmAudioMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrmAudioMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrmAudioMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrmAudioMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrmAudioMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct DrmSourceEncoding : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DSE_MPEG1_LAYER_II = 0,
            DSE_MPEG2_LAYER_II = 1,
            DSE_AAC_PLUS_DAB_PLUS = 2,
            DSE_AAC_PLUS_T_DMB = 3,
            DSE_BSAC = 4,
            DSE_AAC_DRM = 5,
            DSE_CELP = 6,
            DSE_HVXC = 7,
            DSE_XHEAAC = 8
        };
        
        DrmSourceEncoding() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DSE_MPEG1_LAYER_II)) {}
        DrmSourceEncoding(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DSE_MPEG1_LAYER_II):
                case static_cast<int32_t>(Literal::DSE_MPEG2_LAYER_II):
                case static_cast<int32_t>(Literal::DSE_AAC_PLUS_DAB_PLUS):
                case static_cast<int32_t>(Literal::DSE_AAC_PLUS_T_DMB):
                case static_cast<int32_t>(Literal::DSE_BSAC):
                case static_cast<int32_t>(Literal::DSE_AAC_DRM):
                case static_cast<int32_t>(Literal::DSE_CELP):
                case static_cast<int32_t>(Literal::DSE_HVXC):
                case static_cast<int32_t>(Literal::DSE_XHEAAC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DrmSourceEncoding &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DrmSourceEncoding &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DrmSourceEncoding &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DrmSourceEncoding &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DrmSourceEncoding &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DrmSourceEncoding &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Antenna diagnstics information
     */
    struct AntennaInfo : CommonAPI::Struct<std::string, AntennaState, int32_t, int32_t> {
    	
    	AntennaInfo() {
    	}
    	AntennaInfo(const std::string &_name, const AntennaState &_antennaState, const int32_t &_current, const int32_t &_voltage)
    	{
    		std::get<0>(values_) = _name;
    		std::get<1>(values_) = _antennaState;
    		std::get<2>(values_) = _current;
    		std::get<3>(values_) = _voltage;
    	}
    	/**
    	 * description: Antenna identification
    	 */
    	inline const std::string &getName() const { return std::get<0>(values_); }
    	inline void setName(const std::string &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Antenna state
    	 */
    	inline const AntennaState &getAntennaState() const { return std::get<1>(values_); }
    	inline void setAntennaState(const AntennaState &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Current [mA]
    	 */
    	inline const int32_t &getCurrent() const { return std::get<2>(values_); }
    	inline void setCurrent(const int32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Voltage [mV]
    	 */
    	inline const int32_t &getVoltage() const { return std::get<3>(values_); }
    	inline void setVoltage(const int32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const AntennaInfo& _other) const {
                return (getName() == _other.getName() && getAntennaState() == _other.getAntennaState() && getCurrent() == _other.getCurrent() && getVoltage() == _other.getVoltage());
        }
    	inline bool operator!=(const AntennaInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: AM/FM specific quality parameter
     */
    struct QualityAmFm : CommonAPI::Struct<uint32_t, uint32_t, uint32_t, std::string, uint8_t, std::string, uint16_t, uint8_t, int16_t> {
    	
    	QualityAmFm() {
    	}
    	QualityAmFm(const uint32_t &_frequency, const uint32_t &_flags, const uint32_t &_pi, const std::string &_ps, const uint8_t &_quality, const std::string &_radiotext, const uint16_t &_adjacent, const uint8_t &_multipath, const int16_t &_fieldStrength)
    	{
    		std::get<0>(values_) = _frequency;
    		std::get<1>(values_) = _flags;
    		std::get<2>(values_) = _pi;
    		std::get<3>(values_) = _ps;
    		std::get<4>(values_) = _quality;
    		std::get<5>(values_) = _radiotext;
    		std::get<6>(values_) = _adjacent;
    		std::get<7>(values_) = _multipath;
    		std::get<8>(values_) = _fieldStrength;
    	}
    	/**
    	 * description: Frequency [KHz]
    	 */
    	inline const uint32_t &getFrequency() const { return std::get<0>(values_); }
    	inline void setFrequency(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: TA/TP flages etc. (project specific)
    	 */
    	inline const uint32_t &getFlags() const { return std::get<1>(values_); }
    	inline void setFlags(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: PI code (lower word), 0xFFFFFFFF is invalid
    	 */
    	inline const uint32_t &getPi() const { return std::get<2>(values_); }
    	inline void setPi(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: PS code (station name)
    	 */
    	inline const std::string &getPs() const { return std::get<3>(values_); }
    	inline void setPs(const std::string &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: Quality (0..100)
    	 */
    	inline const uint8_t &getQuality() const { return std::get<4>(values_); }
    	inline void setQuality(const uint8_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: RDS radiotext (foreground tuner only)
    	 */
    	inline const std::string &getRadiotext() const { return std::get<5>(values_); }
    	inline void setRadiotext(const std::string &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: Adjacent Channel Detector
    	 */
    	inline const uint16_t &getAdjacent() const { return std::get<6>(values_); }
    	inline void setAdjacent(const uint16_t &_value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: Multipath Detector value (normalized) 0 (good) - 255 (bad)
    	 */
    	inline const uint8_t &getMultipath() const { return std::get<7>(values_); }
    	inline void setMultipath(const uint8_t &_value) { std::get<7>(values_) = _value; }
    	/**
    	 * description: Fieldstrength in dBµV
    	 */
    	inline const int16_t &getFieldStrength() const { return std::get<8>(values_); }
    	inline void setFieldStrength(const int16_t &_value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const QualityAmFm& _other) const {
                return (getFrequency() == _other.getFrequency() && getFlags() == _other.getFlags() && getPi() == _other.getPi() && getPs() == _other.getPs() && getQuality() == _other.getQuality() && getRadiotext() == _other.getRadiotext() && getAdjacent() == _other.getAdjacent() && getMultipath() == _other.getMultipath() && getFieldStrength() == _other.getFieldStrength());
        }
    	inline bool operator!=(const QualityAmFm &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: DAB specific quality parameter
     */
    struct QualityDab : CommonAPI::Struct<DabProtectionLevel, uint32_t, uint8_t, float, float, uint32_t, uint16_t, uint8_t, uint32_t, uint16_t, bool, bool, bool, std::string, uint32_t, int16_t> {
    	
    	QualityDab() {
    		std::get<10>(values_) = false;
    		std::get<11>(values_) = false;
    		std::get<12>(values_) = false;
    	}
    	QualityDab(const DabProtectionLevel &_protectionLevel, const uint32_t &_bitRate, const uint8_t &_transmissionMode, const float &_bitErrorRatioFic, const float &_bitErrorRatioMsc, const uint32_t &_numberOfServices, const uint16_t &_eid, const uint8_t &_ecc, const uint32_t &_sid, const uint16_t &_scidi, const bool &_sync, const bool &_valid, const bool &_mute, const std::string &_frequencyLabel, const uint32_t &_Frequency, const int16_t &_FieldStrength)
    	{
    		std::get<0>(values_) = _protectionLevel;
    		std::get<1>(values_) = _bitRate;
    		std::get<2>(values_) = _transmissionMode;
    		std::get<3>(values_) = _bitErrorRatioFic;
    		std::get<4>(values_) = _bitErrorRatioMsc;
    		std::get<5>(values_) = _numberOfServices;
    		std::get<6>(values_) = _eid;
    		std::get<7>(values_) = _ecc;
    		std::get<8>(values_) = _sid;
    		std::get<9>(values_) = _scidi;
    		std::get<10>(values_) = _sync;
    		std::get<11>(values_) = _valid;
    		std::get<12>(values_) = _mute;
    		std::get<13>(values_) = _frequencyLabel;
    		std::get<14>(values_) = _Frequency;
    		std::get<15>(values_) = _FieldStrength;
    	}
    	/**
    	 * description: DAB protection level
    	 */
    	inline const DabProtectionLevel &getProtectionLevel() const { return std::get<0>(values_); }
    	inline void setProtectionLevel(const DabProtectionLevel &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Bit rate [kbit/s]
    	 */
    	inline const uint32_t &getBitRate() const { return std::get<1>(values_); }
    	inline void setBitRate(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Mode of transmission
    	 */
    	inline const uint8_t &getTransmissionMode() const { return std::get<2>(values_); }
    	inline void setTransmissionMode(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Bit error rate of FIC (fast information channel)
    	 */
    	inline const float &getBitErrorRatioFic() const { return std::get<3>(values_); }
    	inline void setBitErrorRatioFic(const float &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: Bit error rate of MSC (main service channel)
    	 */
    	inline const float &getBitErrorRatioMsc() const { return std::get<4>(values_); }
    	inline void setBitErrorRatioMsc(const float &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: Number of audio services in current ensemble
    	 */
    	inline const uint32_t &getNumberOfServices() const { return std::get<5>(values_); }
    	inline void setNumberOfServices(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: Ensemble ID
    	 */
    	inline const uint16_t &getEid() const { return std::get<6>(values_); }
    	inline void setEid(const uint16_t &_value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: Extended Country Code
    	 */
    	inline const uint8_t &getEcc() const { return std::get<7>(values_); }
    	inline void setEcc(const uint8_t &_value) { std::get<7>(values_) = _value; }
    	/**
    	 * description: Service ID
    	 */
    	inline const uint32_t &getSid() const { return std::get<8>(values_); }
    	inline void setSid(const uint32_t &_value) { std::get<8>(values_) = _value; }
    	/**
    	 * description: Subcomponent ID (internal)
    	 */
    	inline const uint16_t &getScidi() const { return std::get<9>(values_); }
    	inline void setScidi(const uint16_t &_value) { std::get<9>(values_) = _value; }
    	/**
    	 * description: Sync status
    	 */
    	inline const bool &getSync() const { return std::get<10>(values_); }
    	inline void setSync(const bool _value) { std::get<10>(values_) = _value; }
    	/**
    	 * description: Audio data decodable
    	 */
    	inline const bool &getValid() const { return std::get<11>(values_); }
    	inline void setValid(const bool _value) { std::get<11>(values_) = _value; }
    	/**
    	 * description: Audio is muted
    	 */
    	inline const bool &getMute() const { return std::get<12>(values_); }
    	inline void setMute(const bool _value) { std::get<12>(values_) = _value; }
    	/**
    	 * description: Frequency label
    	 */
    	inline const std::string &getFrequencyLabel() const { return std::get<13>(values_); }
    	inline void setFrequencyLabel(const std::string &_value) { std::get<13>(values_) = _value; }
    	/**
    	 * description: Frequency [kHz]
    	 */
    	inline const uint32_t &getFrequency() const { return std::get<14>(values_); }
    	inline void setFrequency(const uint32_t &_value) { std::get<14>(values_) = _value; }
    	/**
    	 * description: Fieldstrength in dBµV
    	 */
    	inline const int16_t &getFieldStrength() const { return std::get<15>(values_); }
    	inline void setFieldStrength(const int16_t &_value) { std::get<15>(values_) = _value; }
    	inline bool operator==(const QualityDab& _other) const {
                return (getProtectionLevel() == _other.getProtectionLevel() && getBitRate() == _other.getBitRate() && getTransmissionMode() == _other.getTransmissionMode() && getBitErrorRatioFic() == _other.getBitErrorRatioFic() && getBitErrorRatioMsc() == _other.getBitErrorRatioMsc() && getNumberOfServices() == _other.getNumberOfServices() && getEid() == _other.getEid() && getEcc() == _other.getEcc() && getSid() == _other.getSid() && getScidi() == _other.getScidi() && getSync() == _other.getSync() && getValid() == _other.getValid() && getMute() == _other.getMute() && getFrequencyLabel() == _other.getFrequencyLabel() && getFrequency() == _other.getFrequency() && getFieldStrength() == _other.getFieldStrength());
        }
    	inline bool operator!=(const QualityDab &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: DRM specific error ratios
     */
    struct DrmBitErrorRatios : CommonAPI::Struct<float, float, float> {
    	
    	DrmBitErrorRatios() {
    	}
    	DrmBitErrorRatios(const float &_facErrorRatio, const float &_sdcErrorRatio, const float &_streamErrorRatio)
    	{
    		std::get<0>(values_) = _facErrorRatio;
    		std::get<1>(values_) = _sdcErrorRatio;
    		std::get<2>(values_) = _streamErrorRatio;
    	}
    	/**
    	 * description: Error Ratio of DRM FAC (Fast Access Channel)
    	 */
    	inline const float &getFacErrorRatio() const { return std::get<0>(values_); }
    	inline void setFacErrorRatio(const float &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Error Ratio of DRM SDC (Service description channel)
    	 */
    	inline const float &getSdcErrorRatio() const { return std::get<1>(values_); }
    	inline void setSdcErrorRatio(const float &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Error Ratio of DRM Stream
    	 */
    	inline const float &getStreamErrorRatio() const { return std::get<2>(values_); }
    	inline void setStreamErrorRatio(const float &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const DrmBitErrorRatios& _other) const {
                return (getFacErrorRatio() == _other.getFacErrorRatio() && getSdcErrorRatio() == _other.getSdcErrorRatio() && getStreamErrorRatio() == _other.getStreamErrorRatio());
        }
    	inline bool operator!=(const DrmBitErrorRatios &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: DRM specific channel parameter
     */
    struct DrmChannelParams : CommonAPI::Struct<uint8_t, DrmSpectrumOccupancy, DrmInterleaverDepth, DrmMscMode, DrmSdcMode, uint8_t, uint8_t> {
    	
    	DrmChannelParams() {
    	}
    	DrmChannelParams(const uint8_t &_enhancementFlag, const DrmSpectrumOccupancy &_spectrumOccupancy, const DrmInterleaverDepth &_interleaverDepth, const DrmMscMode &_mscMode, const DrmSdcMode &_sdcMode, const uint8_t &_numberOfAudioServices, const uint8_t &_numberOfDataServices)
    	{
    		std::get<0>(values_) = _enhancementFlag;
    		std::get<1>(values_) = _spectrumOccupancy;
    		std::get<2>(values_) = _interleaverDepth;
    		std::get<3>(values_) = _mscMode;
    		std::get<4>(values_) = _sdcMode;
    		std::get<5>(values_) = _numberOfAudioServices;
    		std::get<6>(values_) = _numberOfDataServices;
    	}
    	/**
    	 * description: 
    	 */
    	inline const uint8_t &getEnhancementFlag() const { return std::get<0>(values_); }
    	inline void setEnhancementFlag(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Spectrum occupancy
    	 */
    	inline const DrmSpectrumOccupancy &getSpectrumOccupancy() const { return std::get<1>(values_); }
    	inline void setSpectrumOccupancy(const DrmSpectrumOccupancy &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: interleaver depth
    	 */
    	inline const DrmInterleaverDepth &getInterleaverDepth() const { return std::get<2>(values_); }
    	inline void setInterleaverDepth(const DrmInterleaverDepth &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: MSC mode
    	 */
    	inline const DrmMscMode &getMscMode() const { return std::get<3>(values_); }
    	inline void setMscMode(const DrmMscMode &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: SDC mode
    	 */
    	inline const DrmSdcMode &getSdcMode() const { return std::get<4>(values_); }
    	inline void setSdcMode(const DrmSdcMode &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: Number of audio services
    	 */
    	inline const uint8_t &getNumberOfAudioServices() const { return std::get<5>(values_); }
    	inline void setNumberOfAudioServices(const uint8_t &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: Number of data services
    	 */
    	inline const uint8_t &getNumberOfDataServices() const { return std::get<6>(values_); }
    	inline void setNumberOfDataServices(const uint8_t &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const DrmChannelParams& _other) const {
                return (getEnhancementFlag() == _other.getEnhancementFlag() && getSpectrumOccupancy() == _other.getSpectrumOccupancy() && getInterleaverDepth() == _other.getInterleaverDepth() && getMscMode() == _other.getMscMode() && getSdcMode() == _other.getSdcMode() && getNumberOfAudioServices() == _other.getNumberOfAudioServices() && getNumberOfDataServices() == _other.getNumberOfDataServices());
        }
    	inline bool operator!=(const DrmChannelParams &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: DRM specific audio properties
     */
    struct DrmAudioProperties : CommonAPI::Struct<uint32_t, DrmSampleRate, DrmAudioMode, DrmSourceEncoding> {
    	
    	DrmAudioProperties() {
    	}
    	DrmAudioProperties(const uint32_t &_bitRate, const DrmSampleRate &_sampleRate, const DrmAudioMode &_audioMode, const DrmSourceEncoding &_sourceEncoding)
    	{
    		std::get<0>(values_) = _bitRate;
    		std::get<1>(values_) = _sampleRate;
    		std::get<2>(values_) = _audioMode;
    		std::get<3>(values_) = _sourceEncoding;
    	}
    	/**
    	 * description: bit rate
    	 */
    	inline const uint32_t &getBitRate() const { return std::get<0>(values_); }
    	inline void setBitRate(const uint32_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: sample rate
    	 */
    	inline const DrmSampleRate &getSampleRate() const { return std::get<1>(values_); }
    	inline void setSampleRate(const DrmSampleRate &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: audio mode
    	 */
    	inline const DrmAudioMode &getAudioMode() const { return std::get<2>(values_); }
    	inline void setAudioMode(const DrmAudioMode &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: source encoding
    	 */
    	inline const DrmSourceEncoding &getSourceEncoding() const { return std::get<3>(values_); }
    	inline void setSourceEncoding(const DrmSourceEncoding &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const DrmAudioProperties& _other) const {
                return (getBitRate() == _other.getBitRate() && getSampleRate() == _other.getSampleRate() && getAudioMode() == _other.getAudioMode() && getSourceEncoding() == _other.getSourceEncoding());
        }
    	inline bool operator!=(const DrmAudioProperties &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: DRM reception information
     */
    struct DrmReceptionInfo : CommonAPI::Struct<uint8_t, uint8_t, uint8_t, uint16_t> {
    	
    	DrmReceptionInfo() {
    	}
    	DrmReceptionInfo(const uint8_t &_robustnessMode, const uint8_t &_digitalAudioAcquired, const uint8_t &_snrLevel, const uint16_t &_rssiLevel)
    	{
    		std::get<0>(values_) = _robustnessMode;
    		std::get<1>(values_) = _digitalAudioAcquired;
    		std::get<2>(values_) = _snrLevel;
    		std::get<3>(values_) = _rssiLevel;
    	}
    	/**
    	 * description: robustness mode
    	 */
    	inline const uint8_t &getRobustnessMode() const { return std::get<0>(values_); }
    	inline void setRobustnessMode(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: digital audio acuired
    	 */
    	inline const uint8_t &getDigitalAudioAcquired() const { return std::get<1>(values_); }
    	inline void setDigitalAudioAcquired(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: SNR level
    	 */
    	inline const uint8_t &getSnrLevel() const { return std::get<2>(values_); }
    	inline void setSnrLevel(const uint8_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: RSSI level
    	 */
    	inline const uint16_t &getRssiLevel() const { return std::get<3>(values_); }
    	inline void setRssiLevel(const uint16_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const DrmReceptionInfo& _other) const {
                return (getRobustnessMode() == _other.getRobustnessMode() && getDigitalAudioAcquired() == _other.getDigitalAudioAcquired() && getSnrLevel() == _other.getSnrLevel() && getRssiLevel() == _other.getRssiLevel());
        }
    	inline bool operator!=(const DrmReceptionInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: DRM specific quality parameter
     */
    struct QualityDrm : CommonAPI::Struct<DrmBitErrorRatios, DrmChannelParams, DrmAudioProperties, DrmReceptionInfo> {
    	
    	QualityDrm() {
    	}
    	QualityDrm(const DrmBitErrorRatios &_bitErrorRatios, const DrmChannelParams &_channelParams, const DrmAudioProperties &_audioProperties, const DrmReceptionInfo &_receptionInfo)
    	{
    		std::get<0>(values_) = _bitErrorRatios;
    		std::get<1>(values_) = _channelParams;
    		std::get<2>(values_) = _audioProperties;
    		std::get<3>(values_) = _receptionInfo;
    	}
    	/**
    	 * description: DRM bit error ratios
    	 */
    	inline const DrmBitErrorRatios &getBitErrorRatios() const { return std::get<0>(values_); }
    	inline void setBitErrorRatios(const DrmBitErrorRatios &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: DRM channel paramters
    	 */
    	inline const DrmChannelParams &getChannelParams() const { return std::get<1>(values_); }
    	inline void setChannelParams(const DrmChannelParams &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: DRM audio properties
    	 */
    	inline const DrmAudioProperties &getAudioProperties() const { return std::get<2>(values_); }
    	inline void setAudioProperties(const DrmAudioProperties &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: DRM Reception information
    	 */
    	inline const DrmReceptionInfo &getReceptionInfo() const { return std::get<3>(values_); }
    	inline void setReceptionInfo(const DrmReceptionInfo &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const QualityDrm& _other) const {
                return (getBitErrorRatios() == _other.getBitErrorRatios() && getChannelParams() == _other.getChannelParams() && getAudioProperties() == _other.getAudioProperties() && getReceptionInfo() == _other.getReceptionInfo());
        }
    	inline bool operator!=(const QualityDrm &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Version information
     */
    struct VersionInfo : CommonAPI::Struct<VersionElement, std::string> {
    	
    	VersionInfo() {
    	}
    	VersionInfo(const VersionElement &_element, const std::string &_versionStr)
    	{
    		std::get<0>(values_) = _element;
    		std::get<1>(values_) = _versionStr;
    	}
    	/**
    	 * description: The element the version belongs to
    	 */
    	inline const VersionElement &getElement() const { return std::get<0>(values_); }
    	inline void setElement(const VersionElement &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: The version string
    	 */
    	inline const std::string &getVersionStr() const { return std::get<1>(values_); }
    	inline void setVersionStr(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const VersionInfo& _other) const {
                return (getElement() == _other.getElement() && getVersionStr() == _other.getVersionStr());
        }
    	inline bool operator!=(const VersionInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Vector of UInt32
     */
    typedef std::vector<OrinocoTunerIntrospectionTypes::AntennaInfo> AntennaInfos;
    /**
     * description: Vector of QualityAmFm
     */
    typedef std::vector<OrinocoTunerIntrospectionTypes::QualityAmFm> QualityAmFms;
    /**
     * description: Vector of QualityDab
     */
    typedef std::vector<OrinocoTunerIntrospectionTypes::QualityDab> QualityDabs;
    /**
     * description: Vector of QualityDrm
     */
    typedef std::vector<OrinocoTunerIntrospectionTypes::QualityDrm> QualityDrms;
    /**
     * description: Vector of VersionInfo
     */
    typedef std::vector<OrinocoTunerIntrospectionTypes::VersionInfo> VersionInfos;
    /**
     * description: Vector of ErrorElement
     */
    typedef std::vector<OrinocoTunerIntrospectionTypes::ErrorElement> ErrorElements;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.tuner.OrinocoTunerIntrospectionTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct OrinocoTunerIntrospectionTypes

} // namespace tuner
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for AntennaState
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::AntennaState> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::AntennaState& antennaState) const {
            return static_cast<int32_t>(antennaState);
        }
    };
    //Hash for Device
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device& device) const {
            return static_cast<int32_t>(device);
        }
    };
    //Hash for FactoryResetMode
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode& factoryResetMode) const {
            return static_cast<int32_t>(factoryResetMode);
        }
    };
    //Hash for VersionElement
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::VersionElement> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::VersionElement& versionElement) const {
            return static_cast<int32_t>(versionElement);
        }
    };
    //Hash for ErrorElement
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::ErrorElement> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::ErrorElement& errorElement) const {
            return static_cast<int32_t>(errorElement);
        }
    };
    //Hash for DabProtectionLevel
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DabProtectionLevel> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DabProtectionLevel& dabProtectionLevel) const {
            return static_cast<int32_t>(dabProtectionLevel);
        }
    };
    //Hash for DrmSpectrumOccupancy
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmSpectrumOccupancy> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmSpectrumOccupancy& drmSpectrumOccupancy) const {
            return static_cast<int32_t>(drmSpectrumOccupancy);
        }
    };
    //Hash for DrmInterleaverDepth
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmInterleaverDepth> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmInterleaverDepth& drmInterleaverDepth) const {
            return static_cast<int32_t>(drmInterleaverDepth);
        }
    };
    //Hash for DrmMscMode
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmMscMode> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmMscMode& drmMscMode) const {
            return static_cast<int32_t>(drmMscMode);
        }
    };
    //Hash for DrmSdcMode
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmSdcMode> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmSdcMode& drmSdcMode) const {
            return static_cast<int32_t>(drmSdcMode);
        }
    };
    //Hash for DrmSampleRate
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmSampleRate> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmSampleRate& drmSampleRate) const {
            return static_cast<int32_t>(drmSampleRate);
        }
    };
    //Hash for DrmAudioMode
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmAudioMode> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmAudioMode& drmAudioMode) const {
            return static_cast<int32_t>(drmAudioMode);
        }
    };
    //Hash for DrmSourceEncoding
    template<>
    struct hash<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmSourceEncoding> {
        inline size_t operator()(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::DrmSourceEncoding& drmSourceEncoding) const {
            return static_cast<int32_t>(drmSourceEncoding);
        }
    };
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_Types_HPP_
