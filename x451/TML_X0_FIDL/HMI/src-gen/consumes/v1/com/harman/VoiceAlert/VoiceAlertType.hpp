/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_VOICEALERT_Voice_Alert_Type_HPP_
#define V1_COM_HARMAN_VOICEALERT_Voice_Alert_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace VoiceAlert {

struct VoiceAlertType {
    
    struct CurDriveModeSig_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved = 11,
            En_Manual_Economy_Mode = 2,
            En_Reserved_13 = 13,
            En_Tiptronic_Economy_Mode = 8,
            En_Reserved_10 = 10,
            En_Reserved_9 = 9,
            En_Manual_Normal__City_Mode = 0,
            En_Tiptronic_Sport_Mode = 7,
            En_Automatic_Normal__City = 3,
            En_Automatic_Sport_Mode = 4,
            En_Tiptronic_Normal__City_Mode = 6,
            En_Automatic_Economy_Mode = 5,
            En_Manual_Sport_Mode = 1,
            En_Reserved_12 = 12,
            En_Reserved_15 = 15,
            En_Reserved_14 = 14
        };
        
        CurDriveModeSig_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved)) {}
        CurDriveModeSig_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_Manual_Economy_Mode):
                case static_cast<int32_t>(Literal::En_Reserved_13):
                case static_cast<int32_t>(Literal::En_Tiptronic_Economy_Mode):
                case static_cast<int32_t>(Literal::En_Reserved_10):
                case static_cast<int32_t>(Literal::En_Reserved_9):
                case static_cast<int32_t>(Literal::En_Manual_Normal__City_Mode):
                case static_cast<int32_t>(Literal::En_Tiptronic_Sport_Mode):
                case static_cast<int32_t>(Literal::En_Automatic_Normal__City):
                case static_cast<int32_t>(Literal::En_Automatic_Sport_Mode):
                case static_cast<int32_t>(Literal::En_Tiptronic_Normal__City_Mode):
                case static_cast<int32_t>(Literal::En_Automatic_Economy_Mode):
                case static_cast<int32_t>(Literal::En_Manual_Sport_Mode):
                case static_cast<int32_t>(Literal::En_Reserved_12):
                case static_cast<int32_t>(Literal::En_Reserved_15):
                case static_cast<int32_t>(Literal::En_Reserved_14):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CurDriveModeSig_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CurDriveModeSig_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CurDriveModeSig_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CurDriveModeSig_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CurDriveModeSig_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CurDriveModeSig_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HuAlertState_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Tail_Gate_open = 13,
            En_Door_Open__general_warning = 8,
            En_Rear_Right_door_open = 11,
            En_Auto_Mode = 1,
            En_Key_Fob_battery_Low = 25,
            En_Water_in_Fuel = 23,
            En_Smart_key_out_of_range = 26,
            En_Economy_Mode = 7,
            En_No_Warning = 0,
            En_Rear_Left_Tyre_Pressure_Monitoring = 19,
            En_Low_Oil_Pressure = 22,
            En_Comfort_Mode = 2,
            En_Service_Remainder = 24,
            En_Low_fuel_warning = 20,
            En_Driver_Seat_Belt_Remainder = 14,
            En_Park_Brake_ON = 15,
            En_Driver_Door_Open = 9,
            En_Front_Right_Tyre_Pressure_Monitoring = 16,
            En_Sport_Mode = 6,
            En_Low_Brake_fluid = 21,
            En_Dynamic_Mode = 3,
            En_Co_Driver_Door_open = 10,
            En_Rear_Right_Tyre_Pressure_Monitoring = 18,
            En_NormalCity_Mode = 5,
            En_Rough_Road_Mode = 4,
            En_Rear_Left_door_open = 12,
            En_Front_Left_Tyre_Pressure_Monitoring = 17
        };
        
        HuAlertState_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Tail_Gate_open)) {}
        HuAlertState_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Tail_Gate_open):
                case static_cast<int32_t>(Literal::En_Door_Open__general_warning):
                case static_cast<int32_t>(Literal::En_Rear_Right_door_open):
                case static_cast<int32_t>(Literal::En_Auto_Mode):
                case static_cast<int32_t>(Literal::En_Key_Fob_battery_Low):
                case static_cast<int32_t>(Literal::En_Water_in_Fuel):
                case static_cast<int32_t>(Literal::En_Smart_key_out_of_range):
                case static_cast<int32_t>(Literal::En_Economy_Mode):
                case static_cast<int32_t>(Literal::En_No_Warning):
                case static_cast<int32_t>(Literal::En_Rear_Left_Tyre_Pressure_Monitoring):
                case static_cast<int32_t>(Literal::En_Low_Oil_Pressure):
                case static_cast<int32_t>(Literal::En_Comfort_Mode):
                case static_cast<int32_t>(Literal::En_Service_Remainder):
                case static_cast<int32_t>(Literal::En_Low_fuel_warning):
                case static_cast<int32_t>(Literal::En_Driver_Seat_Belt_Remainder):
                case static_cast<int32_t>(Literal::En_Park_Brake_ON):
                case static_cast<int32_t>(Literal::En_Driver_Door_Open):
                case static_cast<int32_t>(Literal::En_Front_Right_Tyre_Pressure_Monitoring):
                case static_cast<int32_t>(Literal::En_Sport_Mode):
                case static_cast<int32_t>(Literal::En_Low_Brake_fluid):
                case static_cast<int32_t>(Literal::En_Dynamic_Mode):
                case static_cast<int32_t>(Literal::En_Co_Driver_Door_open):
                case static_cast<int32_t>(Literal::En_Rear_Right_Tyre_Pressure_Monitoring):
                case static_cast<int32_t>(Literal::En_NormalCity_Mode):
                case static_cast<int32_t>(Literal::En_Rough_Road_Mode):
                case static_cast<int32_t>(Literal::En_Rear_Left_door_open):
                case static_cast<int32_t>(Literal::En_Front_Left_Tyre_Pressure_Monitoring):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HuAlertState_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HuAlertState_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HuAlertState_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HuAlertState_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HuAlertState_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HuAlertState_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HuAlertStateMce_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved_for_future = 127,
            En_Reserved_for_future_126 = 126,
            En_Reserved_for_future_125 = 125,
            En_Reserved_for_future_124 = 124,
            En_Reserved_for_future_123 = 123,
            En_Reserved_for_future_122 = 122,
            En_Reserved_for_future_121 = 121,
            En_Reserved_for_future_120 = 120,
            En_Reserved_for_future_119 = 119,
            En_Reserved_for_future_118 = 118,
            En_Reserved_for_future_117 = 117,
            En_Reserved_for_future_116 = 116,
            En_Reserved_for_future_115 = 115,
            En_Reserved_for_future_114 = 114,
            En_Reserved_for_future_113 = 113,
            En_Reserved_for_future_112 = 112,
            En_Reserved_for_future_111 = 111,
            En_Reserved_for_future_110 = 110,
            En_Reserved_for_future_109 = 109,
            En_Reserved_for_future_108 = 108,
            En_Reserved_for_future_107 = 107,
            En_Reserved_for_future_106 = 106,
            En_Reserved_for_future_105 = 105,
            En_Reserved_for_future_104 = 104,
            En_Reserved_for_future_103 = 103,
            En_Reserved_for_future_102 = 102,
            En_Reserved_for_future_101 = 101,
            En_Reserved_for_future_100 = 100,
            En_Reserved_for_future_99 = 99,
            En_Reserved_for_future_98 = 98,
            En_Reserved_for_future_97 = 97,
            En_Reserved_for_future_96 = 96,
            En_Reserved_for_future_95 = 95,
            En_Reserved_for_future_94 = 94,
            En_Reserved_for_future_93 = 93,
            En_Reserved_for_future_92 = 92,
            En_Reserved_for_future_91 = 91,
            En_Reserved_for_future_90 = 90,
            En_Reserved_for_future_89 = 89,
            En_Reserved_for_future_88 = 88,
            En_Reserved_for_future_87 = 87,
            En_Reserved_for_future_86 = 86,
            En_Reserved_for_future_85 = 85,
            En_Reserved_for_future_84 = 84,
            En_Reserved_for_future_83 = 83,
            En_Reserved_for_future_82 = 82,
            En_Reserved_for_future_81 = 81,
            En_Reserved_for_future_80 = 80,
            En_Reserved_for_future_79 = 79,
            En_Reserved_for_future_78 = 78,
            En_Reserved_for_future_77 = 77,
            En_Reserved_for_future_76 = 76,
            En_Reserved_for_future_75 = 75,
            En_Reserved_for_future_74 = 74,
            En_Reserved_for_future_73 = 73,
            En_Reserved_for_future_72 = 72,
            En_Reserved_for_future_71 = 71,
            En_Reserved_for_future_70 = 70,
            En_Reserved_for_future_69 = 69,
            En_Reserved_for_future_68 = 68,
            En_Reserved_for_future_67 = 67,
            En_Reserved_for_future_66 = 66,
            En_Reserved_for_future_65 = 65,
            En_Reserved_for_future_64 = 64,
            En_Low_Ambient_Temperature__Its_Already_Cold_Outside = 63,
            En_Roll_Up_the_windows_if_down = 62,
            En_Express_Cooling_OFF_Roll_Up_the_windows_if_down = 61,
            En_Express_Cooling_ON_windows_may_roll_DOWN = 60,
            En_Express_Cooling_OFF = 59,
            En_Express_Cooling_ON = 58,
            En_Key_Not_Found = 57,
            En_Cruise_ONReady_to_Cruise = 56,
            En_Fasten_seat_belt_codriver = 55,
            En_Key_Fob_battery_Low = 54,
            En_Water_in_Fuel = 53,
            En_Drive_Alert1__Tea_Break = 52,
            En_Fuel_Level_Low_State = 51,
            En_Engine_Oil_Pressure_Low_State = 50,
            En_Fuel_filter_clogging = 49,
            En_Service_Reminder_Kms = 48,
            En_Service_Reminder_Days = 47,
            En_Cruise_Activated = 46,
            En_Forward_Collision_Warning_Indication = 45,
            En_Pressure_Leakage_Alert_Spare = 44,
            En_Pressure_Leakage_Alert_RR = 43,
            En_Pressure_Leakage_Alert_RL = 42,
            En_Pressure_Leakage_Alert_FR = 41,
            En_Pressure_Leakage_Alert_FL = 40,
            En_HighTireTemp_Alert_Spare = 39,
            En_HighTireTemp_Alert_RR = 38,
            En_HighTireTemp_Alert_RL = 37,
            En_HighTireTemp_Alert_FR = 36,
            En_HighTireTemp_Alert_FL = 35,
            En_High_Tire_Pressure_Alert_Spare = 34,
            En_High_Tire_Pressure_Alert_RR = 33,
            En_High_Tire_Pressure_Alert_RL = 32,
            En_High_Tire_Pressure_Alert_FR = 31,
            En_High_Tire_Pressure_Alert_FL = 30,
            En_Low_Tire_Pressure_Alert_Spare = 29,
            En_Low_Tire_Pressure_Alert_RR = 28,
            En_Low_Tire_Pressure_Alert_RL = 27,
            En_Low_Tire_Pressure_Alert_FR = 26,
            En_Low_Tire_Pressure_Alert_FL = 25,
            En_TPMS__General_warning = 24,
            En_Low_SoC_Indication = 23,
            En_Low_Brake_Fluid = 22,
            En_Park_Brake_Engaged = 21,
            En_HDC_Activated = 20,
            En_HDC_deactivated_due_to_speed_above_set_value = 19,
            En_Fasten_seat_belt__Driver = 18,
            En_Tail_gate_open = 17,
            En_Rear_left_door_open = 16,
            En_Rear_right_door_open = 15,
            En_CoDriver_Door_open = 14,
            En_Driver_Door_open = 13,
            En_Door_open_General_warning = 12,
            En_GrassSnow = 11,
            En_Sand = 10,
            En_MudRustGravel = 9,
            En_WetRain_Mode = 8,
            En_Economy_Mode = 7,
            En_Sport_Mode = 6,
            En_City_Mode = 5,
            En_Rough_Road_Mode = 4,
            En_Dynamic_Mode = 3,
            En_Comfort_mode = 2,
            En_Auto_Mode = 1,
            En_No_Warning = 0
        };
        
        HuAlertStateMce_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved_for_future)) {}
        HuAlertStateMce_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved_for_future):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_126):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_125):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_124):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_123):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_122):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_121):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_120):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_119):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_118):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_117):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_116):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_115):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_114):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_113):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_112):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_111):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_110):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_109):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_108):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_107):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_106):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_105):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_104):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_103):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_102):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_101):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_100):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_99):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_98):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_97):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_96):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_95):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_94):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_93):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_92):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_91):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_90):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_89):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_88):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_87):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_86):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_85):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_84):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_83):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_82):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_81):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_80):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_79):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_78):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_77):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_76):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_75):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_74):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_73):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_72):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_71):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_70):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_69):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_68):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_67):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_66):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_65):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_64):
                case static_cast<int32_t>(Literal::En_Low_Ambient_Temperature__Its_Already_Cold_Outside):
                case static_cast<int32_t>(Literal::En_Roll_Up_the_windows_if_down):
                case static_cast<int32_t>(Literal::En_Express_Cooling_OFF_Roll_Up_the_windows_if_down):
                case static_cast<int32_t>(Literal::En_Express_Cooling_ON_windows_may_roll_DOWN):
                case static_cast<int32_t>(Literal::En_Express_Cooling_OFF):
                case static_cast<int32_t>(Literal::En_Express_Cooling_ON):
                case static_cast<int32_t>(Literal::En_Key_Not_Found):
                case static_cast<int32_t>(Literal::En_Cruise_ONReady_to_Cruise):
                case static_cast<int32_t>(Literal::En_Fasten_seat_belt_codriver):
                case static_cast<int32_t>(Literal::En_Key_Fob_battery_Low):
                case static_cast<int32_t>(Literal::En_Water_in_Fuel):
                case static_cast<int32_t>(Literal::En_Drive_Alert1__Tea_Break):
                case static_cast<int32_t>(Literal::En_Fuel_Level_Low_State):
                case static_cast<int32_t>(Literal::En_Engine_Oil_Pressure_Low_State):
                case static_cast<int32_t>(Literal::En_Fuel_filter_clogging):
                case static_cast<int32_t>(Literal::En_Service_Reminder_Kms):
                case static_cast<int32_t>(Literal::En_Service_Reminder_Days):
                case static_cast<int32_t>(Literal::En_Cruise_Activated):
                case static_cast<int32_t>(Literal::En_Forward_Collision_Warning_Indication):
                case static_cast<int32_t>(Literal::En_Pressure_Leakage_Alert_Spare):
                case static_cast<int32_t>(Literal::En_Pressure_Leakage_Alert_RR):
                case static_cast<int32_t>(Literal::En_Pressure_Leakage_Alert_RL):
                case static_cast<int32_t>(Literal::En_Pressure_Leakage_Alert_FR):
                case static_cast<int32_t>(Literal::En_Pressure_Leakage_Alert_FL):
                case static_cast<int32_t>(Literal::En_HighTireTemp_Alert_Spare):
                case static_cast<int32_t>(Literal::En_HighTireTemp_Alert_RR):
                case static_cast<int32_t>(Literal::En_HighTireTemp_Alert_RL):
                case static_cast<int32_t>(Literal::En_HighTireTemp_Alert_FR):
                case static_cast<int32_t>(Literal::En_HighTireTemp_Alert_FL):
                case static_cast<int32_t>(Literal::En_High_Tire_Pressure_Alert_Spare):
                case static_cast<int32_t>(Literal::En_High_Tire_Pressure_Alert_RR):
                case static_cast<int32_t>(Literal::En_High_Tire_Pressure_Alert_RL):
                case static_cast<int32_t>(Literal::En_High_Tire_Pressure_Alert_FR):
                case static_cast<int32_t>(Literal::En_High_Tire_Pressure_Alert_FL):
                case static_cast<int32_t>(Literal::En_Low_Tire_Pressure_Alert_Spare):
                case static_cast<int32_t>(Literal::En_Low_Tire_Pressure_Alert_RR):
                case static_cast<int32_t>(Literal::En_Low_Tire_Pressure_Alert_RL):
                case static_cast<int32_t>(Literal::En_Low_Tire_Pressure_Alert_FR):
                case static_cast<int32_t>(Literal::En_Low_Tire_Pressure_Alert_FL):
                case static_cast<int32_t>(Literal::En_TPMS__General_warning):
                case static_cast<int32_t>(Literal::En_Low_SoC_Indication):
                case static_cast<int32_t>(Literal::En_Low_Brake_Fluid):
                case static_cast<int32_t>(Literal::En_Park_Brake_Engaged):
                case static_cast<int32_t>(Literal::En_HDC_Activated):
                case static_cast<int32_t>(Literal::En_HDC_deactivated_due_to_speed_above_set_value):
                case static_cast<int32_t>(Literal::En_Fasten_seat_belt__Driver):
                case static_cast<int32_t>(Literal::En_Tail_gate_open):
                case static_cast<int32_t>(Literal::En_Rear_left_door_open):
                case static_cast<int32_t>(Literal::En_Rear_right_door_open):
                case static_cast<int32_t>(Literal::En_CoDriver_Door_open):
                case static_cast<int32_t>(Literal::En_Driver_Door_open):
                case static_cast<int32_t>(Literal::En_Door_open_General_warning):
                case static_cast<int32_t>(Literal::En_GrassSnow):
                case static_cast<int32_t>(Literal::En_Sand):
                case static_cast<int32_t>(Literal::En_MudRustGravel):
                case static_cast<int32_t>(Literal::En_WetRain_Mode):
                case static_cast<int32_t>(Literal::En_Economy_Mode):
                case static_cast<int32_t>(Literal::En_Sport_Mode):
                case static_cast<int32_t>(Literal::En_City_Mode):
                case static_cast<int32_t>(Literal::En_Rough_Road_Mode):
                case static_cast<int32_t>(Literal::En_Dynamic_Mode):
                case static_cast<int32_t>(Literal::En_Comfort_mode):
                case static_cast<int32_t>(Literal::En_Auto_Mode):
                case static_cast<int32_t>(Literal::En_No_Warning):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HuAlertStateMce_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HuAlertStateMce_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HuAlertStateMce_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HuAlertStateMce_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HuAlertStateMce_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HuAlertStateMce_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HuAlertStateStatus_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Active = 1,
            En_Inactive = 0
        };
        
        HuAlertStateStatus_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Active)) {}
        HuAlertStateStatus_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HuAlertStateStatus_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HuAlertStateStatus_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HuAlertStateStatus_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HuAlertStateStatus_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HuAlertStateStatus_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HuAlertStateStatus_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HuHMISelection_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Voice__Text_Alert = 0,
            En_Text_Alert = 1,
            En_Voice_Alert = 2,
            En_Reserved = 3
        };
        
        HuHMISelection_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Voice__Text_Alert)) {}
        HuHMISelection_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Voice__Text_Alert):
                case static_cast<int32_t>(Literal::En_Text_Alert):
                case static_cast<int32_t>(Literal::En_Voice_Alert):
                case static_cast<int32_t>(Literal::En_Reserved):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HuHMISelection_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HuHMISelection_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HuHMISelection_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HuHMISelection_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HuHMISelection_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HuHMISelection_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HuInfoFeaturePresence_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Not_Present = 0,
            En_Present = 1
        };
        
        HuInfoFeaturePresence_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Not_Present)) {}
        HuInfoFeaturePresence_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Not_Present):
                case static_cast<int32_t>(Literal::En_Present):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HuInfoFeaturePresence_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HuInfoFeaturePresence_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HuInfoFeaturePresence_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HuInfoFeaturePresence_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HuInfoFeaturePresence_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HuInfoFeaturePresence_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HuAlertStatus_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_STATE_NO_ALERT = 0,
            En_STATE_RECEIVED = 1,
            En_STATE_QUEUED = 2,
            En_STATE_IGNORED = 5,
            En_STATE_IN_PROCESS = 3,
            En_STATE_DELIVERED = 4,
            En_STATE_ERROR = 7,
            En_STATE_ABORTED = 6
        };
        
        HuAlertStatus_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_STATE_NO_ALERT)) {}
        HuAlertStatus_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_STATE_NO_ALERT):
                case static_cast<int32_t>(Literal::En_STATE_RECEIVED):
                case static_cast<int32_t>(Literal::En_STATE_QUEUED):
                case static_cast<int32_t>(Literal::En_STATE_IGNORED):
                case static_cast<int32_t>(Literal::En_STATE_IN_PROCESS):
                case static_cast<int32_t>(Literal::En_STATE_DELIVERED):
                case static_cast<int32_t>(Literal::En_STATE_ERROR):
                case static_cast<int32_t>(Literal::En_STATE_ABORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HuAlertStatus_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HuAlertStatus_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HuAlertStatus_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HuAlertStatus_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HuAlertStatus_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HuAlertStatus_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.VoiceAlert.VoiceAlertType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 2);
}

}; // struct VoiceAlertType

} // namespace VoiceAlert
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for CurDriveModeSig_enum
    template<>
    struct hash<::v1::com::harman::VoiceAlert::VoiceAlertType::CurDriveModeSig_enum> {
        inline size_t operator()(const ::v1::com::harman::VoiceAlert::VoiceAlertType::CurDriveModeSig_enum& curDriveModeSig_enum) const {
            return static_cast<int32_t>(curDriveModeSig_enum);
        }
    };
    //Hash for HuAlertState_enum
    template<>
    struct hash<::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertState_enum> {
        inline size_t operator()(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertState_enum& huAlertState_enum) const {
            return static_cast<int32_t>(huAlertState_enum);
        }
    };
    //Hash for HuAlertStateMce_enum
    template<>
    struct hash<::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertStateMce_enum> {
        inline size_t operator()(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertStateMce_enum& huAlertStateMce_enum) const {
            return static_cast<int32_t>(huAlertStateMce_enum);
        }
    };
    //Hash for HuAlertStateStatus_enum
    template<>
    struct hash<::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertStateStatus_enum> {
        inline size_t operator()(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertStateStatus_enum& huAlertStateStatus_enum) const {
            return static_cast<int32_t>(huAlertStateStatus_enum);
        }
    };
    //Hash for HuHMISelection_enum
    template<>
    struct hash<::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum> {
        inline size_t operator()(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum& huHMISelection_enum) const {
            return static_cast<int32_t>(huHMISelection_enum);
        }
    };
    //Hash for HuInfoFeaturePresence_enum
    template<>
    struct hash<::v1::com::harman::VoiceAlert::VoiceAlertType::HuInfoFeaturePresence_enum> {
        inline size_t operator()(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuInfoFeaturePresence_enum& huInfoFeaturePresence_enum) const {
            return static_cast<int32_t>(huInfoFeaturePresence_enum);
        }
    };
    //Hash for HuAlertStatus_enum
    template<>
    struct hash<::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertStatus_enum> {
        inline size_t operator()(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertStatus_enum& huAlertStatus_enum) const {
            return static_cast<int32_t>(huAlertStatus_enum);
        }
    };
}


// Compatibility
namespace v1_2 = v1;

#endif // V1_COM_HARMAN_VOICEALERT_Voice_Alert_Type_HPP_
