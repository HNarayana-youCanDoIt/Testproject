/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_cppresnav_PROXY_HPP_
#define V1_COM_HARMAN_PRES_cppresnav_PROXY_HPP_

#include <v1/com/harman/pres/cppresnavProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

template <typename ... _AttributeExtensions>
class cppresnavProxy
    : virtual public cppresnav, 
      virtual public cppresnavProxyBase,
      virtual public _AttributeExtensions... {
public:
    cppresnavProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~cppresnavProxy();

    typedef cppresnav InterfaceType;


    /**
     * description: This attribute reflects the native VR Session Status
     */
    /**
     * Returns the wrapper class that provides access to the attribute naviSessionStatus.
     */
    virtual NaviSessionStatusAttribute& getNaviSessionStatusAttribute() {
        return delegate_->getNaviSessionStatusAttribute();
    }

    /**
     * description: callback function to notify navigation maneuver information
     */
    /**
     * Returns the wrapper class that provides access to the broadcast naviRouteGuidanceManeuverInfoUpdate.
     */
    virtual NaviRouteGuidanceManeuverInfoUpdateEvent& getNaviRouteGuidanceManeuverInfoUpdateEvent() {
        return delegate_->getNaviRouteGuidanceManeuverInfoUpdateEvent();
    }
    /**
     * description: callback function to notify navigation guidance
     */
    /**
     * Returns the wrapper class that provides access to the broadcast naviRouteGuidanceUpdate.
     */
    virtual NaviRouteGuidanceUpdateEvent& getNaviRouteGuidanceUpdateEvent() {
        return delegate_->getNaviRouteGuidanceUpdateEvent();
    }



    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<cppresnavProxyBase> delegate_;
};

typedef cppresnavProxy<> cppresnavProxyDefault;

namespace cppresnavExtensions {
    /**
     * description: This attribute reflects the native VR Session Status
     */
    template <template <typename > class _ExtensionType>
    class NaviSessionStatusAttributeExtension {
     public:
        typedef _ExtensionType<cppresnavProxyBase::NaviSessionStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cppresnavProxyBase::NaviSessionStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NaviSessionStatusAttributeExtension() {}
    #endif
    
        NaviSessionStatusAttributeExtension(cppresnavProxyBase& proxy): attributeExtension_(proxy.getNaviSessionStatusAttribute()) {
        }
    
        inline extension_type& getNaviSessionStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace cppresnavExtensions

//
// cppresnavProxy Implementation
//
template <typename ... _AttributeExtensions>
cppresnavProxy<_AttributeExtensions...>::cppresnavProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<cppresnavProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<cppresnavProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
cppresnavProxy<_AttributeExtensions...>::~cppresnavProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &cppresnavProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool cppresnavProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool cppresnavProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& cppresnavProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& cppresnavProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::pres::cppresnavProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::pres::cppresnavProxy<
            ::v1::com::harman::pres::cppresnavExtensions::NaviSessionStatusAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_PRES_cppresnav_PROXY_HPP_
