/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_cppresmedia_PROXY_BASE_HPP_
#define V1_COM_HARMAN_PRES_cppresmedia_PROXY_BASE_HPP_

#include <v1/com/harman/pres/cppresmedia.hpp>


#include <v1/com/harman/pres/pprestypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

class cppresmediaProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> ArtWorkFilePathAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::eArtWorkAvailabilityStatus> NowPlayingArtworkStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sNowPlayingInfo> NowPlayingDataAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::tTrackTimePosition> TrackTimePositionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::ePlayState> PlayStateAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::pres::pprestypes::sAlbumArtInformation&)> GetNowPlayingAlbumArtInformationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> GetNowPlayingAlbumArtPathAsyncCallback;

    /**
     * description: This attribute reflects the cuurent song artwork file path , HMI can use the
     *   path to fetch the jpg/png file
     */
    virtual ArtWorkFilePathAttribute& getArtWorkFilePathAttribute() = 0;
    /**
     * description: This attribute reflects the album art status for currently playing track. If
     *   true, then HMI can invoke getAlbumArt for more details
     */
    virtual NowPlayingArtworkStatusAttribute& getNowPlayingArtworkStatusAttribute() = 0;
    /**
     * description: nowPlayingData attribute provides metadata info
     */
    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute() = 0;
    /**
     * description: trackTimePosition attribute provides elapsed time and duration of songs
     */
    virtual TrackTimePositionAttribute& getTrackTimePositionAttribute() = 0;
    /**
     * description: playState attribute provides current playback status info
     */
    virtual PlayStateAttribute& getPlayStateAttribute() = 0;


    virtual void getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::pprestypes::sAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This request method allow client to  retrieves the album art image path for the
     *   currently playing track.      Here HMI has to pass the number of the album
     *   art.The total available artworks would have already supplied in the previous
     *   call      to getNowPlayingAlbumArtInformation.
     */
    virtual void getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_PRES_cppresmedia_PROXY_BASE_HPP_
