/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: This new interface is an extension of existing CallManager interface. 	This new
 *   interface is added to provide a common interface which will handles various
 *   	voice call scenarios from different modules like BT, Carplay etc.
 */
#ifndef V1_COM_HARMAN_BTPRES_Call_Manager_V2_PROXY_HPP_
#define V1_COM_HARMAN_BTPRES_Call_Manager_V2_PROXY_HPP_

#include <v1/com/harman/btpres/CallManagerV2ProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace btpres {

template <typename ... _AttributeExtensions>
class CallManagerV2Proxy
    : virtual public CallManagerV2, 
      virtual public CallManagerV2ProxyBase,
      virtual public _AttributeExtensions... {
public:
    CallManagerV2Proxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CallManagerV2Proxy();

    typedef CallManagerV2 InterfaceType;


    /**
     * description: broadcast phone network operator information to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute networkoperator.
     */
    virtual NetworkoperatorAttribute& getNetworkoperatorAttribute() {
        return delegate_->getNetworkoperatorAttribute();
    }
    /**
     * description: broadcast signal and charge levels to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute signalCharge.
     */
    virtual SignalChargeAttribute& getSignalChargeAttribute() {
        return delegate_->getSignalChargeAttribute();
    }
    /**
     * description: broadcast Handsfree supported features to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute handsfreeFeatures.
     */
    virtual HandsfreeFeaturesAttribute& getHandsfreeFeaturesAttribute() {
        return delegate_->getHandsfreeFeaturesAttribute();
    }
    /**
     * description: broadcast HF mode status to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute handsfreeModeStatus.
     */
    virtual HandsfreeModeStatusAttribute& getHandsfreeModeStatusAttribute() {
        return delegate_->getHandsfreeModeStatusAttribute();
    }
    /**
     * description: broadcast SCO audio status to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute audioModeStatus.
     */
    virtual AudioModeStatusAttribute& getAudioModeStatusAttribute() {
        return delegate_->getAudioModeStatusAttribute();
    }
    /**
     * description: broadcast VR status to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute vrModeStatus.
     */
    virtual VrModeStatusAttribute& getVrModeStatusAttribute() {
        return delegate_->getVrModeStatusAttribute();
    }
    /**
     * description: broadcast callstate status to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute callStates.
     */
    virtual CallStatesAttribute& getCallStatesAttribute() {
        return delegate_->getCallStatesAttribute();
    }
    /**
     * description: broadcast call duration to registered clients
     */
    /**
     * Returns the wrapper class that provides access to the attribute callDurations.
     */
    virtual CallDurationsAttribute& getCallDurationsAttribute() {
        return delegate_->getCallDurationsAttribute();
    }


    /**
     * description: Clients should use this API to control voice calls from different modules
     * param: actionType (ePhoneCallActionType): Actions like Accept, Reject, EndCall etc.
     * param: callerInfo (sVoiceCallInfo)		 : contains caller informations like number,
     *   contactName etc. 		returns: errorCode (eErrorType)	: API execution output
     * Calls controlVoiceCall with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void controlVoiceCall(const ::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType &_actionType, const ::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo &_callerInfo, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls controlVoiceCall with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> controlVoiceCallAsync(const ::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType &_actionType, const ::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo &_callerInfo, ControlVoiceCallAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<CallManagerV2ProxyBase> delegate_;
};

typedef CallManagerV2Proxy<> CallManagerV2ProxyDefault;

namespace CallManagerV2Extensions {
    /**
     * description: broadcast phone network operator information to registered clients
     */
    template <template <typename > class _ExtensionType>
    class NetworkoperatorAttributeExtension {
     public:
        typedef _ExtensionType<CallManagerV2ProxyBase::NetworkoperatorAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CallManagerV2ProxyBase::NetworkoperatorAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NetworkoperatorAttributeExtension() {}
    #endif
    
        NetworkoperatorAttributeExtension(CallManagerV2ProxyBase& proxy): attributeExtension_(proxy.getNetworkoperatorAttribute()) {
        }
    
        inline extension_type& getNetworkoperatorAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: broadcast signal and charge levels to registered clients
     */
    template <template <typename > class _ExtensionType>
    class SignalChargeAttributeExtension {
     public:
        typedef _ExtensionType<CallManagerV2ProxyBase::SignalChargeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CallManagerV2ProxyBase::SignalChargeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SignalChargeAttributeExtension() {}
    #endif
    
        SignalChargeAttributeExtension(CallManagerV2ProxyBase& proxy): attributeExtension_(proxy.getSignalChargeAttribute()) {
        }
    
        inline extension_type& getSignalChargeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: broadcast Handsfree supported features to registered clients
     */
    template <template <typename > class _ExtensionType>
    class HandsfreeFeaturesAttributeExtension {
     public:
        typedef _ExtensionType<CallManagerV2ProxyBase::HandsfreeFeaturesAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CallManagerV2ProxyBase::HandsfreeFeaturesAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HandsfreeFeaturesAttributeExtension() {}
    #endif
    
        HandsfreeFeaturesAttributeExtension(CallManagerV2ProxyBase& proxy): attributeExtension_(proxy.getHandsfreeFeaturesAttribute()) {
        }
    
        inline extension_type& getHandsfreeFeaturesAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: broadcast HF mode status to registered clients
     */
    template <template <typename > class _ExtensionType>
    class HandsfreeModeStatusAttributeExtension {
     public:
        typedef _ExtensionType<CallManagerV2ProxyBase::HandsfreeModeStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CallManagerV2ProxyBase::HandsfreeModeStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HandsfreeModeStatusAttributeExtension() {}
    #endif
    
        HandsfreeModeStatusAttributeExtension(CallManagerV2ProxyBase& proxy): attributeExtension_(proxy.getHandsfreeModeStatusAttribute()) {
        }
    
        inline extension_type& getHandsfreeModeStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: broadcast SCO audio status to registered clients
     */
    template <template <typename > class _ExtensionType>
    class AudioModeStatusAttributeExtension {
     public:
        typedef _ExtensionType<CallManagerV2ProxyBase::AudioModeStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CallManagerV2ProxyBase::AudioModeStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AudioModeStatusAttributeExtension() {}
    #endif
    
        AudioModeStatusAttributeExtension(CallManagerV2ProxyBase& proxy): attributeExtension_(proxy.getAudioModeStatusAttribute()) {
        }
    
        inline extension_type& getAudioModeStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: broadcast VR status to registered clients
     */
    template <template <typename > class _ExtensionType>
    class VrModeStatusAttributeExtension {
     public:
        typedef _ExtensionType<CallManagerV2ProxyBase::VrModeStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CallManagerV2ProxyBase::VrModeStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VrModeStatusAttributeExtension() {}
    #endif
    
        VrModeStatusAttributeExtension(CallManagerV2ProxyBase& proxy): attributeExtension_(proxy.getVrModeStatusAttribute()) {
        }
    
        inline extension_type& getVrModeStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: broadcast callstate status to registered clients
     */
    template <template <typename > class _ExtensionType>
    class CallStatesAttributeExtension {
     public:
        typedef _ExtensionType<CallManagerV2ProxyBase::CallStatesAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CallManagerV2ProxyBase::CallStatesAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CallStatesAttributeExtension() {}
    #endif
    
        CallStatesAttributeExtension(CallManagerV2ProxyBase& proxy): attributeExtension_(proxy.getCallStatesAttribute()) {
        }
    
        inline extension_type& getCallStatesAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: broadcast call duration to registered clients
     */
    template <template <typename > class _ExtensionType>
    class CallDurationsAttributeExtension {
     public:
        typedef _ExtensionType<CallManagerV2ProxyBase::CallDurationsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CallManagerV2ProxyBase::CallDurationsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CallDurationsAttributeExtension() {}
    #endif
    
        CallDurationsAttributeExtension(CallManagerV2ProxyBase& proxy): attributeExtension_(proxy.getCallDurationsAttribute()) {
        }
    
        inline extension_type& getCallDurationsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace CallManagerV2Extensions

//
// CallManagerV2Proxy Implementation
//
template <typename ... _AttributeExtensions>
CallManagerV2Proxy<_AttributeExtensions...>::CallManagerV2Proxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<CallManagerV2ProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<CallManagerV2ProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CallManagerV2Proxy<_AttributeExtensions...>::~CallManagerV2Proxy() {
}

/**
 * description: Clients should use this API to control voice calls from different modules
 * param: actionType (ePhoneCallActionType): Actions like Accept, Reject, EndCall etc.
 * param: callerInfo (sVoiceCallInfo)		 : contains caller informations like number,
 *   contactName etc. 		returns: errorCode (eErrorType)	: API execution output
 */
template <typename ... _AttributeExtensions>
void CallManagerV2Proxy<_AttributeExtensions...>::controlVoiceCall(const ::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType &_actionType, const ::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo &_callerInfo, CommonAPI::CallStatus &_internalCallStatus, ::v7::com::harman::btpres::BTPresTypes::eErrorType &_errorCode, const CommonAPI::CallInfo *_info) {
    if (!_actionType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->controlVoiceCall(_actionType, _callerInfo, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CallManagerV2Proxy<_AttributeExtensions...>::controlVoiceCallAsync(const ::v7::com::harman::btpres::BTPresTypes::ePhoneCallActionType &_actionType, const ::v7::com::harman::btpres::BTPresTypes::sVoiceCallInfo &_callerInfo, ControlVoiceCallAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_actionType.validate()) {
        ::v7::com::harman::btpres::BTPresTypes::eErrorType errorCode = ::v7::com::harman::btpres::BTPresTypes::eErrorType::ERROR_TYPE_SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, errorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->controlVoiceCallAsync(_actionType, _callerInfo, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CallManagerV2Proxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CallManagerV2Proxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CallManagerV2Proxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CallManagerV2Proxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CallManagerV2Proxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace btpres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::btpres::CallManagerV2Proxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::btpres::CallManagerV2Proxy<
            ::v1::com::harman::btpres::CallManagerV2Extensions::NetworkoperatorAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::CallManagerV2Extensions::SignalChargeAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::CallManagerV2Extensions::HandsfreeFeaturesAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::CallManagerV2Extensions::HandsfreeModeStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::CallManagerV2Extensions::AudioModeStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::CallManagerV2Extensions::VrModeStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::CallManagerV2Extensions::CallStatesAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::btpres::CallManagerV2Extensions::CallDurationsAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_BTPRES_Call_Manager_V2_PROXY_HPP_
