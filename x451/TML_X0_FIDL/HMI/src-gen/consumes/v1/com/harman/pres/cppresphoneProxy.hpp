/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_cppresphone_PROXY_HPP_
#define V1_COM_HARMAN_PRES_cppresphone_PROXY_HPP_

#include <v1/com/harman/pres/cppresphoneProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

template <typename ... _AttributeExtensions>
class cppresphoneProxy
    : virtual public cppresphone, 
      virtual public cppresphoneProxyBase,
      virtual public _AttributeExtensions... {
public:
    cppresphoneProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~cppresphoneProxy();

    typedef cppresphone InterfaceType;


    /**
     * description: This attribute reflects the  current callinfo details
     */
    /**
     * Returns the wrapper class that provides access to the attribute CallInfo.
     */
    virtual CallInfoAttribute& getCallInfoAttribute() {
        return delegate_->getCallInfoAttribute();
    }
    /**
     * description: teleUpdateData attribute provides telephony info
     */
    /**
     * Returns the wrapper class that provides access to the attribute teleUpdateData.
     */
    virtual TeleUpdateDataAttribute& getTeleUpdateDataAttribute() {
        return delegate_->getTeleUpdateDataAttribute();
    }


    /**
     * description: Method to accept carplay call
     * Calls acceptCall with Fire&Forget semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void acceptCall(CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: Method to reject carplay call
     * Calls rejectCall with Fire&Forget semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void rejectCall(CommonAPI::CallStatus &_internalCallStatus);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<cppresphoneProxyBase> delegate_;
};

typedef cppresphoneProxy<> cppresphoneProxyDefault;

namespace cppresphoneExtensions {
    /**
     * description: This attribute reflects the  current callinfo details
     */
    template <template <typename > class _ExtensionType>
    class CallInfoAttributeExtension {
     public:
        typedef _ExtensionType<cppresphoneProxyBase::CallInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cppresphoneProxyBase::CallInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CallInfoAttributeExtension() {}
    #endif
    
        CallInfoAttributeExtension(cppresphoneProxyBase& proxy): attributeExtension_(proxy.getCallInfoAttribute()) {
        }
    
        inline extension_type& getCallInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: teleUpdateData attribute provides telephony info
     */
    template <template <typename > class _ExtensionType>
    class TeleUpdateDataAttributeExtension {
     public:
        typedef _ExtensionType<cppresphoneProxyBase::TeleUpdateDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cppresphoneProxyBase::TeleUpdateDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TeleUpdateDataAttributeExtension() {}
    #endif
    
        TeleUpdateDataAttributeExtension(cppresphoneProxyBase& proxy): attributeExtension_(proxy.getTeleUpdateDataAttribute()) {
        }
    
        inline extension_type& getTeleUpdateDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace cppresphoneExtensions

//
// cppresphoneProxy Implementation
//
template <typename ... _AttributeExtensions>
cppresphoneProxy<_AttributeExtensions...>::cppresphoneProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<cppresphoneProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<cppresphoneProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
cppresphoneProxy<_AttributeExtensions...>::~cppresphoneProxy() {
}

/**
 * description: Method to accept carplay call
 */
template <typename ... _AttributeExtensions>
void cppresphoneProxy<_AttributeExtensions...>::acceptCall(CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->acceptCall(_internalCallStatus);
}
/**
 * description: Method to reject carplay call
 */
template <typename ... _AttributeExtensions>
void cppresphoneProxy<_AttributeExtensions...>::rejectCall(CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->rejectCall(_internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &cppresphoneProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool cppresphoneProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool cppresphoneProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& cppresphoneProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& cppresphoneProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::pres::cppresphoneProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::pres::cppresphoneProxy<
            ::v1::com::harman::pres::cppresphoneExtensions::CallInfoAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::pres::cppresphoneExtensions::TeleUpdateDataAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_PRES_cppresphone_PROXY_HPP_
