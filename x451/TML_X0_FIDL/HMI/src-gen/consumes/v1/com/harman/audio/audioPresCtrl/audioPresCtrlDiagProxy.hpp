/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: This is a Common API DBUS diagnostics interface of audio presentation
 *   controller for Orinoco 2.0
 * author: AYatheesh
 */
#ifndef V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_PROXY_HPP_
#define V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_PROXY_HPP_

#include <v1/com/harman/audio/audioPresCtrl/audioPresCtrlDiagProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace audio {
namespace audioPresCtrl {

template <typename ... _AttributeExtensions>
class audioPresCtrlDiagProxy
    : virtual public audioPresCtrlDiag, 
      virtual public audioPresCtrlDiagProxyBase,
      virtual public _AttributeExtensions... {
public:
    audioPresCtrlDiagProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~audioPresCtrlDiagProxy();

    typedef audioPresCtrlDiag InterfaceType;


    /**
     * description: Attribute holding Frequency Value
     */
    /**
     * Returns the wrapper class that provides access to the attribute ActiveFrequency.
     */
    virtual ActiveFrequencyAttribute& getActiveFrequencyAttribute() {
        return delegate_->getActiveFrequencyAttribute();
    }
    /**
     * description: Attribute holding Speaker Mask Set
     */
    /**
     * Returns the wrapper class that provides access to the attribute ActiveSpeakerMask.
     */
    virtual ActiveSpeakerMaskAttribute& getActiveSpeakerMaskAttribute() {
        return delegate_->getActiveSpeakerMaskAttribute();
    }
    /**
     * description: Attribute holding Volume Set in Percentage
     */
    /**
     * Returns the wrapper class that provides access to the attribute ActiveVolumePercent.
     */
    virtual ActiveVolumePercentAttribute& getActiveVolumePercentAttribute() {
        return delegate_->getActiveVolumePercentAttribute();
    }


    /**
     * description: For diagnostic purpose to test one or multiple speakers 	(at)return
     *   eAudioPresErrors
     * Calls TestSpeaker with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void TestSpeaker(const uint16_t &_speakerMask, const double &_frequency, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls TestSpeaker with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> TestSpeakerAsync(const uint16_t &_speakerMask, const double &_frequency, TestSpeakerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to play a sine signal with sine generator with special
     *   parameters.     (at)return eAudioPresErrors
     * Calls playSineTone with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playSineTone(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eSampleRateType &_sampleRate, const int16_t &_frequency, const int16_t &_pauseTime, const int16_t &_pulseTime, const int16_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playSineTone with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playSineToneAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eSampleRateType &_sampleRate, const int16_t &_frequency, const int16_t &_pauseTime, const int16_t &_pulseTime, const int16_t &_repeatCount, PlaySineToneAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This function is used to stop playing sine tone for diagnostics purpose    
     *   (at)return eAudioPresErrors
     * Calls StopSineTone with synchronous semantics.
     * 
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StopSineTone(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StopSineTone with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StopSineToneAsync(StopSineToneAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: For diagnostic purpose to Start Diagnostic Session 	(at)return eAudioPresErrors
     * Calls DiagTestStart with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DiagTestStart(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DiagTestStart with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DiagTestStartAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, DiagTestStartAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: For diagnostic purpose to Stop Diagnostic Session 	(at)return eAudioPresErrors
     * Calls DiagTestStop with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DiagTestStop(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DiagTestStop with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DiagTestStopAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, DiagTestStopAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: For diagnostic purpose to Set Volume in percentage 	(at)return eAudioPresErrors
     * Calls SetVolumePercentage with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetVolumePercentage(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, const uint16_t &_volumePercent, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetVolumePercentage with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetVolumePercentageAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, const uint16_t &_volumePercent, SetVolumePercentageAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<audioPresCtrlDiagProxyBase> delegate_;
};

typedef audioPresCtrlDiagProxy<> audioPresCtrlDiagProxyDefault;

namespace audioPresCtrlDiagExtensions {
    /**
     * description: Attribute holding Frequency Value
     */
    template <template <typename > class _ExtensionType>
    class ActiveFrequencyAttributeExtension {
     public:
        typedef _ExtensionType<audioPresCtrlDiagProxyBase::ActiveFrequencyAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<audioPresCtrlDiagProxyBase::ActiveFrequencyAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ActiveFrequencyAttributeExtension() {}
    #endif
    
        ActiveFrequencyAttributeExtension(audioPresCtrlDiagProxyBase& proxy): attributeExtension_(proxy.getActiveFrequencyAttribute()) {
        }
    
        inline extension_type& getActiveFrequencyAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Attribute holding Speaker Mask Set
     */
    template <template <typename > class _ExtensionType>
    class ActiveSpeakerMaskAttributeExtension {
     public:
        typedef _ExtensionType<audioPresCtrlDiagProxyBase::ActiveSpeakerMaskAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<audioPresCtrlDiagProxyBase::ActiveSpeakerMaskAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ActiveSpeakerMaskAttributeExtension() {}
    #endif
    
        ActiveSpeakerMaskAttributeExtension(audioPresCtrlDiagProxyBase& proxy): attributeExtension_(proxy.getActiveSpeakerMaskAttribute()) {
        }
    
        inline extension_type& getActiveSpeakerMaskAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Attribute holding Volume Set in Percentage
     */
    template <template <typename > class _ExtensionType>
    class ActiveVolumePercentAttributeExtension {
     public:
        typedef _ExtensionType<audioPresCtrlDiagProxyBase::ActiveVolumePercentAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<audioPresCtrlDiagProxyBase::ActiveVolumePercentAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ActiveVolumePercentAttributeExtension() {}
    #endif
    
        ActiveVolumePercentAttributeExtension(audioPresCtrlDiagProxyBase& proxy): attributeExtension_(proxy.getActiveVolumePercentAttribute()) {
        }
    
        inline extension_type& getActiveVolumePercentAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace audioPresCtrlDiagExtensions

//
// audioPresCtrlDiagProxy Implementation
//
template <typename ... _AttributeExtensions>
audioPresCtrlDiagProxy<_AttributeExtensions...>::audioPresCtrlDiagProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<audioPresCtrlDiagProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<audioPresCtrlDiagProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
audioPresCtrlDiagProxy<_AttributeExtensions...>::~audioPresCtrlDiagProxy() {
}

/**
 * description: For diagnostic purpose to test one or multiple speakers 	(at)return
 *   eAudioPresErrors
 */
template <typename ... _AttributeExtensions>
void audioPresCtrlDiagProxy<_AttributeExtensions...>::TestSpeaker(const uint16_t &_speakerMask, const double &_frequency, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info) {
    delegate_->TestSpeaker(_speakerMask, _frequency, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> audioPresCtrlDiagProxy<_AttributeExtensions...>::TestSpeakerAsync(const uint16_t &_speakerMask, const double &_frequency, TestSpeakerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->TestSpeakerAsync(_speakerMask, _frequency, _callback, _info);
}
/**
 * description: This function is used to play a sine signal with sine generator with special
 *   parameters.     (at)return eAudioPresErrors
 */
template <typename ... _AttributeExtensions>
void audioPresCtrlDiagProxy<_AttributeExtensions...>::playSineTone(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eSampleRateType &_sampleRate, const int16_t &_frequency, const int16_t &_pauseTime, const int16_t &_pulseTime, const int16_t &_repeatCount, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info) {
    if (!_sampleRate.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->playSineTone(_sampleRate, _frequency, _pauseTime, _pulseTime, _repeatCount, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> audioPresCtrlDiagProxy<_AttributeExtensions...>::playSineToneAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eSampleRateType &_sampleRate, const int16_t &_frequency, const int16_t &_pauseTime, const int16_t &_pulseTime, const int16_t &_repeatCount, PlaySineToneAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_sampleRate.validate()) {
        ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->playSineToneAsync(_sampleRate, _frequency, _pauseTime, _pulseTime, _repeatCount, _callback, _info);
}
/**
 * description: This function is used to stop playing sine tone for diagnostics purpose    
 *   (at)return eAudioPresErrors
 */
template <typename ... _AttributeExtensions>
void audioPresCtrlDiagProxy<_AttributeExtensions...>::StopSineTone(CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info) {
    delegate_->StopSineTone(_internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> audioPresCtrlDiagProxy<_AttributeExtensions...>::StopSineToneAsync(StopSineToneAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->StopSineToneAsync(_callback, _info);
}
/**
 * description: For diagnostic purpose to Start Diagnostic Session 	(at)return eAudioPresErrors
 */
template <typename ... _AttributeExtensions>
void audioPresCtrlDiagProxy<_AttributeExtensions...>::DiagTestStart(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info) {
    if (!_diagModeType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->DiagTestStart(_diagModeType, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> audioPresCtrlDiagProxy<_AttributeExtensions...>::DiagTestStartAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, DiagTestStartAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_diagModeType.validate()) {
        ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->DiagTestStartAsync(_diagModeType, _callback, _info);
}
/**
 * description: For diagnostic purpose to Stop Diagnostic Session 	(at)return eAudioPresErrors
 */
template <typename ... _AttributeExtensions>
void audioPresCtrlDiagProxy<_AttributeExtensions...>::DiagTestStop(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info) {
    if (!_diagModeType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->DiagTestStop(_diagModeType, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> audioPresCtrlDiagProxy<_AttributeExtensions...>::DiagTestStopAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, DiagTestStopAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_diagModeType.validate()) {
        ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->DiagTestStopAsync(_diagModeType, _callback, _info);
}
/**
 * description: For diagnostic purpose to Set Volume in percentage 	(at)return eAudioPresErrors
 */
template <typename ... _AttributeExtensions>
void audioPresCtrlDiagProxy<_AttributeExtensions...>::SetVolumePercentage(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, const uint16_t &_volumePercent, CommonAPI::CallStatus &_internalCallStatus, ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors &_error, const CommonAPI::CallInfo *_info) {
    if (!_diagModeType.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->SetVolumePercentage(_diagModeType, _volumePercent, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> audioPresCtrlDiagProxy<_AttributeExtensions...>::SetVolumePercentageAsync(const ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eDiagModeType &_diagModeType, const uint16_t &_volumePercent, SetVolumePercentageAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_diagModeType.validate()) {
        ::v3::com::harman::audio::audioPresCtrl::audioPresCtrlTypes::eAudioPresErrors error;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, error);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->SetVolumePercentageAsync(_diagModeType, _volumePercent, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &audioPresCtrlDiagProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool audioPresCtrlDiagProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool audioPresCtrlDiagProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& audioPresCtrlDiagProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& audioPresCtrlDiagProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace audioPresCtrl
} // namespace audio
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagProxy<
            ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagExtensions::ActiveFrequencyAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagExtensions::ActiveSpeakerMaskAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::audio::audioPresCtrl::audioPresCtrlDiagExtensions::ActiveVolumePercentAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_AUDIO_AUDIOPRESCTRL_audio_Pres_Ctrl_Diag_PROXY_HPP_
