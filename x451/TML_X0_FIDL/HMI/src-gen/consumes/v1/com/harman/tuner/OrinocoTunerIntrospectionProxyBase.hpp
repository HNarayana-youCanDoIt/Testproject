/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Orinoco specific tuner introspection interface. This interface is a facade to a
 *   bunch of platform     interfaces in order to provide a simplified access to
 *   tuner diagnosis/engineering data and functionality.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2016
 */
#ifndef V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_PROXY_BASE_HPP_
#define V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_PROXY_BASE_HPP_

#include <v1/com/harman/tuner/OrinocoTunerIntrospection.hpp>


#include <v1/com/harman/tuner/OrinocoTunerIntrospectionTypes.hpp>
#include <v3/com/harman/tuner/OrinocoTunerTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace tuner {

class OrinocoTunerIntrospectionProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v3::com::harman::tuner::OrinocoTunerTypes::UInt32s> PowerSyncAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::AntennaInfos> AntennaInfosAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device> DevicesInIntrospectionModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::VersionInfos> VersionInfosAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::ErrorElements> ActiveErrorsAttribute;
    typedef CommonAPI::Event<
        ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode
    > FactoryResetEvent;
    typedef CommonAPI::Event<
        ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::QualityAmFms, ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::QualityDabs, ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::QualityDrms
    > QualityMonitorEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> PerformFactoryResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SwitchAntennaPowerSupplyAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SwitchIntrospectionModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> TuneAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> ControlQualityMonitorAsyncCallback;

    /**
     * description: List of power sync frequencies. The specific order and meaning of the entries
     *   is defined by a         project specific enum PowerSyncIndex
     */
    virtual PowerSyncAttribute& getPowerSyncAttribute() = 0;
    /**
     * description: Antenna information
     */
    virtual AntennaInfosAttribute& getAntennaInfosAttribute() = 0;
    /**
     * description: Bitmask of tuner devices with enabled introspection mode        CAUTION: The
     *   introspection mode can lead to unexspected behavior and reduced functionality,
     *   don't forget to disable again!
     */
    virtual DevicesInIntrospectionModeAttribute& getDevicesInIntrospectionModeAttribute() = 0;
    /**
     * description: Version information (e.g. firmware versions)
     */
    virtual VersionInfosAttribute& getVersionInfosAttribute() = 0;
    /**
     * description: Active fatal errors
     */
    virtual ActiveErrorsAttribute& getActiveErrorsAttribute() = 0;

    /**
     * description: Factory reset done
     */
    virtual FactoryResetEvent& getFactoryResetEvent() = 0;
    /**
     * description: Quality values. Only sent if enabled via controlQualityMonitor.
     */
    virtual QualityMonitorEvent& getQualityMonitorEvent() = 0;

    /**
     * description: Perform factory reset of peristent data, broadcast factoryReset will be called
     *   when done
     */
    virtual void performFactoryReset(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode &_factoryResetMode, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> performFactoryResetAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::FactoryResetMode &_factoryResetMode, PerformFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Disable/enable antenna power supply. After toggling the power supply the
     *   corresponding "antennaInfo"        entry will change
     */
    virtual void switchAntennaPowerSupply(const std::string &_name, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> switchAntennaPowerSupplyAsync(const std::string &_name, const bool &_enable, SwitchAntennaPowerSupplyAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Enable introspection mode        CAUTION: The introspection mode can lead to
     *   unexspected behavior and reduced functionality, don't forget to disable again!
     */
    virtual void switchIntrospectionMode(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const bool &_enable, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> switchIntrospectionModeAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const bool &_enable, SwitchIntrospectionModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: 
     */
    virtual void tune(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const uint8_t &_deviceInstance, const uint32_t &_frequency, const std::string &_frequencyLabel, const bool &_automaticServiceSelection, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> tuneAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, const uint8_t &_deviceInstance, const uint32_t &_frequency, const std::string &_frequencyLabel, const bool &_automaticServiceSelection, TuneAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Start/stop sending the quality values for a specific device incl. cyclic
     *   updates (via qualityMonitor).
     */
    virtual void controlQualityMonitor(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> controlQualityMonitorAsync(const ::v1::com::harman::tuner::OrinocoTunerIntrospectionTypes::Device &_device, ControlQualityMonitorAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace tuner
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_TUNER_Orinoco_Tuner_Introspection_PROXY_BASE_HPP_
