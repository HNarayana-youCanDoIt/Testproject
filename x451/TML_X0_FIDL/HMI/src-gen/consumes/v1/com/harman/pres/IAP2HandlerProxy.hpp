/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_IAP2_Handler_PROXY_HPP_
#define V1_COM_HARMAN_PRES_IAP2_Handler_PROXY_HPP_

#include <v1/com/harman/pres/IAP2HandlerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

template <typename ... _AttributeExtensions>
class IAP2HandlerProxy
    : virtual public IAP2Handler, 
      virtual public IAP2HandlerProxyBase,
      virtual public _AttributeExtensions... {
public:
    IAP2HandlerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~IAP2HandlerProxy();

    typedef IAP2Handler InterfaceType;



    /**
     * description: This broadcast notifies dbus instanceName of IAP2 launched. 		 		"devicepath"
     *   is only applicable for USB_HOST, BT & WIFI transports. 		"deviceId" is only
     *   applicable for USB_HOST & USB_DEVICE.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast IAP2Started.
     */
    virtual IAP2StartedEvent& getIAP2StartedEvent() {
        return delegate_->getIAP2StartedEvent();
    }
    /**
     * description: This broadcast notifies dbus instanceName of IAP2 terminated. 	
     *   		"instanceName" : dbus instanceName of IAP2 driver terminated.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast iAP2Stopped.
     */
    virtual IAP2StoppedEvent& getIAP2StoppedEvent() {
        return delegate_->getIAP2StoppedEvent();
    }

    /**
     * description: This method to be called to start IAP2 driver. 	 		This is to be called for
     *   transport over BT & WIFI.  		For USB_HOST & USB_DEVICE transports,
     *   devPresCntrl itself starts IAP2 driver. 		 		dbus instanceName of launched
     *   IAP2 driver can be found with broadcast "IAP2Started".
     * Calls startIAP2 with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startIAP2(const ::v1::com::harman::pres::devprestypes::eIAP2Transport &_transport, const std::vector<::v1::com::harman::pres::devprestypes::eIAP2Mode> &_modes, const std::string &_devicePath, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startIAP2 with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startIAP2Async(const ::v1::com::harman::pres::devprestypes::eIAP2Transport &_transport, const std::vector<::v1::com::harman::pres::devprestypes::eIAP2Mode> &_modes, const std::string &_devicePath, StartIAP2AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to be called to stop IAP2 driver. 	 		"instanceName" : dbus
     *   instanceName of IAP2 driver to be terminated.
     * Calls stopIAP2 with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stopIAP2(const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stopIAP2 with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopIAP2Async(const std::string &_instanceName, StopIAP2AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This getter notifies dbus instanceName of IAP2 currently launched. 
     *   	"devicepath" is only applicable for USB_HOST, BT & WIFI transports.
     *   	"deviceId" is only applicable for USB_HOST & USB_DEVICE.  	instanceName and
     *   devicePath will be null if iap2 is not active
     * Calls getIAP2Started with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getIAP2Started(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::vIAP2Info &_iap2StackInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getIAP2Started with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getIAP2StartedAsync(GetIAP2StartedAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<IAP2HandlerProxyBase> delegate_;
};

typedef IAP2HandlerProxy<> IAP2HandlerProxyDefault;


//
// IAP2HandlerProxy Implementation
//
template <typename ... _AttributeExtensions>
IAP2HandlerProxy<_AttributeExtensions...>::IAP2HandlerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<IAP2HandlerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<IAP2HandlerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
IAP2HandlerProxy<_AttributeExtensions...>::~IAP2HandlerProxy() {
}

/**
 * description: This method to be called to start IAP2 driver. 	 		This is to be called for
 *   transport over BT & WIFI.  		For USB_HOST & USB_DEVICE transports,
 *   devPresCntrl itself starts IAP2 driver. 		 		dbus instanceName of launched
 *   IAP2 driver can be found with broadcast "IAP2Started".
 */
template <typename ... _AttributeExtensions>
void IAP2HandlerProxy<_AttributeExtensions...>::startIAP2(const ::v1::com::harman::pres::devprestypes::eIAP2Transport &_transport, const std::vector<::v1::com::harman::pres::devprestypes::eIAP2Mode> &_modes, const std::string &_devicePath, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
    if (!_transport.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->startIAP2(_transport, _modes, _devicePath, _internalCallStatus, _ackStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IAP2HandlerProxy<_AttributeExtensions...>::startIAP2Async(const ::v1::com::harman::pres::devprestypes::eIAP2Transport &_transport, const std::vector<::v1::com::harman::pres::devprestypes::eIAP2Mode> &_modes, const std::string &_devicePath, StartIAP2AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_transport.validate()) {
        ::v1::com::harman::pres::devprestypes::eAcknowledgement ackStatus = ::v1::com::harman::pres::devprestypes::eAcknowledgement::VALID_INPUT;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ackStatus);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->startIAP2Async(_transport, _modes, _devicePath, _callback, _info);
}
/**
 * description: This method to be called to stop IAP2 driver. 	 		"instanceName" : dbus
 *   instanceName of IAP2 driver to be terminated.
 */
template <typename ... _AttributeExtensions>
void IAP2HandlerProxy<_AttributeExtensions...>::stopIAP2(const std::string &_instanceName, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::eAcknowledgement &_ackStatus, const CommonAPI::CallInfo *_info) {
    delegate_->stopIAP2(_instanceName, _internalCallStatus, _ackStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IAP2HandlerProxy<_AttributeExtensions...>::stopIAP2Async(const std::string &_instanceName, StopIAP2AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->stopIAP2Async(_instanceName, _callback, _info);
}
/**
 * description: This getter notifies dbus instanceName of IAP2 currently launched. 
 *   	"devicepath" is only applicable for USB_HOST, BT & WIFI transports.
 *   	"deviceId" is only applicable for USB_HOST & USB_DEVICE.  	instanceName and
 *   devicePath will be null if iap2 is not active
 */
template <typename ... _AttributeExtensions>
void IAP2HandlerProxy<_AttributeExtensions...>::getIAP2Started(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::devprestypes::vIAP2Info &_iap2StackInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getIAP2Started(_internalCallStatus, _iap2StackInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IAP2HandlerProxy<_AttributeExtensions...>::getIAP2StartedAsync(GetIAP2StartedAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getIAP2StartedAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &IAP2HandlerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool IAP2HandlerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool IAP2HandlerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& IAP2HandlerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& IAP2HandlerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_PRES_IAP2_Handler_PROXY_HPP_
