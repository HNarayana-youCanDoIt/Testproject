/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_aaprescontrols_PROXY_BASE_HPP_
#define V1_COM_HARMAN_PRES_aaprescontrols_PROXY_BASE_HPP_

#include <v1/com/harman/pres/aaprescontrols.hpp>


#include <v1/com/harman/pres/pprestypes.hpp>
#include <v2/com/harman/pres/aaprestypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

class aaprescontrolsProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sSessionDetails> SessionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::vector<::v1::com::harman::pres::pprestypes::sDevDetails>> DeviceInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sBatteryLevelInfo> BatteryInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sMediaPlaybackStatusUpdate> PlaybackStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sSongNodeUpdate> SongNodeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sMetaDataUpdate> MetadataAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sNaviNextTurnInfo> TurnInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::sNaviNextTurnDistInfo> TurnDistInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::navigationFocusType> NavFocusTypeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::navigationStatusType> NavStatusTypeAttribute;


    /**
     * description: sessions attribute is responsible to maintain status of projection sessions
     */
    virtual SessionAttribute& getSessionAttribute() = 0;
    /**
     * description: This attribute reflects the known wireless androidauto devices list update
     */
    virtual DeviceInfoAttribute& getDeviceInfoAttribute() = 0;
    /**
     * description: Data Structure to hold the device batteryLevel info, data members are as follows
     * param: batteryLevelPercentage The current battery percentage of the mobile device.
     * param: timeRemainingS An estimate of how long the battery will last, in seconds.
     * param: isBatteryCritical Whether the mobile device's battery is at a critical level,
     *   as determined by the mobile device.
     */
    virtual BatteryInfoAttribute& getBatteryInfoAttribute() = 0;
    /**
     * description: Attributes to hold the metadata,playback status,Navigation info.
     */
    virtual PlaybackStatusAttribute& getPlaybackStatusAttribute() = 0;
    virtual SongNodeAttribute& getSongNodeAttribute() = 0;
    virtual MetadataAttribute& getMetadataAttribute() = 0;
    virtual TurnInfoAttribute& getTurnInfoAttribute() = 0;
    virtual TurnDistInfoAttribute& getTurnDistInfoAttribute() = 0;
    virtual NavFocusTypeAttribute& getNavFocusTypeAttribute() = 0;
    virtual NavStatusTypeAttribute& getNavStatusTypeAttribute() = 0;


    /**
     * description: Message indicates that the AndroidAuto session is requested
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void startProjection(const std::string &_appUrl, const ::v2::com::harman::pres::aaprestypes::sTransportInfo &_tranportInfo, const ::v2::com::harman::pres::aaprestypes::enTransportType &_type, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * @invariant Fire And Forget
     */
    virtual void stopProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This request method allows client to request for the Projection screen        
     *   	show : true - show 		false - hide , If false client can disregard layer and
     *   appUrl 	appUrl : URL identifier of the desired application to launch 	  Blank
     *   String: native screen will be launched 	  other apps: tbd
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void requestProjection(const std::string &_appUrl, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: Method to request for the screen hide 	switchReason : reason for switching out
     *   of the android auto screen , refer enum values
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void requestNative(const ::v2::com::harman::pres::aaprestypes::eScreenSwitchReason &_switchReason, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: WIFI_AA Method to request connection to a wireless android device
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void connect(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: WIFI_AA  Method allows client to request for disconnection of current active
     *   device
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void disconnect(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: WIFI_AA  Method allows client to request for the deletion of the device from
     *   the wireless androidauto device list
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void deleteDevice(const std::string &_btAddr, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: WIFI_AA  This request method allows client to request for cancelling the
     *   ongoing connect process.
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void cancelConnect(CommonAPI::CallStatus &_internalCallStatus) = 0;
};

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_PRES_aaprescontrols_PROXY_BASE_HPP_
