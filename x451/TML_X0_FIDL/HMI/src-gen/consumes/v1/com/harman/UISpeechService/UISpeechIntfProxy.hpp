/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_PROXY_HPP_
#define V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_PROXY_HPP_

#include <v1/com/harman/UISpeechService/UISpeechIntfProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace UISpeechService {

template <typename ... _AttributeExtensions>
class UISpeechIntfProxy
    : virtual public UISpeechIntf, 
      virtual public UISpeechIntfProxyBase,
      virtual public _AttributeExtensions... {
public:
    UISpeechIntfProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~UISpeechIntfProxy();

    typedef UISpeechIntf InterfaceType;


    /**
     * description: attributes for getting TTS available state and TTS play state
     */
    /**
     * Returns the wrapper class that provides access to the attribute ttsAvailableState.
     */
    virtual TtsAvailableStateAttribute& getTtsAvailableStateAttribute() {
        return delegate_->getTtsAvailableStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ttsPlayState.
     */
    virtual TtsPlayStateAttribute& getTtsPlayStateAttribute() {
        return delegate_->getTtsPlayStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute voiceRecognitionState.
     */
    virtual VoiceRecognitionStateAttribute& getVoiceRecognitionStateAttribute() {
        return delegate_->getVoiceRecognitionStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute vrDialogActiveState.
     */
    virtual VrDialogActiveStateAttribute& getVrDialogActiveStateAttribute() {
        return delegate_->getVrDialogActiveStateAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute vrAvailableState.
     */
    virtual VrAvailableStateAttribute& getVrAvailableStateAttribute() {
        return delegate_->getVrAvailableStateAttribute();
    }


    /**
     * description: The interface provides text readout and prompt readout
     * author: Shrinivas Kulkarni
     * Calls ttsReadOut with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ttsReadOut(const std::string &_data, const bool &_dataisFile, const std::string &_domain, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::UISpeechService::UISSTypes::eReturnCode &_errorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ttsReadOut with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ttsReadOutAsync(const std::string &_data, const bool &_dataisFile, const std::string &_domain, TtsReadOutAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<UISpeechIntfProxyBase> delegate_;
};

typedef UISpeechIntfProxy<> UISpeechIntfProxyDefault;

namespace UISpeechIntfExtensions {
    /**
     * description: attributes for getting TTS available state and TTS play state
     */
    template <template <typename > class _ExtensionType>
    class TtsAvailableStateAttributeExtension {
     public:
        typedef _ExtensionType<UISpeechIntfProxyBase::TtsAvailableStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<UISpeechIntfProxyBase::TtsAvailableStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TtsAvailableStateAttributeExtension() {}
    #endif
    
        TtsAvailableStateAttributeExtension(UISpeechIntfProxyBase& proxy): attributeExtension_(proxy.getTtsAvailableStateAttribute()) {
        }
    
        inline extension_type& getTtsAvailableStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class TtsPlayStateAttributeExtension {
     public:
        typedef _ExtensionType<UISpeechIntfProxyBase::TtsPlayStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<UISpeechIntfProxyBase::TtsPlayStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TtsPlayStateAttributeExtension() {}
    #endif
    
        TtsPlayStateAttributeExtension(UISpeechIntfProxyBase& proxy): attributeExtension_(proxy.getTtsPlayStateAttribute()) {
        }
    
        inline extension_type& getTtsPlayStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VoiceRecognitionStateAttributeExtension {
     public:
        typedef _ExtensionType<UISpeechIntfProxyBase::VoiceRecognitionStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<UISpeechIntfProxyBase::VoiceRecognitionStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VoiceRecognitionStateAttributeExtension() {}
    #endif
    
        VoiceRecognitionStateAttributeExtension(UISpeechIntfProxyBase& proxy): attributeExtension_(proxy.getVoiceRecognitionStateAttribute()) {
        }
    
        inline extension_type& getVoiceRecognitionStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VrDialogActiveStateAttributeExtension {
     public:
        typedef _ExtensionType<UISpeechIntfProxyBase::VrDialogActiveStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<UISpeechIntfProxyBase::VrDialogActiveStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VrDialogActiveStateAttributeExtension() {}
    #endif
    
        VrDialogActiveStateAttributeExtension(UISpeechIntfProxyBase& proxy): attributeExtension_(proxy.getVrDialogActiveStateAttribute()) {
        }
    
        inline extension_type& getVrDialogActiveStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class VrAvailableStateAttributeExtension {
     public:
        typedef _ExtensionType<UISpeechIntfProxyBase::VrAvailableStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<UISpeechIntfProxyBase::VrAvailableStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VrAvailableStateAttributeExtension() {}
    #endif
    
        VrAvailableStateAttributeExtension(UISpeechIntfProxyBase& proxy): attributeExtension_(proxy.getVrAvailableStateAttribute()) {
        }
    
        inline extension_type& getVrAvailableStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace UISpeechIntfExtensions

//
// UISpeechIntfProxy Implementation
//
template <typename ... _AttributeExtensions>
UISpeechIntfProxy<_AttributeExtensions...>::UISpeechIntfProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<UISpeechIntfProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<UISpeechIntfProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
UISpeechIntfProxy<_AttributeExtensions...>::~UISpeechIntfProxy() {
}

/**
 * description: The interface provides text readout and prompt readout
 * author: Shrinivas Kulkarni
 */
template <typename ... _AttributeExtensions>
void UISpeechIntfProxy<_AttributeExtensions...>::ttsReadOut(const std::string &_data, const bool &_dataisFile, const std::string &_domain, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::UISpeechService::UISSTypes::eReturnCode &_errorCode, const CommonAPI::CallInfo *_info) {
    delegate_->ttsReadOut(_data, _dataisFile, _domain, _internalCallStatus, _errorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> UISpeechIntfProxy<_AttributeExtensions...>::ttsReadOutAsync(const std::string &_data, const bool &_dataisFile, const std::string &_domain, TtsReadOutAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ttsReadOutAsync(_data, _dataisFile, _domain, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &UISpeechIntfProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool UISpeechIntfProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool UISpeechIntfProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& UISpeechIntfProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& UISpeechIntfProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace UISpeechService
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::UISpeechService::UISpeechIntfProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::UISpeechService::UISpeechIntfProxy<
            ::v1::com::harman::UISpeechService::UISpeechIntfExtensions::TtsAvailableStateAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::UISpeechService::UISpeechIntfExtensions::TtsPlayStateAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::UISpeechService::UISpeechIntfExtensions::VoiceRecognitionStateAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::UISpeechService::UISpeechIntfExtensions::VrDialogActiveStateAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::UISpeechService::UISpeechIntfExtensions::VrAvailableStateAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_UISPEECHSERVICE_UI_Speech_Intf_PROXY_HPP_
