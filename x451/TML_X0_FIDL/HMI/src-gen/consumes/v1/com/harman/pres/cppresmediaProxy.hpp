/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PRES_cppresmedia_PROXY_HPP_
#define V1_COM_HARMAN_PRES_cppresmedia_PROXY_HPP_

#include <v1/com/harman/pres/cppresmediaProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace pres {

template <typename ... _AttributeExtensions>
class cppresmediaProxy
    : virtual public cppresmedia, 
      virtual public cppresmediaProxyBase,
      virtual public _AttributeExtensions... {
public:
    cppresmediaProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~cppresmediaProxy();

    typedef cppresmedia InterfaceType;


    /**
     * description: This attribute reflects the cuurent song artwork file path , HMI can use the
     *   path to fetch the jpg/png file
     */
    /**
     * Returns the wrapper class that provides access to the attribute artWorkFilePath.
     */
    virtual ArtWorkFilePathAttribute& getArtWorkFilePathAttribute() {
        return delegate_->getArtWorkFilePathAttribute();
    }
    /**
     * description: This attribute reflects the album art status for currently playing track. If
     *   true, then HMI can invoke getAlbumArt for more details
     */
    /**
     * Returns the wrapper class that provides access to the attribute nowPlayingArtworkStatus.
     */
    virtual NowPlayingArtworkStatusAttribute& getNowPlayingArtworkStatusAttribute() {
        return delegate_->getNowPlayingArtworkStatusAttribute();
    }
    /**
     * description: nowPlayingData attribute provides metadata info
     */
    /**
     * Returns the wrapper class that provides access to the attribute nowPlayingData.
     */
    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute() {
        return delegate_->getNowPlayingDataAttribute();
    }
    /**
     * description: trackTimePosition attribute provides elapsed time and duration of songs
     */
    /**
     * Returns the wrapper class that provides access to the attribute trackTimePosition.
     */
    virtual TrackTimePositionAttribute& getTrackTimePositionAttribute() {
        return delegate_->getTrackTimePositionAttribute();
    }
    /**
     * description: playState attribute provides current playback status info
     */
    /**
     * Returns the wrapper class that provides access to the attribute playState.
     */
    virtual PlayStateAttribute& getPlayStateAttribute() {
        return delegate_->getPlayStateAttribute();
    }


    /**
     * Calls getNowPlayingAlbumArtInformation with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::pprestypes::sAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNowPlayingAlbumArtInformation with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This request method allow client to  retrieves the album art image path for the
     *   currently playing track.      Here HMI has to pass the number of the album
     *   art.The total available artworks would have already supplied in the previous
     *   call      to getNowPlayingAlbumArtInformation.
     * Calls getNowPlayingAlbumArtPath with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNowPlayingAlbumArtPath with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<cppresmediaProxyBase> delegate_;
};

typedef cppresmediaProxy<> cppresmediaProxyDefault;

namespace cppresmediaExtensions {
    /**
     * description: This attribute reflects the cuurent song artwork file path , HMI can use the
     *   path to fetch the jpg/png file
     */
    template <template <typename > class _ExtensionType>
    class ArtWorkFilePathAttributeExtension {
     public:
        typedef _ExtensionType<cppresmediaProxyBase::ArtWorkFilePathAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cppresmediaProxyBase::ArtWorkFilePathAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ArtWorkFilePathAttributeExtension() {}
    #endif
    
        ArtWorkFilePathAttributeExtension(cppresmediaProxyBase& proxy): attributeExtension_(proxy.getArtWorkFilePathAttribute()) {
        }
    
        inline extension_type& getArtWorkFilePathAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: This attribute reflects the album art status for currently playing track. If
     *   true, then HMI can invoke getAlbumArt for more details
     */
    template <template <typename > class _ExtensionType>
    class NowPlayingArtworkStatusAttributeExtension {
     public:
        typedef _ExtensionType<cppresmediaProxyBase::NowPlayingArtworkStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cppresmediaProxyBase::NowPlayingArtworkStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NowPlayingArtworkStatusAttributeExtension() {}
    #endif
    
        NowPlayingArtworkStatusAttributeExtension(cppresmediaProxyBase& proxy): attributeExtension_(proxy.getNowPlayingArtworkStatusAttribute()) {
        }
    
        inline extension_type& getNowPlayingArtworkStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: nowPlayingData attribute provides metadata info
     */
    template <template <typename > class _ExtensionType>
    class NowPlayingDataAttributeExtension {
     public:
        typedef _ExtensionType<cppresmediaProxyBase::NowPlayingDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cppresmediaProxyBase::NowPlayingDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NowPlayingDataAttributeExtension() {}
    #endif
    
        NowPlayingDataAttributeExtension(cppresmediaProxyBase& proxy): attributeExtension_(proxy.getNowPlayingDataAttribute()) {
        }
    
        inline extension_type& getNowPlayingDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: trackTimePosition attribute provides elapsed time and duration of songs
     */
    template <template <typename > class _ExtensionType>
    class TrackTimePositionAttributeExtension {
     public:
        typedef _ExtensionType<cppresmediaProxyBase::TrackTimePositionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cppresmediaProxyBase::TrackTimePositionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TrackTimePositionAttributeExtension() {}
    #endif
    
        TrackTimePositionAttributeExtension(cppresmediaProxyBase& proxy): attributeExtension_(proxy.getTrackTimePositionAttribute()) {
        }
    
        inline extension_type& getTrackTimePositionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: playState attribute provides current playback status info
     */
    template <template <typename > class _ExtensionType>
    class PlayStateAttributeExtension {
     public:
        typedef _ExtensionType<cppresmediaProxyBase::PlayStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<cppresmediaProxyBase::PlayStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PlayStateAttributeExtension() {}
    #endif
    
        PlayStateAttributeExtension(cppresmediaProxyBase& proxy): attributeExtension_(proxy.getPlayStateAttribute()) {
        }
    
        inline extension_type& getPlayStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace cppresmediaExtensions

//
// cppresmediaProxy Implementation
//
template <typename ... _AttributeExtensions>
cppresmediaProxy<_AttributeExtensions...>::cppresmediaProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<cppresmediaProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<cppresmediaProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
cppresmediaProxy<_AttributeExtensions...>::~cppresmediaProxy() {
}

template <typename ... _AttributeExtensions>
void cppresmediaProxy<_AttributeExtensions...>::getNowPlayingAlbumArtInformation(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::pres::pprestypes::sAlbumArtInformation &_albumArtInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getNowPlayingAlbumArtInformation(_internalCallStatus, _albumArtInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> cppresmediaProxy<_AttributeExtensions...>::getNowPlayingAlbumArtInformationAsync(GetNowPlayingAlbumArtInformationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getNowPlayingAlbumArtInformationAsync(_callback, _info);
}
/**
 * description: This request method allow client to  retrieves the album art image path for the
 *   currently playing track.      Here HMI has to pass the number of the album
 *   art.The total available artworks would have already supplied in the previous
 *   call      to getNowPlayingAlbumArtInformation.
 */
template <typename ... _AttributeExtensions>
void cppresmediaProxy<_AttributeExtensions...>::getNowPlayingAlbumArtPath(const uint8_t &_imageNumber, CommonAPI::CallStatus &_internalCallStatus, std::string &_path, const CommonAPI::CallInfo *_info) {
    delegate_->getNowPlayingAlbumArtPath(_imageNumber, _internalCallStatus, _path, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> cppresmediaProxy<_AttributeExtensions...>::getNowPlayingAlbumArtPathAsync(const uint8_t &_imageNumber, GetNowPlayingAlbumArtPathAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getNowPlayingAlbumArtPathAsync(_imageNumber, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &cppresmediaProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool cppresmediaProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool cppresmediaProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& cppresmediaProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& cppresmediaProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace pres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::pres::cppresmediaProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::pres::cppresmediaProxy<
            ::v1::com::harman::pres::cppresmediaExtensions::ArtWorkFilePathAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::pres::cppresmediaExtensions::NowPlayingArtworkStatusAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::pres::cppresmediaExtensions::NowPlayingDataAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::pres::cppresmediaExtensions::TrackTimePositionAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::pres::cppresmediaExtensions::PlayStateAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_1 = v1;

#endif // V1_COM_HARMAN_PRES_cppresmedia_PROXY_HPP_
