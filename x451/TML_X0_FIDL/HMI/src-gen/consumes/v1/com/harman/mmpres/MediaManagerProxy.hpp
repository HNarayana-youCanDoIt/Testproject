/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_HPP_
#define V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_HPP_

#include <v1/com/harman/mmpres/MediaManagerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace mmpres {

template <typename ... _AttributeExtensions>
class MediaManagerProxy
    : virtual public MediaManager, 
      virtual public MediaManagerProxyBase,
      virtual public _AttributeExtensions... {
public:
    MediaManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~MediaManagerProxy();

    typedef MediaManager InterfaceType;


    /**
     * description: This attribute provides the updated browse category information for the media
     *   slots. 		  HMI can use this attribute to directly enable/disable the media
     *   browse tiles for a media device.
     */
    /**
     * Returns the wrapper class that provides access to the attribute mediaDeviceBrowseCategoryInfo.
     */
    virtual MediaDeviceBrowseCategoryInfoAttribute& getMediaDeviceBrowseCategoryInfoAttribute() {
        return delegate_->getMediaDeviceBrowseCategoryInfoAttribute();
    }
    /**
     * description: Provides the sync progress information for the device
     */
    /**
     * Returns the wrapper class that provides access to the attribute syncProgress.
     */
    virtual SyncProgressAttribute& getSyncProgressAttribute() {
        return delegate_->getSyncProgressAttribute();
    }
    /**
     * description: Provides if any playable Item is available for the device
     */
    /**
     * Returns the wrapper class that provides access to the attribute isPlayableItemAvailable.
     */
    virtual IsPlayableItemAvailableAttribute& getIsPlayableItemAvailableAttribute() {
        return delegate_->getIsPlayableItemAvailableAttribute();
    }
    /**
     * description: Provides if database error
     */
    /**
     * Returns the wrapper class that provides access to the attribute DatabaseError.
     */
    virtual DatabaseErrorAttribute& getDatabaseErrorAttribute() {
        return delegate_->getDatabaseErrorAttribute();
    }

    /**
     * description: Emitted if there is a state change for any slot.  	 		               returns:	 
     *   slot:	Slot data
     */
    /**
     * Returns the wrapper class that provides access to the broadcast slotUpdate.
     */
    virtual SlotUpdateEvent& getSlotUpdateEvent() {
        return delegate_->getSlotUpdateEvent();
    }

    /**
     * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
     *   configured in the Presentation Controller config will be returned here, with
     *   the  					  current status.  	 		               returns:	  tSlotList:	Slot data
     * Calls getSlots with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSlots(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tSlotList &_list, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSlots with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSlotsAsync(GetSlotsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Gets additional details of the device in a particular slot 	 		              
     *   returns:	  tAdditionalDeviceInfo:	Additional Hw and firware info
     * Calls getAdditionalDeviceInfo with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAdditionalDeviceInfo(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo &_additionalInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAdditionalDeviceInfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAdditionalDeviceInfoAsync(const uint8_t &_slotId, GetAdditionalDeviceInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<MediaManagerProxyBase> delegate_;
};

typedef MediaManagerProxy<> MediaManagerProxyDefault;

namespace MediaManagerExtensions {
    /**
     * description: This attribute provides the updated browse category information for the media
     *   slots. 		  HMI can use this attribute to directly enable/disable the media
     *   browse tiles for a media device.
     */
    template <template <typename > class _ExtensionType>
    class MediaDeviceBrowseCategoryInfoAttributeExtension {
     public:
        typedef _ExtensionType<MediaManagerProxyBase::MediaDeviceBrowseCategoryInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaManagerProxyBase::MediaDeviceBrowseCategoryInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MediaDeviceBrowseCategoryInfoAttributeExtension() {}
    #endif
    
        MediaDeviceBrowseCategoryInfoAttributeExtension(MediaManagerProxyBase& proxy): attributeExtension_(proxy.getMediaDeviceBrowseCategoryInfoAttribute()) {
        }
    
        inline extension_type& getMediaDeviceBrowseCategoryInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Provides the sync progress information for the device
     */
    template <template <typename > class _ExtensionType>
    class SyncProgressAttributeExtension {
     public:
        typedef _ExtensionType<MediaManagerProxyBase::SyncProgressAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaManagerProxyBase::SyncProgressAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SyncProgressAttributeExtension() {}
    #endif
    
        SyncProgressAttributeExtension(MediaManagerProxyBase& proxy): attributeExtension_(proxy.getSyncProgressAttribute()) {
        }
    
        inline extension_type& getSyncProgressAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Provides if any playable Item is available for the device
     */
    template <template <typename > class _ExtensionType>
    class IsPlayableItemAvailableAttributeExtension {
     public:
        typedef _ExtensionType<MediaManagerProxyBase::IsPlayableItemAvailableAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaManagerProxyBase::IsPlayableItemAvailableAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        IsPlayableItemAvailableAttributeExtension() {}
    #endif
    
        IsPlayableItemAvailableAttributeExtension(MediaManagerProxyBase& proxy): attributeExtension_(proxy.getIsPlayableItemAvailableAttribute()) {
        }
    
        inline extension_type& getIsPlayableItemAvailableAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Provides if database error
     */
    template <template <typename > class _ExtensionType>
    class DatabaseErrorAttributeExtension {
     public:
        typedef _ExtensionType<MediaManagerProxyBase::DatabaseErrorAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<MediaManagerProxyBase::DatabaseErrorAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DatabaseErrorAttributeExtension() {}
    #endif
    
        DatabaseErrorAttributeExtension(MediaManagerProxyBase& proxy): attributeExtension_(proxy.getDatabaseErrorAttribute()) {
        }
    
        inline extension_type& getDatabaseErrorAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace MediaManagerExtensions

//
// MediaManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
MediaManagerProxy<_AttributeExtensions...>::MediaManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<MediaManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<MediaManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
MediaManagerProxy<_AttributeExtensions...>::~MediaManagerProxy() {
}

/**
 * description: Gets details for all the configured slots in the pres ctrl. Whichever slots are
 *   configured in the Presentation Controller config will be returned here, with
 *   the  					  current status.  	 		               returns:	  tSlotList:	Slot data
 */
template <typename ... _AttributeExtensions>
void MediaManagerProxy<_AttributeExtensions...>::getSlots(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tSlotList &_list, const CommonAPI::CallInfo *_info) {
    delegate_->getSlots(_internalCallStatus, _list, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaManagerProxy<_AttributeExtensions...>::getSlotsAsync(GetSlotsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSlotsAsync(_callback, _info);
}
/**
 * description: Gets additional details of the device in a particular slot 	 		              
 *   returns:	  tAdditionalDeviceInfo:	Additional Hw and firware info
 */
template <typename ... _AttributeExtensions>
void MediaManagerProxy<_AttributeExtensions...>::getAdditionalDeviceInfo(const uint8_t &_slotId, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::mmpres::MMPresTypes::tAdditionalDeviceInfo &_additionalInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getAdditionalDeviceInfo(_slotId, _internalCallStatus, _additionalInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> MediaManagerProxy<_AttributeExtensions...>::getAdditionalDeviceInfoAsync(const uint8_t &_slotId, GetAdditionalDeviceInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAdditionalDeviceInfoAsync(_slotId, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &MediaManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool MediaManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool MediaManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& MediaManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& MediaManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mmpres
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v1::com::harman::mmpres::MediaManagerProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::harman::mmpres::MediaManagerProxy<
            ::v1::com::harman::mmpres::MediaManagerExtensions::MediaDeviceBrowseCategoryInfoAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaManagerExtensions::SyncProgressAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaManagerExtensions::IsPlayableItemAvailableAttributeExtension<_AttributeExtension>, 
            ::v1::com::harman::mmpres::MediaManagerExtensions::DatabaseErrorAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_MMPRES_Media_Manager_PROXY_HPP_
