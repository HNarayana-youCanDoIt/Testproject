/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_PARKASSIST_Park_Assist_Base_Type_HPP_
#define V1_COM_HARMAN_PARKASSIST_Park_Assist_Base_Type_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace ParkAssist {

struct ParkAssistBaseType {
    
    struct ParkAssistVariant_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_PDC = 1,
            En_RVC = 2,
            En_PDC_RVC = 3
        };
        
        ParkAssistVariant_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_PDC)) {}
        ParkAssistVariant_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_PDC):
                case static_cast<int32_t>(Literal::En_RVC):
                case static_cast<int32_t>(Literal::En_PDC_RVC):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ParkAssistVariant_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ParkAssistVariant_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ParkAssistVariant_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ParkAssistVariant_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ParkAssistVariant_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ParkAssistVariant_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RvcFault_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_No_Fault = 0,
            En_TailGate_open = 1,
            En_Rvc_Video_Short_to_Ground = 2,
            En_Rvc_Video_Signal_Fault = 3
        };
        
        RvcFault_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_No_Fault)) {}
        RvcFault_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_No_Fault):
                case static_cast<int32_t>(Literal::En_TailGate_open):
                case static_cast<int32_t>(Literal::En_Rvc_Video_Short_to_Ground):
                case static_cast<int32_t>(Literal::En_Rvc_Video_Signal_Fault):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RvcFault_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RvcFault_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RvcFault_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RvcFault_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RvcFault_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RvcFault_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RvcOverlayType_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Static = 0,
            En_Dynamic = 1
        };
        
        RvcOverlayType_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Static)) {}
        RvcOverlayType_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Static):
                case static_cast<int32_t>(Literal::En_Dynamic):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RvcOverlayType_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RvcOverlayType_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RvcOverlayType_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RvcOverlayType_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RvcOverlayType_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RvcOverlayType_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct Pdc_RvcFault_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_No_Fault = 0,
            En_Pdc_Ok_Rvc_Fault = 1,
            En_Pdc_Critical_Fault_Rvc_Fault = 2,
            En_Pdc_NoisyEnv_Rvc_Fault = 3,
            En_Pdc_Trailer_Conn_Rvc_Fault = 4,
            En_Pdc_Overspeed_Rvc_Fault = 5,
            En_Pdc_Tailgate_Open_Rvc_Fault = 6,
            En_Pdc_ParkBrake_Rvc_Fault = 7,
            En_Pdc_MinorFault_Rvc_Fault = 8,
            En_Pdc_CriticalFault_Rvc_Ok = 9,
            En_Pdc_NoisyEnv_Rvc_Ok = 10,
            En_Pdc_TrailerConn_Rvc_Ok = 11,
            En_Pdc_Overspeed_Rvc_Ok = 12,
            En_Pdc_Tailgate_Rvc_Ok = 13,
            En_Pdc_ParkBrake_Rvc_Ok = 14,
            En_Pdc_MinorFault_Rvc_Ok = 15
        };
        
        Pdc_RvcFault_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_No_Fault)) {}
        Pdc_RvcFault_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_No_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_Ok_Rvc_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_Critical_Fault_Rvc_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_NoisyEnv_Rvc_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_Trailer_Conn_Rvc_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_Overspeed_Rvc_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_Tailgate_Open_Rvc_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_ParkBrake_Rvc_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_MinorFault_Rvc_Fault):
                case static_cast<int32_t>(Literal::En_Pdc_CriticalFault_Rvc_Ok):
                case static_cast<int32_t>(Literal::En_Pdc_NoisyEnv_Rvc_Ok):
                case static_cast<int32_t>(Literal::En_Pdc_TrailerConn_Rvc_Ok):
                case static_cast<int32_t>(Literal::En_Pdc_Overspeed_Rvc_Ok):
                case static_cast<int32_t>(Literal::En_Pdc_Tailgate_Rvc_Ok):
                case static_cast<int32_t>(Literal::En_Pdc_ParkBrake_Rvc_Ok):
                case static_cast<int32_t>(Literal::En_Pdc_MinorFault_Rvc_Ok):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const Pdc_RvcFault_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const Pdc_RvcFault_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const Pdc_RvcFault_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const Pdc_RvcFault_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const Pdc_RvcFault_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const Pdc_RvcFault_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PDcRearToneReq_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Tone_1 = 0,
            En_Reserved_for_future_use = 10,
            En_Reserved_for_future_use_13 = 13,
            En_Reserved_for_future_use_7 = 7,
            En_Reserved_for_future_use_6 = 6,
            En_Reserved_for_future_use_8 = 8,
            En_Tone_3 = 2,
            En_Reserved_for_future_use_11 = 11,
            En_Reserved_for_future_use_4 = 4,
            En_Reserved_for_future_use_12 = 12,
            En_Reserved_for_future_use_5 = 5,
            En_Reserved_for_future_use_9 = 9,
            En_Reserved_for_future_use_15 = 15,
            En_Reserved_for_future_use_3 = 3,
            En_Reserved_for_future_use_14 = 14,
            En_Tone_2 = 1
        };
        
        PDcRearToneReq_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Tone_1)) {}
        PDcRearToneReq_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Tone_1):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_13):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_7):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_6):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_8):
                case static_cast<int32_t>(Literal::En_Tone_3):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_11):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_4):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_12):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_5):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_9):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_15):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_3):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_14):
                case static_cast<int32_t>(Literal::En_Tone_2):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PDcRearToneReq_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PDcRearToneReq_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PDcRearToneReq_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PDcRearToneReq_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PDcRearToneReq_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PDcRearToneReq_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct HuPDcReqType_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_reserved = 6,
            En_factory_setting_Req = 2,
            En_HU_PDC_Activate_Req = 0,
            En_HUPDCconfig_Ack = 5,
            En_HU_PDC_Deactivate_Req = 1,
            En_config_query = 3,
            En_reserved_7 = 7,
            En_setting_update = 4
        };
        
        HuPDcReqType_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_reserved)) {}
        HuPDcReqType_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_reserved):
                case static_cast<int32_t>(Literal::En_factory_setting_Req):
                case static_cast<int32_t>(Literal::En_HU_PDC_Activate_Req):
                case static_cast<int32_t>(Literal::En_HUPDCconfig_Ack):
                case static_cast<int32_t>(Literal::En_HU_PDC_Deactivate_Req):
                case static_cast<int32_t>(Literal::En_config_query):
                case static_cast<int32_t>(Literal::En_reserved_7):
                case static_cast<int32_t>(Literal::En_setting_update):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const HuPDcReqType_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const HuPDcReqType_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const HuPDcReqType_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const HuPDcReqType_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const HuPDcReqType_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const HuPDcReqType_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct enAudioZoneState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AUDIO_ZONE_STATE_ZERO = 0,
            AUDIO_ZONE_STATE_ONE = 1,
            AUDIO_ZONE_STATE_TWO = 2,
            AUDIO_ZONE_STATE_THREE = 3,
            AUDIO_ZONE_STATE_INVALID = 4
        };
        
        enAudioZoneState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AUDIO_ZONE_STATE_ZERO)) {}
        enAudioZoneState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AUDIO_ZONE_STATE_ZERO):
                case static_cast<int32_t>(Literal::AUDIO_ZONE_STATE_ONE):
                case static_cast<int32_t>(Literal::AUDIO_ZONE_STATE_TWO):
                case static_cast<int32_t>(Literal::AUDIO_ZONE_STATE_THREE):
                case static_cast<int32_t>(Literal::AUDIO_ZONE_STATE_INVALID):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enAudioZoneState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enAudioZoneState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enAudioZoneState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enAudioZoneState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enAudioZoneState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enAudioZoneState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TailgateState_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Close = 0,
            En_Open = 1
        };
        
        TailgateState_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Close)) {}
        TailgateState_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Close):
                case static_cast<int32_t>(Literal::En_Open):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TailgateState_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TailgateState_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TailgateState_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TailgateState_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TailgateState_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TailgateState_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct SAsAngEPAsDir_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Steering_Wheel_turned_in_the_Counter_clockwise_direction = 1,
            En_Steering_Wheel_turned_in_the_Clockwise_direction = 0
        };
        
        SAsAngEPAsDir_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Steering_Wheel_turned_in_the_Counter_clockwise_direction)) {}
        SAsAngEPAsDir_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Steering_Wheel_turned_in_the_Counter_clockwise_direction):
                case static_cast<int32_t>(Literal::En_Steering_Wheel_turned_in_the_Clockwise_direction):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SAsAngEPAsDir_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SAsAngEPAsDir_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SAsAngEPAsDir_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SAsAngEPAsDir_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SAsAngEPAsDir_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SAsAngEPAsDir_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TailgateStateStatus_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved = 2,
            En_Signal_not_available = 3,
            En_Value_is_plausible = 0,
            En_Reserved_1 = 1
        };
        
        TailgateStateStatus_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved)) {}
        TailgateStateStatus_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_Signal_not_available):
                case static_cast<int32_t>(Literal::En_Value_is_plausible):
                case static_cast<int32_t>(Literal::En_Reserved_1):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TailgateStateStatus_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TailgateStateStatus_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TailgateStateStatus_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TailgateStateStatus_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TailgateStateStatus_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TailgateStateStatus_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RevGearStatus_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved = 2,
            En_Value_is_pluasible = 0,
            En_Reserved_1 = 1,
            En_Signal_not_available = 3
        };
        
        RevGearStatus_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved)) {}
        RevGearStatus_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_Value_is_pluasible):
                case static_cast<int32_t>(Literal::En_Reserved_1):
                case static_cast<int32_t>(Literal::En_Signal_not_available):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RevGearStatus_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RevGearStatus_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RevGearStatus_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RevGearStatus_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RevGearStatus_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RevGearStatus_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct RevGear_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reverse_gear_disengaged = 0,
            En_Reverse_gear_engaged = 1
        };
        
        RevGear_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reverse_gear_disengaged)) {}
        RevGear_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reverse_gear_disengaged):
                case static_cast<int32_t>(Literal::En_Reverse_gear_engaged):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RevGear_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RevGear_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RevGear_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RevGear_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RevGear_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RevGear_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ParkBrkState_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Park_Brake_is_ON = 1,
            En_Park_Brake_is_Off = 0
        };
        
        ParkBrkState_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Park_Brake_is_ON)) {}
        ParkBrkState_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Park_Brake_is_ON):
                case static_cast<int32_t>(Literal::En_Park_Brake_is_Off):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ParkBrkState_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ParkBrkState_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ParkBrkState_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ParkBrkState_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ParkBrkState_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ParkBrkState_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PDcHuFaultState_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved_for_future_use = 10,
            En_Reserved_for_future_use_16 = 16,
            En_Too_much_Noisy_environment_ = 4,
            En__Reserved_for_future_use = 11,
            En_Reserved_for_future_use_9 = 9,
            En_Reserved_for_future_use_23 = 23,
            En_Reserved_for_future_use_17 = 17,
            En_Minor_Fault = 5,
            En_Reserved_for_future_use_14 = 14,
            En_Reserved_for_future_use_19 = 19,
            En__Critical_fault = 1,
            En_Tailgate_Open = 6,
            En_Reserved_for_future_use_29 = 29,
            En_Reserved_for_future_use_8 = 8,
            En_Trailer_Connected = 2,
            En_Reserved_for_future_use_27 = 27,
            En_Reserved_for_future_use_21 = 21,
            En_Reserved_for_future_use_22 = 22,
            En_Reserved_for_future_use_31 = 31,
            En_Reserved_for_future_use_15 = 15,
            En_Reserved_for_future_use_13 = 13,
            En_Reserved_for_future_use_28 = 28,
            En_Reserved_for_future_use_24 = 24,
            En_No_Fault = 0,
            En_Reserved_for_future_use_30 = 30,
            En__Park_Brake_Engaged = 7,
            En_Vehicle_Speed_too_High__ = 3,
            En_Reserved_for_future_use_20 = 20,
            En_Reserved_for_future_use_25 = 25,
            En_Reserved_for_future_use_12 = 12,
            En_Reserved_for_future_use_18 = 18,
            En_Reserved_for_future_use_26 = 26
        };
        
        PDcHuFaultState_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved_for_future_use)) {}
        PDcHuFaultState_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_16):
                case static_cast<int32_t>(Literal::En_Too_much_Noisy_environment_):
                case static_cast<int32_t>(Literal::En__Reserved_for_future_use):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_9):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_23):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_17):
                case static_cast<int32_t>(Literal::En_Minor_Fault):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_14):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_19):
                case static_cast<int32_t>(Literal::En__Critical_fault):
                case static_cast<int32_t>(Literal::En_Tailgate_Open):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_29):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_8):
                case static_cast<int32_t>(Literal::En_Trailer_Connected):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_27):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_21):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_22):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_31):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_15):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_13):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_28):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_24):
                case static_cast<int32_t>(Literal::En_No_Fault):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_30):
                case static_cast<int32_t>(Literal::En__Park_Brake_Engaged):
                case static_cast<int32_t>(Literal::En_Vehicle_Speed_too_High__):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_20):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_25):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_12):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_18):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_26):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PDcHuFaultState_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PDcHuFaultState_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PDcHuFaultState_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PDcHuFaultState_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PDcHuFaultState_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PDcHuFaultState_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PDcHuAudioZoneState_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_No_Audio = 0,
            En_Continuous_Beep = 3,
            En_Fast_Beep = 2,
            En_Reserved_for_future_use = 6,
            En_Reserved_for_future_use_5 = 5,
            En_Reserved_for_future_use_4 = 4,
            En_Reserved_for_future_use_7 = 7,
            En_Slow_Beep = 1
        };
        
        PDcHuAudioZoneState_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_No_Audio)) {}
        PDcHuAudioZoneState_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_No_Audio):
                case static_cast<int32_t>(Literal::En_Continuous_Beep):
                case static_cast<int32_t>(Literal::En_Fast_Beep):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_5):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_4):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_7):
                case static_cast<int32_t>(Literal::En_Slow_Beep):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PDcHuAudioZoneState_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PDcHuAudioZoneState_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PDcHuAudioZoneState_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PDcHuAudioZoneState_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PDcHuAudioZoneState_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PDcHuAudioZoneState_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PDcPresence_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved = 1,
            En_PDC_Present = 0
        };
        
        PDcPresence_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved)) {}
        PDcPresence_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved):
                case static_cast<int32_t>(Literal::En_PDC_Present):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PDcPresence_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PDcPresence_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PDcPresence_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PDcPresence_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PDcPresence_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PDcPresence_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct reverseStatus : CommonAPI::Struct<bool, bool> {
    	
    	reverseStatus() {
    		std::get<0>(values_) = false;
    		std::get<1>(values_) = false;
    	}
    	reverseStatus(const bool &_bReverseGearStatus, const bool &_bActivationStatus)
    	{
    		std::get<0>(values_) = _bReverseGearStatus;
    		std::get<1>(values_) = _bActivationStatus;
    	}
    	/**
    	 * description: Engage through Reverse gear and Hard Switch
    	 */
    	inline const bool &getBReverseGearStatus() const { return std::get<0>(values_); }
    	inline void setBReverseGearStatus(const bool _value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Activation Through Soft Switch Response
    	 */
    	inline const bool &getBActivationStatus() const { return std::get<1>(values_); }
    	inline void setBActivationStatus(const bool _value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const reverseStatus& _other) const {
                return (getBReverseGearStatus() == _other.getBReverseGearStatus() && getBActivationStatus() == _other.getBActivationStatus());
        }
    	inline bool operator!=(const reverseStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct pdcsettingErrorUpdate : CommonAPI::Struct<bool, uint8_t> {
    	
    	pdcsettingErrorUpdate() {
    		std::get<0>(values_) = false;
    	}
    	pdcsettingErrorUpdate(const bool &_bErrorStatus, const uint8_t &_u8ErrorId)
    	{
    		std::get<0>(values_) = _bErrorStatus;
    		std::get<1>(values_) = _u8ErrorId;
    	}
    	/**
    	 * description: define for pdc update error status
    	 */
    	inline const bool &getBErrorStatus() const { return std::get<0>(values_); }
    	inline void setBErrorStatus(const bool _value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: define for pdc update error Id
    	 */
    	inline const uint8_t &getU8ErrorId() const { return std::get<1>(values_); }
    	inline void setU8ErrorId(const uint8_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const pdcsettingErrorUpdate& _other) const {
                return (getBErrorStatus() == _other.getBErrorStatus() && getU8ErrorId() == _other.getU8ErrorId());
        }
    	inline bool operator!=(const pdcsettingErrorUpdate &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct PDcHuState_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Active = 1,
            En_Inactive = 0
        };
        
        PDcHuState_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Active)) {}
        PDcHuState_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Active):
                case static_cast<int32_t>(Literal::En_Inactive):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PDcHuState_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PDcHuState_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PDcHuState_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PDcHuState_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PDcHuState_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PDcHuState_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PDcVariant_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved_for_future_use = 2,
            En_Rear_Only = 0,
            En_Front__Rear = 1,
            En_Reserved_for_future_use_3 = 3
        };
        
        PDcVariant_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved_for_future_use)) {}
        PDcVariant_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use):
                case static_cast<int32_t>(Literal::En_Rear_Only):
                case static_cast<int32_t>(Literal::En_Front__Rear):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_3):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PDcVariant_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PDcVariant_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PDcVariant_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PDcVariant_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PDcVariant_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PDcVariant_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PDcHuRearTone_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_Reserved_for_future_use = 10,
            En_Reserved_for_future_use_12 = 12,
            En_Reserved_for_future_use_8 = 8,
            En_Reserved_for_future_use_5 = 5,
            En_Reserved_for_future_use_9 = 9,
            En_Reserved_for_future_use_13 = 13,
            En_Reserved_for_future_use_7 = 7,
            En_Reserved_for_future_use_14 = 14,
            En_Reserved_for_future_use_11 = 11,
            En_Reserved_for_future_use_3 = 3,
            En_Tone_1 = 0,
            En_Tone_3 = 2,
            En_Reserved_for_future_use_6 = 6,
            En_Reserved_for_future_use_15 = 15,
            En_Tone_2 = 1,
            En_Reserved_for_future_use_4 = 4
        };
        
        PDcHuRearTone_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_Reserved_for_future_use)) {}
        PDcHuRearTone_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_12):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_8):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_5):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_9):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_13):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_7):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_14):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_11):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_3):
                case static_cast<int32_t>(Literal::En_Tone_1):
                case static_cast<int32_t>(Literal::En_Tone_3):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_6):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_15):
                case static_cast<int32_t>(Literal::En_Tone_2):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_use_4):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PDcHuRearTone_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PDcHuRearTone_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PDcHuRearTone_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PDcHuRearTone_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PDcHuRearTone_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PDcHuRearTone_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct PDcHuRearNoOfSen_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            En_4_Sensors = 2,
            En_Reserved_for_future = 3,
            En_Reserved_for_future_5 = 5,
            En_2_Sensors = 0,
            En_Reserved_for_future_6 = 6,
            En_3_Sensors = 1,
            En_Reserved_for_future_7 = 7,
            En_Reserved_for_future_4 = 4
        };
        
        PDcHuRearNoOfSen_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::En_4_Sensors)) {}
        PDcHuRearNoOfSen_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::En_4_Sensors):
                case static_cast<int32_t>(Literal::En_Reserved_for_future):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_5):
                case static_cast<int32_t>(Literal::En_2_Sensors):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_6):
                case static_cast<int32_t>(Literal::En_3_Sensors):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_7):
                case static_cast<int32_t>(Literal::En_Reserved_for_future_4):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const PDcHuRearNoOfSen_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const PDcHuRearNoOfSen_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const PDcHuRearNoOfSen_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const PDcHuRearNoOfSen_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const PDcHuRearNoOfSen_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const PDcHuRearNoOfSen_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.ParkAssist.ParkAssistBaseType";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 2);
}

}; // struct ParkAssistBaseType

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
    //Hash for ParkAssistVariant_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkAssistVariant_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkAssistVariant_enum& parkAssistVariant_enum) const {
            return static_cast<int32_t>(parkAssistVariant_enum);
        }
    };
    //Hash for RvcFault_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::RvcFault_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::RvcFault_enum& rvcFault_enum) const {
            return static_cast<int32_t>(rvcFault_enum);
        }
    };
    //Hash for RvcOverlayType_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::RvcOverlayType_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::RvcOverlayType_enum& rvcOverlayType_enum) const {
            return static_cast<int32_t>(rvcOverlayType_enum);
        }
    };
    //Hash for Pdc_RvcFault_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::Pdc_RvcFault_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::Pdc_RvcFault_enum& pdc_RvcFault_enum) const {
            return static_cast<int32_t>(pdc_RvcFault_enum);
        }
    };
    //Hash for PDcRearToneReq_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcRearToneReq_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcRearToneReq_enum& pDcRearToneReq_enum) const {
            return static_cast<int32_t>(pDcRearToneReq_enum);
        }
    };
    //Hash for HuPDcReqType_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::HuPDcReqType_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::HuPDcReqType_enum& huPDcReqType_enum) const {
            return static_cast<int32_t>(huPDcReqType_enum);
        }
    };
    //Hash for enAudioZoneState
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::enAudioZoneState> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::enAudioZoneState& enAudioZoneState) const {
            return static_cast<int32_t>(enAudioZoneState);
        }
    };
    //Hash for TailgateState_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::TailgateState_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::TailgateState_enum& tailgateState_enum) const {
            return static_cast<int32_t>(tailgateState_enum);
        }
    };
    //Hash for SAsAngEPAsDir_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::SAsAngEPAsDir_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::SAsAngEPAsDir_enum& sAsAngEPAsDir_enum) const {
            return static_cast<int32_t>(sAsAngEPAsDir_enum);
        }
    };
    //Hash for TailgateStateStatus_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::TailgateStateStatus_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::TailgateStateStatus_enum& tailgateStateStatus_enum) const {
            return static_cast<int32_t>(tailgateStateStatus_enum);
        }
    };
    //Hash for RevGearStatus_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::RevGearStatus_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::RevGearStatus_enum& revGearStatus_enum) const {
            return static_cast<int32_t>(revGearStatus_enum);
        }
    };
    //Hash for RevGear_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::RevGear_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::RevGear_enum& revGear_enum) const {
            return static_cast<int32_t>(revGear_enum);
        }
    };
    //Hash for ParkBrkState_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkBrkState_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkBrkState_enum& parkBrkState_enum) const {
            return static_cast<int32_t>(parkBrkState_enum);
        }
    };
    //Hash for PDcHuFaultState_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuFaultState_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuFaultState_enum& pDcHuFaultState_enum) const {
            return static_cast<int32_t>(pDcHuFaultState_enum);
        }
    };
    //Hash for PDcHuAudioZoneState_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuAudioZoneState_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuAudioZoneState_enum& pDcHuAudioZoneState_enum) const {
            return static_cast<int32_t>(pDcHuAudioZoneState_enum);
        }
    };
    //Hash for PDcPresence_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcPresence_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcPresence_enum& pDcPresence_enum) const {
            return static_cast<int32_t>(pDcPresence_enum);
        }
    };
    //Hash for PDcHuState_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuState_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuState_enum& pDcHuState_enum) const {
            return static_cast<int32_t>(pDcHuState_enum);
        }
    };
    //Hash for PDcVariant_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcVariant_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcVariant_enum& pDcVariant_enum) const {
            return static_cast<int32_t>(pDcVariant_enum);
        }
    };
    //Hash for PDcHuRearTone_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuRearTone_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuRearTone_enum& pDcHuRearTone_enum) const {
            return static_cast<int32_t>(pDcHuRearTone_enum);
        }
    };
    //Hash for PDcHuRearNoOfSen_enum
    template<>
    struct hash<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuRearNoOfSen_enum> {
        inline size_t operator()(const ::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuRearNoOfSen_enum& pDcHuRearNoOfSen_enum) const {
            return static_cast<int32_t>(pDcHuRearNoOfSen_enum);
        }
    };
}


// Compatibility
namespace v1_2 = v1;

#endif // V1_COM_HARMAN_PARKASSIST_Park_Assist_Base_Type_HPP_
