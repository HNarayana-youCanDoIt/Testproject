/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V1_COM_HARMAN_DCIF_RCA_Service_PROXY_BASE_HPP_
#define V1_COM_HARMAN_DCIF_RCA_Service_PROXY_BASE_HPP_

#include <v1/com/harman/dcif/RCAService.hpp>


#include <v1/com/harman/dcif/RCAServiceTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace harman {
namespace dcif {

class RCAServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v1::com::harman::dcif::RCAServiceTypes::eActionInitiated, uint8_t
    > ActionInitiatedFromTSREvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const bool&)> GetHMIBrowseStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> SetHMIBrowseStatusAsyncCallback;


    virtual ActionInitiatedFromTSREvent& getActionInitiatedFromTSREvent() = 0;

    virtual void getHMIBrowseStatus(CommonAPI::CallStatus &_internalCallStatus, bool &_HMIBrowseStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getHMIBrowseStatusAsync(GetHMIBrowseStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void setHMIBrowseStatus(const bool &_HMIBrowseStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_Ret_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setHMIBrowseStatusAsync(const bool &_HMIBrowseStatus, SetHMIBrowseStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_HARMAN_DCIF_RCA_Service_PROXY_BASE_HPP_
