/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V2_ORG_GENIVI_NODESTATEMANAGER_Node_State_Types_HPP_
#define V2_ORG_GENIVI_NODESTATEMANAGER_Node_State_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace org {
namespace genivi {
namespace NodeStateManager {

struct NodeStateTypes {
    
    struct NsmErrorStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NsmErrorStatus_NotSet = 0,
            NsmErrorStatus_Ok = 1,
            NsmErrorStatus_Error = 2,
            NsmErrorStatus_Dbus = 3,
            NsmErrorStatus_Internal = 4,
            NsmErrorStatus_Parameter = 5,
            NsmErrorStatus_WrongSession = 6,
            NsmErrorStatus_ResponsePending = 7,
            NsmErrorStatus_WrongClient = 8,
            NsmErrorStatus_Last = 9,
            NsmErrorStatus_e = 10
        };
        
        NsmErrorStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NsmErrorStatus_NotSet)) {}
        NsmErrorStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NsmErrorStatus_NotSet):
                case static_cast<int32_t>(Literal::NsmErrorStatus_Ok):
                case static_cast<int32_t>(Literal::NsmErrorStatus_Error):
                case static_cast<int32_t>(Literal::NsmErrorStatus_Dbus):
                case static_cast<int32_t>(Literal::NsmErrorStatus_Internal):
                case static_cast<int32_t>(Literal::NsmErrorStatus_Parameter):
                case static_cast<int32_t>(Literal::NsmErrorStatus_WrongSession):
                case static_cast<int32_t>(Literal::NsmErrorStatus_ResponsePending):
                case static_cast<int32_t>(Literal::NsmErrorStatus_WrongClient):
                case static_cast<int32_t>(Literal::NsmErrorStatus_Last):
                case static_cast<int32_t>(Literal::NsmErrorStatus_e):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmErrorStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmErrorStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmErrorStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmErrorStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmErrorStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmErrorStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NsmApplicationMode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NsmApplicationMode_NotSet = 0,
            NsmApplicationMode_Parking = 1,
            NsmApplicationMode_Factory = 2,
            NsmApplicationMode_Transport = 3,
            NsmApplicationMode_Normal = 4,
            NsmApplicationMode_Swl = 5,
            NsmApplicationMode_Extended1 = 6,
            NsmApplicationMode_Extended2 = 7,
            NsmApplicationMode_Extended3 = 8,
            NsmApplicationMode_Extended4 = 9,
            NsmApplicationMode_Extended5 = 10,
            NsmApplicationMode_Last = 11
        };
        
        NsmApplicationMode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NsmApplicationMode_NotSet)) {}
        NsmApplicationMode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NsmApplicationMode_NotSet):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Parking):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Factory):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Transport):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Normal):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Swl):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Extended1):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Extended2):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Extended3):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Extended4):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Extended5):
                case static_cast<int32_t>(Literal::NsmApplicationMode_Last):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmApplicationMode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmApplicationMode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmApplicationMode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmApplicationMode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmApplicationMode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmApplicationMode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NsmRestartReason : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NsmRestartReason_NotSet = 0,
            NsmRestartReason_ApplicationFailure = 1,
            NsmRestartReason_Diagnosis = 2,
            NsmRestartReason_Swl = 3,
            NsmRestartReason_User = 4,
            NsmRestartReason_Bios = 5,
            NsmRestartReason_WatchDog = 6,
            NsmRestartReason_Normal = 7,
            NsmRestartReason_FirstHearBeatMissed = 8,
            NsmRestartReason_HearBeatMissed = 9,
            NsmRestartReason_VoltageOutOfRange = 10,
            NsmRestartReason_TemperatureOutOfRange = 11,
            NsmRestartReason_RemoteStop = 12,
            NsmRestartReason_IOCPowerOff = 13,
            NsmRestartReason_InactivityTimeOut = 14,
            NsmRestartReason_BatteryOff = 15,
            NsmRestartReason_BootInfoError = 16,
            NsmRestartReason_Extended1 = 17,
            NsmRestartReason_Extended2 = 18,
            NsmRestartReason_Extended3 = 19,
            NsmRestartReason_Extended4 = 20,
            NsmRestartReason_Extended5 = 21,
            NsmRestartReason_Last = 22
        };
        
        NsmRestartReason() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NsmRestartReason_NotSet)) {}
        NsmRestartReason(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NsmRestartReason_NotSet):
                case static_cast<int32_t>(Literal::NsmRestartReason_ApplicationFailure):
                case static_cast<int32_t>(Literal::NsmRestartReason_Diagnosis):
                case static_cast<int32_t>(Literal::NsmRestartReason_Swl):
                case static_cast<int32_t>(Literal::NsmRestartReason_User):
                case static_cast<int32_t>(Literal::NsmRestartReason_Bios):
                case static_cast<int32_t>(Literal::NsmRestartReason_WatchDog):
                case static_cast<int32_t>(Literal::NsmRestartReason_Normal):
                case static_cast<int32_t>(Literal::NsmRestartReason_FirstHearBeatMissed):
                case static_cast<int32_t>(Literal::NsmRestartReason_HearBeatMissed):
                case static_cast<int32_t>(Literal::NsmRestartReason_VoltageOutOfRange):
                case static_cast<int32_t>(Literal::NsmRestartReason_TemperatureOutOfRange):
                case static_cast<int32_t>(Literal::NsmRestartReason_RemoteStop):
                case static_cast<int32_t>(Literal::NsmRestartReason_IOCPowerOff):
                case static_cast<int32_t>(Literal::NsmRestartReason_InactivityTimeOut):
                case static_cast<int32_t>(Literal::NsmRestartReason_BatteryOff):
                case static_cast<int32_t>(Literal::NsmRestartReason_BootInfoError):
                case static_cast<int32_t>(Literal::NsmRestartReason_Extended1):
                case static_cast<int32_t>(Literal::NsmRestartReason_Extended2):
                case static_cast<int32_t>(Literal::NsmRestartReason_Extended3):
                case static_cast<int32_t>(Literal::NsmRestartReason_Extended4):
                case static_cast<int32_t>(Literal::NsmRestartReason_Extended5):
                case static_cast<int32_t>(Literal::NsmRestartReason_Last):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmRestartReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmRestartReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmRestartReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmRestartReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmRestartReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmRestartReason &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NsmSeat : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NsmSeat_NotSet = 0,
            NsmSeat_Driver = 1,
            NsmSeat_CoDriver = 2,
            NsmSeat_Rear1 = 3,
            NsmSeat_Rear2 = 4,
            NsmSeat_Rear3 = 5,
            NsmSeat_Last = 6
        };
        
        NsmSeat() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NsmSeat_NotSet)) {}
        NsmSeat(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NsmSeat_NotSet):
                case static_cast<int32_t>(Literal::NsmSeat_Driver):
                case static_cast<int32_t>(Literal::NsmSeat_CoDriver):
                case static_cast<int32_t>(Literal::NsmSeat_Rear1):
                case static_cast<int32_t>(Literal::NsmSeat_Rear2):
                case static_cast<int32_t>(Literal::NsmSeat_Rear3):
                case static_cast<int32_t>(Literal::NsmSeat_Last):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmSeat &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmSeat &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmSeat &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmSeat &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmSeat &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmSeat &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NsmPowerModeTransitionReason : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EVENT_IGN_U15 = 0,
            EVENT_TERMINAL_R = 1,
            EVENT_PUSH_BTN = 2,
            EVENT_LONG_PUSH_BTN = 3,
            HCAN_WAKEUP = 4,
            ICAN_WAKEUP = 5,
            CAN_CAM_OVERRIDABLE = 6,
            CAN_CAM_NONOVERRIDABLE = 7,
            CAN_DISPLAYOFF_REQUEST = 8,
            CAN_ECO_PSAVE_REQUEST = 9,
            CAN_ALARM_REQUEST = 10,
            CAN_IRC_REQUEST = 11,
            CAN_BGRND_LIGHT = 12,
            SOC_EVENT_PHONESTATUS = 13,
            SOC_EVENT_ALARM = 14,
            SOC_EVENT_EMERGENCY = 15,
            SLEEP_TIMER_FIRE = 16,
            ONE_HOUR_TIMER_FIRE = 17,
            STDBY_TIMER_FIRE = 18,
            SHUTDOWN_TIMER_FIRE = 19,
            SWDL_RESET = 20,
            SHUTDOWN_TRIGGER = 21,
            VOLTAGEMGR_IOCONLY = 22,
            VOLTAGEMGR_DEEPSLEEP = 23,
            SOC_EVENT_DISPLAYOFF = 24,
            EVENTS_COUNT = 25
        };
        
        NsmPowerModeTransitionReason() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EVENT_IGN_U15)) {}
        NsmPowerModeTransitionReason(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EVENT_IGN_U15):
                case static_cast<int32_t>(Literal::EVENT_TERMINAL_R):
                case static_cast<int32_t>(Literal::EVENT_PUSH_BTN):
                case static_cast<int32_t>(Literal::EVENT_LONG_PUSH_BTN):
                case static_cast<int32_t>(Literal::HCAN_WAKEUP):
                case static_cast<int32_t>(Literal::ICAN_WAKEUP):
                case static_cast<int32_t>(Literal::CAN_CAM_OVERRIDABLE):
                case static_cast<int32_t>(Literal::CAN_CAM_NONOVERRIDABLE):
                case static_cast<int32_t>(Literal::CAN_DISPLAYOFF_REQUEST):
                case static_cast<int32_t>(Literal::CAN_ECO_PSAVE_REQUEST):
                case static_cast<int32_t>(Literal::CAN_ALARM_REQUEST):
                case static_cast<int32_t>(Literal::CAN_IRC_REQUEST):
                case static_cast<int32_t>(Literal::CAN_BGRND_LIGHT):
                case static_cast<int32_t>(Literal::SOC_EVENT_PHONESTATUS):
                case static_cast<int32_t>(Literal::SOC_EVENT_ALARM):
                case static_cast<int32_t>(Literal::SOC_EVENT_EMERGENCY):
                case static_cast<int32_t>(Literal::SLEEP_TIMER_FIRE):
                case static_cast<int32_t>(Literal::ONE_HOUR_TIMER_FIRE):
                case static_cast<int32_t>(Literal::STDBY_TIMER_FIRE):
                case static_cast<int32_t>(Literal::SHUTDOWN_TIMER_FIRE):
                case static_cast<int32_t>(Literal::SWDL_RESET):
                case static_cast<int32_t>(Literal::SHUTDOWN_TRIGGER):
                case static_cast<int32_t>(Literal::VOLTAGEMGR_IOCONLY):
                case static_cast<int32_t>(Literal::VOLTAGEMGR_DEEPSLEEP):
                case static_cast<int32_t>(Literal::SOC_EVENT_DISPLAYOFF):
                case static_cast<int32_t>(Literal::EVENTS_COUNT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmPowerModeTransitionReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmPowerModeTransitionReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmPowerModeTransitionReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmPowerModeTransitionReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmPowerModeTransitionReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmPowerModeTransitionReason &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NsmSessionState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NsmSessionState_Unregistered = 0,
            NsmSessionState_Inactive = 1,
            NsmSessionState_Active = 2
        };
        
        NsmSessionState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NsmSessionState_Unregistered)) {}
        NsmSessionState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NsmSessionState_Unregistered):
                case static_cast<int32_t>(Literal::NsmSessionState_Inactive):
                case static_cast<int32_t>(Literal::NsmSessionState_Active):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmSessionState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmSessionState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmSessionState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmSessionState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmSessionState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmSessionState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NsmShutdownReason : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NsmShutdownReason_NotSet = 0,
            NsmShutdownReason_Normal = 1,
            NsmShutdownReason_SupplyBad = 2,
            NsmShutdownReason_SupplyPoor = 3,
            NsmShutdownReason_ThermalBad = 4,
            NsmShutdownReason_ThermalPoor = 5,
            NsmShutdownReason_SwlNotActive = 6,
            NsmShutdownReason_Extended1 = 7,
            NsmShutdownReason_Extended2 = 8,
            NsmShutdownReason_Extended3 = 9,
            NsmShutdownReason_Extended4 = 10,
            NsmShutdownReason_Extended5 = 11,
            NsmShutdownReason_Last = 12
        };
        
        NsmShutdownReason() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NsmShutdownReason_NotSet)) {}
        NsmShutdownReason(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NsmShutdownReason_NotSet):
                case static_cast<int32_t>(Literal::NsmShutdownReason_Normal):
                case static_cast<int32_t>(Literal::NsmShutdownReason_SupplyBad):
                case static_cast<int32_t>(Literal::NsmShutdownReason_SupplyPoor):
                case static_cast<int32_t>(Literal::NsmShutdownReason_ThermalBad):
                case static_cast<int32_t>(Literal::NsmShutdownReason_ThermalPoor):
                case static_cast<int32_t>(Literal::NsmShutdownReason_SwlNotActive):
                case static_cast<int32_t>(Literal::NsmShutdownReason_Extended1):
                case static_cast<int32_t>(Literal::NsmShutdownReason_Extended2):
                case static_cast<int32_t>(Literal::NsmShutdownReason_Extended3):
                case static_cast<int32_t>(Literal::NsmShutdownReason_Extended4):
                case static_cast<int32_t>(Literal::NsmShutdownReason_Extended5):
                case static_cast<int32_t>(Literal::NsmShutdownReason_Last):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmShutdownReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmShutdownReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmShutdownReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmShutdownReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmShutdownReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmShutdownReason &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NsmRunningReason : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NsmRunningReason_NotSet = 0,
            NsmRunningReason_WakeupCan = 1,
            NsmRunningReason_WakeupMediaEject = 2,
            NsmRunningReason_WakeupMediaInsertion = 3,
            NsmRunningReason_WakeupHevac = 4,
            NsmRunningReason_WakeupPhone = 5,
            NsmRunningReason_WakeupPowerOnButton = 6,
            NsmRunningReason_StartupFstp = 7,
            NsmRunningReason_StartupSwitchToPower = 8,
            NsmRunningReason_RestartSwRequest = 9,
            NsmRunningReason_RestartInternalHealth = 10,
            NsmRunningReason_RestartExternalHealth = 11,
            NsmRunningReason_RestartUnexpected = 12,
            NsmRunningReason_RestartUser = 13,
            NsmRunningReason_IgnitionActive = 14,
            NsmRunningReason_RTC = 15,
            NsmRunningReason_Extended1 = 16,
            NsmRunningReason_Extended2 = 17,
            NsmRunningReason_Extended3 = 18,
            NsmRunningReason_Extended4 = 19,
            NsmRunningReason_Extended5 = 20,
            NsmRunningReason_PlatformEnd = 127
        };
        
        NsmRunningReason() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NsmRunningReason_NotSet)) {}
        NsmRunningReason(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NsmRunningReason_NotSet):
                case static_cast<int32_t>(Literal::NsmRunningReason_WakeupCan):
                case static_cast<int32_t>(Literal::NsmRunningReason_WakeupMediaEject):
                case static_cast<int32_t>(Literal::NsmRunningReason_WakeupMediaInsertion):
                case static_cast<int32_t>(Literal::NsmRunningReason_WakeupHevac):
                case static_cast<int32_t>(Literal::NsmRunningReason_WakeupPhone):
                case static_cast<int32_t>(Literal::NsmRunningReason_WakeupPowerOnButton):
                case static_cast<int32_t>(Literal::NsmRunningReason_StartupFstp):
                case static_cast<int32_t>(Literal::NsmRunningReason_StartupSwitchToPower):
                case static_cast<int32_t>(Literal::NsmRunningReason_RestartSwRequest):
                case static_cast<int32_t>(Literal::NsmRunningReason_RestartInternalHealth):
                case static_cast<int32_t>(Literal::NsmRunningReason_RestartExternalHealth):
                case static_cast<int32_t>(Literal::NsmRunningReason_RestartUnexpected):
                case static_cast<int32_t>(Literal::NsmRunningReason_RestartUser):
                case static_cast<int32_t>(Literal::NsmRunningReason_IgnitionActive):
                case static_cast<int32_t>(Literal::NsmRunningReason_RTC):
                case static_cast<int32_t>(Literal::NsmRunningReason_Extended1):
                case static_cast<int32_t>(Literal::NsmRunningReason_Extended2):
                case static_cast<int32_t>(Literal::NsmRunningReason_Extended3):
                case static_cast<int32_t>(Literal::NsmRunningReason_Extended4):
                case static_cast<int32_t>(Literal::NsmRunningReason_Extended5):
                case static_cast<int32_t>(Literal::NsmRunningReason_PlatformEnd):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmRunningReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmRunningReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmRunningReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmRunningReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmRunningReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmRunningReason &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct NsmNodeState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            NsmNodeState_NotSet = 0,
            NsmNodeState_StartUp = 1,
            NsmNodeState_BaseRunning = 2,
            NsmNodeState_LucRunning = 3,
            NsmNodeState_FullyRunning = 4,
            NsmNodeState_FullyOperational = 5,
            NsmNodeState_ShuttingDown = 6,
            NsmNodeState_ShutdownDelay = 7,
            NsmNodeState_FastShutdown = 8,
            NsmNodeState_DegradedPower = 9,
            NsmNodeState_Shutdown = 10,
            NsmNodeState_Last = 11
        };
        
        NsmNodeState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::NsmNodeState_NotSet)) {}
        NsmNodeState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::NsmNodeState_NotSet):
                case static_cast<int32_t>(Literal::NsmNodeState_StartUp):
                case static_cast<int32_t>(Literal::NsmNodeState_BaseRunning):
                case static_cast<int32_t>(Literal::NsmNodeState_LucRunning):
                case static_cast<int32_t>(Literal::NsmNodeState_FullyRunning):
                case static_cast<int32_t>(Literal::NsmNodeState_FullyOperational):
                case static_cast<int32_t>(Literal::NsmNodeState_ShuttingDown):
                case static_cast<int32_t>(Literal::NsmNodeState_ShutdownDelay):
                case static_cast<int32_t>(Literal::NsmNodeState_FastShutdown):
                case static_cast<int32_t>(Literal::NsmNodeState_DegradedPower):
                case static_cast<int32_t>(Literal::NsmNodeState_Shutdown):
                case static_cast<int32_t>(Literal::NsmNodeState_Last):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const NsmNodeState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const NsmNodeState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const NsmNodeState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const NsmNodeState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const NsmNodeState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const NsmNodeState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct NsmSession : CommonAPI::Struct<std::string, std::string, NsmSeat, NsmSessionState> {
    	
    	NsmSession() {
    	}
    	NsmSession(const std::string &_Name, const std::string &_Owner, const NsmSeat &_enSeat, const NsmSessionState &_enState)
    	{
    		std::get<0>(values_) = _Name;
    		std::get<1>(values_) = _Owner;
    		std::get<2>(values_) = _enSeat;
    		std::get<3>(values_) = _enState;
    	}
    	inline const std::string &getName() const { return std::get<0>(values_); }
    	inline void setName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getOwner() const { return std::get<1>(values_); }
    	inline void setOwner(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const NsmSeat &getEnSeat() const { return std::get<2>(values_); }
    	inline void setEnSeat(const NsmSeat &_value) { std::get<2>(values_) = _value; }
    	inline const NsmSessionState &getEnState() const { return std::get<3>(values_); }
    	inline void setEnState(const NsmSessionState &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const NsmSession& _other) const {
                return (getName() == _other.getName() && getOwner() == _other.getOwner() && getEnSeat() == _other.getEnSeat() && getEnState() == _other.getEnState());
        }
    	inline bool operator!=(const NsmSession &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct NsmPowerModeTransition : CommonAPI::Struct<std::string, NsmPowerModeTransitionReason> {
    	
    	NsmPowerModeTransition() {
    	}
    	NsmPowerModeTransition(const std::string &_powermode, const NsmPowerModeTransitionReason &_enReason)
    	{
    		std::get<0>(values_) = _powermode;
    		std::get<1>(values_) = _enReason;
    	}
    	inline const std::string &getPowermode() const { return std::get<0>(values_); }
    	inline void setPowermode(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const NsmPowerModeTransitionReason &getEnReason() const { return std::get<1>(values_); }
    	inline void setEnReason(const NsmPowerModeTransitionReason &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const NsmPowerModeTransition& _other) const {
                return (getPowermode() == _other.getPowermode() && getEnReason() == _other.getEnReason());
        }
    	inline bool operator!=(const NsmPowerModeTransition &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "org.genivi.NodeStateManager.NodeStateTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(2, 3);
}

}; // struct NodeStateTypes

} // namespace NodeStateManager
} // namespace genivi
} // namespace org
} // namespace v2

namespace CommonAPI {
}


namespace std {
    //Hash for NsmErrorStatus
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmErrorStatus& nsmErrorStatus) const {
            return static_cast<int32_t>(nsmErrorStatus);
        }
    };
    //Hash for NsmApplicationMode
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmApplicationMode& nsmApplicationMode) const {
            return static_cast<int32_t>(nsmApplicationMode);
        }
    };
    //Hash for NsmRestartReason
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmRestartReason> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmRestartReason& nsmRestartReason) const {
            return static_cast<int32_t>(nsmRestartReason);
        }
    };
    //Hash for NsmSeat
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSeat& nsmSeat) const {
            return static_cast<int32_t>(nsmSeat);
        }
    };
    //Hash for NsmPowerModeTransitionReason
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmPowerModeTransitionReason> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmPowerModeTransitionReason& nsmPowerModeTransitionReason) const {
            return static_cast<int32_t>(nsmPowerModeTransitionReason);
        }
    };
    //Hash for NsmSessionState
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmSessionState& nsmSessionState) const {
            return static_cast<int32_t>(nsmSessionState);
        }
    };
    //Hash for NsmShutdownReason
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmShutdownReason> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmShutdownReason& nsmShutdownReason) const {
            return static_cast<int32_t>(nsmShutdownReason);
        }
    };
    //Hash for NsmRunningReason
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmRunningReason> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmRunningReason& nsmRunningReason) const {
            return static_cast<int32_t>(nsmRunningReason);
        }
    };
    //Hash for NsmNodeState
    template<>
    struct hash<::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState> {
        inline size_t operator()(const ::v2::org::genivi::NodeStateManager::NodeStateTypes::NsmNodeState& nsmNodeState) const {
            return static_cast<int32_t>(nsmNodeState);
        }
    };
}


// Compatibility
namespace v2_3 = v2;

#endif // V2_ORG_GENIVI_NODESTATEMANAGER_Node_State_Types_HPP_
