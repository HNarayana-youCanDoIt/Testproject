/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V2_COM_HARMAN_PRES_aaprestypes_HPP_
#define V2_COM_HARMAN_PRES_aaprestypes_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v2 {
namespace com {
namespace harman {
namespace pres {

struct aaprestypes {
    
    struct eScreenSwitchReason : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            USER_SWITCH = 0,
            TRANSIENT_SWITCH = 1
        };
        
        eScreenSwitchReason() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::USER_SWITCH)) {}
        eScreenSwitchReason(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::USER_SWITCH):
                case static_cast<int32_t>(Literal::TRANSIENT_SWITCH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eScreenSwitchReason &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eScreenSwitchReason &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eScreenSwitchReason &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eScreenSwitchReason &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eScreenSwitchReason &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eScreenSwitchReason &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct AapDeviceStruct : CommonAPI::Struct<int32_t, std::string, std::string, std::string, int32_t, bool, bool> {
    	
    	AapDeviceStruct() {
    		std::get<5>(values_) = false;
    		std::get<6>(values_) = false;
    	}
    	AapDeviceStruct(const int32_t &_deviceId, const std::string &_deviceName, const std::string &_deviceAddr, const std::string &_usbSerialNum, const int32_t &_deviceClass, const bool &_bInRange, const bool &_bAawpSupported)
    	{
    		std::get<0>(values_) = _deviceId;
    		std::get<1>(values_) = _deviceName;
    		std::get<2>(values_) = _deviceAddr;
    		std::get<3>(values_) = _usbSerialNum;
    		std::get<4>(values_) = _deviceClass;
    		std::get<5>(values_) = _bInRange;
    		std::get<6>(values_) = _bAawpSupported;
    	}
    	inline const int32_t &getDeviceId() const { return std::get<0>(values_); }
    	inline void setDeviceId(const int32_t &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getDeviceName() const { return std::get<1>(values_); }
    	inline void setDeviceName(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getDeviceAddr() const { return std::get<2>(values_); }
    	inline void setDeviceAddr(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getUsbSerialNum() const { return std::get<3>(values_); }
    	inline void setUsbSerialNum(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline const int32_t &getDeviceClass() const { return std::get<4>(values_); }
    	inline void setDeviceClass(const int32_t &_value) { std::get<4>(values_) = _value; }
    	inline const bool &getBInRange() const { return std::get<5>(values_); }
    	inline void setBInRange(const bool _value) { std::get<5>(values_) = _value; }
    	inline const bool &getBAawpSupported() const { return std::get<6>(values_); }
    	inline void setBAawpSupported(const bool _value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const AapDeviceStruct& _other) const {
                return (getDeviceId() == _other.getDeviceId() && getDeviceName() == _other.getDeviceName() && getDeviceAddr() == _other.getDeviceAddr() && getUsbSerialNum() == _other.getUsbSerialNum() && getDeviceClass() == _other.getDeviceClass() && getBInRange() == _other.getBInRange() && getBAawpSupported() == _other.getBAawpSupported());
        }
    	inline bool operator!=(const AapDeviceStruct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct enTransportType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            USB = 1,
            WIFI = 2
        };
        
        enTransportType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::USB)) {}
        enTransportType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::USB):
                case static_cast<int32_t>(Literal::WIFI):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const enTransportType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const enTransportType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const enTransportType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const enTransportType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const enTransportType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const enTransportType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct WifiInfoStruct : CommonAPI::Struct<std::string, std::string> {
    	
    	WifiInfoStruct() {
    	}
    	WifiInfoStruct(const std::string &_password, const std::string &_deviceAddr)
    	{
    		std::get<0>(values_) = _password;
    		std::get<1>(values_) = _deviceAddr;
    	}
    	inline const std::string &getPassword() const { return std::get<0>(values_); }
    	inline void setPassword(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getDeviceAddr() const { return std::get<1>(values_); }
    	inline void setDeviceAddr(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const WifiInfoStruct& _other) const {
                return (getPassword() == _other.getPassword() && getDeviceAddr() == _other.getDeviceAddr());
        }
    	inline bool operator!=(const WifiInfoStruct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct UsbInfoStruct : CommonAPI::Struct<int32_t, int32_t, std::string> {
    	
    	UsbInfoStruct() {
    	}
    	UsbInfoStruct(const int32_t &_busNum, const int32_t &_devNum, const std::string &_serialNum)
    	{
    		std::get<0>(values_) = _busNum;
    		std::get<1>(values_) = _devNum;
    		std::get<2>(values_) = _serialNum;
    	}
    	inline const int32_t &getBusNum() const { return std::get<0>(values_); }
    	inline void setBusNum(const int32_t &_value) { std::get<0>(values_) = _value; }
    	inline const int32_t &getDevNum() const { return std::get<1>(values_); }
    	inline void setDevNum(const int32_t &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getSerialNum() const { return std::get<2>(values_); }
    	inline void setSerialNum(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const UsbInfoStruct& _other) const {
                return (getBusNum() == _other.getBusNum() && getDevNum() == _other.getDevNum() && getSerialNum() == _other.getSerialNum());
        }
    	inline bool operator!=(const UsbInfoStruct &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sTransportInfo : CommonAPI::Struct<UsbInfoStruct, WifiInfoStruct> {
    	
    	sTransportInfo() {
    	}
    	sTransportInfo(const UsbInfoStruct &_usbInfo, const WifiInfoStruct &_wifiInfo)
    	{
    		std::get<0>(values_) = _usbInfo;
    		std::get<1>(values_) = _wifiInfo;
    	}
    	inline const UsbInfoStruct &getUsbInfo() const { return std::get<0>(values_); }
    	inline void setUsbInfo(const UsbInfoStruct &_value) { std::get<0>(values_) = _value; }
    	inline const WifiInfoStruct &getWifiInfo() const { return std::get<1>(values_); }
    	inline void setWifiInfo(const WifiInfoStruct &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sTransportInfo& _other) const {
                return (getUsbInfo() == _other.getUsbInfo() && getWifiInfo() == _other.getWifiInfo());
        }
    	inline bool operator!=(const sTransportInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.pres.aaprestypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(2, 0);
}

}; // struct aaprestypes

} // namespace pres
} // namespace harman
} // namespace com
} // namespace v2

namespace CommonAPI {
}


namespace std {
    //Hash for eScreenSwitchReason
    template<>
    struct hash<::v2::com::harman::pres::aaprestypes::eScreenSwitchReason> {
        inline size_t operator()(const ::v2::com::harman::pres::aaprestypes::eScreenSwitchReason& eScreenSwitchReason) const {
            return static_cast<int32_t>(eScreenSwitchReason);
        }
    };
    //Hash for enTransportType
    template<>
    struct hash<::v2::com::harman::pres::aaprestypes::enTransportType> {
        inline size_t operator()(const ::v2::com::harman::pres::aaprestypes::enTransportType& enTransportType) const {
            return static_cast<int32_t>(enTransportType);
        }
    };
}


// Compatibility
namespace v2_0 = v2;

#endif // V2_COM_HARMAN_PRES_aaprestypes_HPP_
