/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_MMPRESPLUGIN_media_Pres_Plugin_PROXY_HPP_
#define V0_COM_HARMAN_MMPRESPLUGIN_media_Pres_Plugin_PROXY_HPP_

#include <v0/com/harman/mmpresPlugin/mediaPresPluginProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace mmpresPlugin {

template <typename ... _AttributeExtensions>
class mediaPresPluginProxy
    : virtual public mediaPresPlugin, 
      virtual public mediaPresPluginProxyBase,
      virtual public _AttributeExtensions... {
public:
    mediaPresPluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~mediaPresPluginProxy();

    typedef mediaPresPlugin InterfaceType;


    /**
     * description: Indicates the error encountered due to USB device connection
     */
    /**
     * Returns the wrapper class that provides access to the attribute UsbDeviceError.
     */
    virtual UsbDeviceErrorAttribute& getUsbDeviceErrorAttribute() {
        return delegate_->getUsbDeviceErrorAttribute();
    }
    /**
     * description: Indicates the error encountered by Media
     */
    /**
     * Returns the wrapper class that provides access to the attribute UsbPlaybackMode.
     */
    virtual UsbPlaybackModeAttribute& getUsbPlaybackModeAttribute() {
        return delegate_->getUsbPlaybackModeAttribute();
    }
    /**
     * description: Indicates device items count
     */
    /**
     * Returns the wrapper class that provides access to the attribute DeviceItemsInfo.
     */
    virtual DeviceItemsInfoAttribute& getDeviceItemsInfoAttribute() {
        return delegate_->getDeviceItemsInfoAttribute();
    }
    /**
     * description: Indicates the bit rate of the current song by Media
     */
    /**
     * Returns the wrapper class that provides access to the attribute BitRate.
     */
    virtual BitRateAttribute& getBitRateAttribute() {
        return delegate_->getBitRateAttribute();
    }
    /**
     * description: Indicates the sampling rate of the current song by Media
     */
    /**
     * Returns the wrapper class that provides access to the attribute SamplingRate.
     */
    virtual SamplingRateAttribute& getSamplingRateAttribute() {
        return delegate_->getSamplingRateAttribute();
    }
    /**
     * description: Indicates whether metadata of the current song is received or not by Media
     */
    /**
     * Returns the wrapper class that provides access to the attribute BTMetaDataAvailabilityStatus.
     */
    virtual BTMetaDataAvailabilityStatusAttribute& getBTMetaDataAvailabilityStatusAttribute() {
        return delegate_->getBTMetaDataAvailabilityStatusAttribute();
    }
    /**
     * description: Indicates testmode parameters for video
     */
    /**
     * Returns the wrapper class that provides access to the attribute VideoTestModeParameters.
     */
    virtual VideoTestModeParametersAttribute& getVideoTestModeParametersAttribute() {
        return delegate_->getVideoTestModeParametersAttribute();
    }
    /**
     * description: Vr feature, provides media files path
     */
    /**
     * Returns the wrapper class that provides access to the attribute TEFilesPath.
     */
    virtual TEFilesPathAttribute& getTEFilesPathAttribute() {
        return delegate_->getTEFilesPathAttribute();
    }
    /**
     * description: Indicates the error encountered by Media
     */
    /**
     * Returns the wrapper class that provides access to the attribute mediaError.
     */
    virtual MediaErrorAttribute& getMediaErrorAttribute() {
        return delegate_->getMediaErrorAttribute();
    }

    /**
     * description: track session size/content/order have been changed,                        HMI
     *   needs to fetch updated the contents
     */
    /**
     * Returns the wrapper class that provides access to the broadcast trackSessionChanged.
     */
    virtual TrackSessionChangedEvent& getTrackSessionChangedEvent() {
        return delegate_->getTrackSessionChangedEvent();
    }

    /**
     * description: This method will toggle the repeat state as OFF->All->one. 		 		 Input :  none	
     *   		               returns:	eCallResult:	result
     * Calls toggleRepeat with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void toggleRepeat(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls toggleRepeat with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> toggleRepeatAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ToggleRepeatAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method will toggle the shuffle state as OFF->All. 		 		 Input :  None     
     *       returns:	eCallResult:	result
     * Calls toggleShuffle with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void toggleShuffle(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls toggleShuffle with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> toggleShuffleAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ToggleShuffleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to perform the next track operation. 		 		 Input :  UInt64 : step	
     *   		               returns:	  eCallResult:	result
     * Calls next with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void next(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls next with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> nextAsync(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, NextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to perform the previous track operation. 		 		 Input :  UInt64 :
     *   step	 		               returns:	  eCallResult:	result
     * Calls previous with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void previous(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls previous with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> previousAsync(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, PreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to perform the pause operation. 		 		 Input :  Boolean: pressed -
     *   Whether the button is pressed or released.	 		               returns:
     *   eCallResult:	result
     * Calls pause with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pause(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pause with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> pauseAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, PauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to perform the resume operation. 		 		 Input :  Boolean: pressed -
     *   Whether the button is pressed or released.	 		               returns:
     *   eCallResult:	result
     * Calls resume with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void resume(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls resume with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> resumeAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ResumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to perform the FastForward operation. 		 		 Input :  Boolean:
     *   pressed - Whether the button is pressed or released.	 		              
     *   returns: eCallResult:	result
     * Calls fastforward with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void fastforward(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls fastforward with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> fastforwardAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, FastforwardAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method to perform the FastReverse operation. 		 		 Input :  Boolean:
     *   pressed - Whether the button is pressed or released.	 		              
     *   returns: eCallResult:	result
     * Calls fastreverse with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void fastreverse(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls fastreverse with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> fastreverseAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, FastreverseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is to receive the RVC status from HMI and enable/disable the video
     *   laye based on this. 		 		 Input :  boolean: rvcStatus : True = RVC engaged,
     *   False = RVC disengaged. 		               returns: eCallResult:result
     * Calls updateRvcState with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void updateRvcState(const bool &_rvcStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls updateRvcState with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> updateRvcStateAsync(const bool &_rvcStatus, UpdateRvcStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is to receive the RVC status from HMI and enable/disable the video
     *   laye based on this. 		 		 Input :  eVideoSurfaceDisplayStatus: surfaceStatus 
     *   		               returns:	  String: path
     * Calls videoSurfaceControl with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void videoSurfaceControl(const mediaPresPlugin::eVideoSurfaceDisplayStatus &_surfaceStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls videoSurfaceControl with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> videoSurfaceControlAsync(const mediaPresPlugin::eVideoSurfaceDisplayStatus &_surfaceStatus, VideoSurfaceControlAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is to fetch current playing track index in browse list.  		It will
     *   be required to display the correct pointer for current playing track in case
     *   track changed during browse list display. 		 		 Input :  UInt32      
     *   sessionID 				  UInt32       QueryID	 		               returns: eCallResult
     *   result				 				UInt32       sessionQueryID 				Boolean 	 highlight 				UInt64 
     *   	 trackIndex
     * Calls getCurrentTrackIndex with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCurrentTrackIndex(const uint32_t &_sessionID, const uint32_t &_QueryID, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, uint32_t &_sessionQueryID, bool &_highlight, uint64_t &_trackIndex, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCurrentTrackIndex with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCurrentTrackIndexAsync(const uint32_t &_sessionID, const uint32_t &_QueryID, GetCurrentTrackIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<mediaPresPluginProxyBase> delegate_;
};

typedef mediaPresPluginProxy<> mediaPresPluginProxyDefault;

namespace mediaPresPluginExtensions {
    /**
     * description: Indicates the error encountered due to USB device connection
     */
    template <template <typename > class _ExtensionType>
    class UsbDeviceErrorAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::UsbDeviceErrorAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::UsbDeviceErrorAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        UsbDeviceErrorAttributeExtension() {}
    #endif
    
        UsbDeviceErrorAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getUsbDeviceErrorAttribute()) {
        }
    
        inline extension_type& getUsbDeviceErrorAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates the error encountered by Media
     */
    template <template <typename > class _ExtensionType>
    class UsbPlaybackModeAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::UsbPlaybackModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::UsbPlaybackModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        UsbPlaybackModeAttributeExtension() {}
    #endif
    
        UsbPlaybackModeAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getUsbPlaybackModeAttribute()) {
        }
    
        inline extension_type& getUsbPlaybackModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates device items count
     */
    template <template <typename > class _ExtensionType>
    class DeviceItemsInfoAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::DeviceItemsInfoAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::DeviceItemsInfoAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DeviceItemsInfoAttributeExtension() {}
    #endif
    
        DeviceItemsInfoAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getDeviceItemsInfoAttribute()) {
        }
    
        inline extension_type& getDeviceItemsInfoAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates the bit rate of the current song by Media
     */
    template <template <typename > class _ExtensionType>
    class BitRateAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::BitRateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::BitRateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        BitRateAttributeExtension() {}
    #endif
    
        BitRateAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getBitRateAttribute()) {
        }
    
        inline extension_type& getBitRateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates the sampling rate of the current song by Media
     */
    template <template <typename > class _ExtensionType>
    class SamplingRateAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::SamplingRateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::SamplingRateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SamplingRateAttributeExtension() {}
    #endif
    
        SamplingRateAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getSamplingRateAttribute()) {
        }
    
        inline extension_type& getSamplingRateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates whether metadata of the current song is received or not by Media
     */
    template <template <typename > class _ExtensionType>
    class BTMetaDataAvailabilityStatusAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::BTMetaDataAvailabilityStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::BTMetaDataAvailabilityStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        BTMetaDataAvailabilityStatusAttributeExtension() {}
    #endif
    
        BTMetaDataAvailabilityStatusAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getBTMetaDataAvailabilityStatusAttribute()) {
        }
    
        inline extension_type& getBTMetaDataAvailabilityStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates testmode parameters for video
     */
    template <template <typename > class _ExtensionType>
    class VideoTestModeParametersAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::VideoTestModeParametersAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::VideoTestModeParametersAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VideoTestModeParametersAttributeExtension() {}
    #endif
    
        VideoTestModeParametersAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getVideoTestModeParametersAttribute()) {
        }
    
        inline extension_type& getVideoTestModeParametersAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Vr feature, provides media files path
     */
    template <template <typename > class _ExtensionType>
    class TEFilesPathAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::TEFilesPathAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::TEFilesPathAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TEFilesPathAttributeExtension() {}
    #endif
    
        TEFilesPathAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getTEFilesPathAttribute()) {
        }
    
        inline extension_type& getTEFilesPathAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Indicates the error encountered by Media
     */
    template <template <typename > class _ExtensionType>
    class MediaErrorAttributeExtension {
     public:
        typedef _ExtensionType<mediaPresPluginProxyBase::MediaErrorAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<mediaPresPluginProxyBase::MediaErrorAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MediaErrorAttributeExtension() {}
    #endif
    
        MediaErrorAttributeExtension(mediaPresPluginProxyBase& proxy): attributeExtension_(proxy.getMediaErrorAttribute()) {
        }
    
        inline extension_type& getMediaErrorAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace mediaPresPluginExtensions

//
// mediaPresPluginProxy Implementation
//
template <typename ... _AttributeExtensions>
mediaPresPluginProxy<_AttributeExtensions...>::mediaPresPluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<mediaPresPluginProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<mediaPresPluginProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
mediaPresPluginProxy<_AttributeExtensions...>::~mediaPresPluginProxy() {
}

/**
 * description: This method will toggle the repeat state as OFF->All->one. 		 		 Input :  none	
 *   		               returns:	eCallResult:	result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::toggleRepeat(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->toggleRepeat(_buttonStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::toggleRepeatAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ToggleRepeatAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->toggleRepeatAsync(_buttonStatus, _callback, _info);
}
/**
 * description: This method will toggle the shuffle state as OFF->All. 		 		 Input :  None     
 *       returns:	eCallResult:	result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::toggleShuffle(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->toggleShuffle(_buttonStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::toggleShuffleAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ToggleShuffleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->toggleShuffleAsync(_buttonStatus, _callback, _info);
}
/**
 * description: This method to perform the next track operation. 		 		 Input :  UInt64 : step	
 *   		               returns:	  eCallResult:	result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::next(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->next(_step, _buttonStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::nextAsync(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, NextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->nextAsync(_step, _buttonStatus, _callback, _info);
}
/**
 * description: This method to perform the previous track operation. 		 		 Input :  UInt64 :
 *   step	 		               returns:	  eCallResult:	result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::previous(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->previous(_step, _buttonStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::previousAsync(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, PreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->previousAsync(_step, _buttonStatus, _callback, _info);
}
/**
 * description: This method to perform the pause operation. 		 		 Input :  Boolean: pressed -
 *   Whether the button is pressed or released.	 		               returns:
 *   eCallResult:	result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::pause(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->pause(_buttonStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::pauseAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, PauseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->pauseAsync(_buttonStatus, _callback, _info);
}
/**
 * description: This method to perform the resume operation. 		 		 Input :  Boolean: pressed -
 *   Whether the button is pressed or released.	 		               returns:
 *   eCallResult:	result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::resume(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->resume(_buttonStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::resumeAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ResumeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->resumeAsync(_buttonStatus, _callback, _info);
}
/**
 * description: This method to perform the FastForward operation. 		 		 Input :  Boolean:
 *   pressed - Whether the button is pressed or released.	 		              
 *   returns: eCallResult:	result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::fastforward(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->fastforward(_buttonStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::fastforwardAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, FastforwardAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->fastforwardAsync(_buttonStatus, _callback, _info);
}
/**
 * description: This method to perform the FastReverse operation. 		 		 Input :  Boolean:
 *   pressed - Whether the button is pressed or released.	 		              
 *   returns: eCallResult:	result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::fastreverse(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->fastreverse(_buttonStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::fastreverseAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, FastreverseAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_buttonStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->fastreverseAsync(_buttonStatus, _callback, _info);
}
/**
 * description: This method is to receive the RVC status from HMI and enable/disable the video
 *   laye based on this. 		 		 Input :  boolean: rvcStatus : True = RVC engaged,
 *   False = RVC disengaged. 		               returns: eCallResult:result
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::updateRvcState(const bool &_rvcStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    delegate_->updateRvcState(_rvcStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::updateRvcStateAsync(const bool &_rvcStatus, UpdateRvcStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->updateRvcStateAsync(_rvcStatus, _callback, _info);
}
/**
 * description: This method is to receive the RVC status from HMI and enable/disable the video
 *   laye based on this. 		 		 Input :  eVideoSurfaceDisplayStatus: surfaceStatus 
 *   		               returns:	  String: path
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::videoSurfaceControl(const mediaPresPlugin::eVideoSurfaceDisplayStatus &_surfaceStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_surfaceStatus.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->videoSurfaceControl(_surfaceStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::videoSurfaceControlAsync(const mediaPresPlugin::eVideoSurfaceDisplayStatus &_surfaceStatus, VideoSurfaceControlAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_surfaceStatus.validate()) {
        mediaPresPlugin::eCallResult result = mediaPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->videoSurfaceControlAsync(_surfaceStatus, _callback, _info);
}
/**
 * description: This method is to fetch current playing track index in browse list.  		It will
 *   be required to display the correct pointer for current playing track in case
 *   track changed during browse list display. 		 		 Input :  UInt32      
 *   sessionID 				  UInt32       QueryID	 		               returns: eCallResult
 *   result				 				UInt32       sessionQueryID 				Boolean 	 highlight 				UInt64 
 *   	 trackIndex
 */
template <typename ... _AttributeExtensions>
void mediaPresPluginProxy<_AttributeExtensions...>::getCurrentTrackIndex(const uint32_t &_sessionID, const uint32_t &_QueryID, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, uint32_t &_sessionQueryID, bool &_highlight, uint64_t &_trackIndex, const CommonAPI::CallInfo *_info) {
    delegate_->getCurrentTrackIndex(_sessionID, _QueryID, _internalCallStatus, _result, _sessionQueryID, _highlight, _trackIndex, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> mediaPresPluginProxy<_AttributeExtensions...>::getCurrentTrackIndexAsync(const uint32_t &_sessionID, const uint32_t &_QueryID, GetCurrentTrackIndexAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCurrentTrackIndexAsync(_sessionID, _QueryID, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &mediaPresPluginProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool mediaPresPluginProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool mediaPresPluginProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& mediaPresPluginProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& mediaPresPluginProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace mmpresPlugin
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::mmpresPlugin::mediaPresPluginProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::mmpresPlugin::mediaPresPluginProxy<
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::UsbDeviceErrorAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::UsbPlaybackModeAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::DeviceItemsInfoAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::BitRateAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::SamplingRateAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::BTMetaDataAvailabilityStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::VideoTestModeParametersAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::TEFilesPathAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::mmpresPlugin::mediaPresPluginExtensions::MediaErrorAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_MMPRESPLUGIN_media_Pres_Plugin_PROXY_HPP_
