/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DRIVEPRO_drivepropres_PROXY_BASE_HPP_
#define V0_COM_HARMAN_DRIVEPRO_drivepropres_PROXY_BASE_HPP_

#include <v0/com/harman/drivepro/drivepropres.hpp>


#include <v0/com/harman/drivepro/driveProTypeCollection.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace drivepro {

class drivepropresProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType> LogTypeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> ResetAllOptionEnabledAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sDpVersionInfo> S_DpVersionInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sEffciencyInfo> S_EfficiencyInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sDrivingInfo> S_DrivingInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sSafetyInfo> S_SafetyInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sUserInfo> S_UserInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sEngineRPMInfo> S_EngineRPmInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sAcOnOffDrivingTimeInfo> S_AcOnOffDrivingTimeInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sClutchAccPedalUsageInfo> S_ClutchAccPedalUsageInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sBrakingInstRating> S_BrakingInstRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<double> BrakingCumulativeRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sBreakingCountPerReqKM> S_BreakingCountPerReqKMAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sAccInstRating> S_AccInstRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sAccCumulativeRating> S_AccCumulativeRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sAccPedalPosAnalytics> S_AccPedalPosAnalyticsAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sAvgAccPedalPos> S_AvgAccPedalPosAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sAccHarshCount> S_AccHarshCountAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::eTxmnVariant> EtxmnVariantAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<double> GSInstRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sGSCumRating> S_GSCumRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sDriveKmTimeVsGearNumberRating> S_DriveKmTimeVsGearNumberRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sDriveKmTimeInIncorrectGear> S_DriveKmTimeInIncorrectGearAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sNumberGearShiftsPerRequiredkms> S_NumberGearShiftsPerRequiredkmsAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sTopSpeed> S_TopSpeedAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<double> DriveInstRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sDriveCumuRating> S_DriveCumuRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sTimeinDifferentSpeedBands> S_TimeinDifferentSpeedBandsAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sTripDistance> S_TripDistanceAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sTripDuration> S_TripDurationAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sAverageSpeed> S_AverageSpeedAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sAverageFuelEconomy> S_AverageFuelEconomyAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<double> OverallScoreInstRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sSeatBeltPerTime> S_SeatBeltPerTimeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sPerTimeWithoutSeatBelt> S_PerTimeWithoutSeatBeltAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sTimeDoorUnlocked> S_TimeDoorUnlockedAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sClutchBrakingAtHighSpeed> S_ClutchBrakingAtHighSpeedAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sSafetyWarning> S_SafetyWarningAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<double> SafetyInstRatingAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sTripResetStatus> S_TripResetStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sDistUnit> S_DistUnitAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::drivepro::driveProTypeCollection::sFuelUnit> S_FuelUnitAttribute;
    typedef CommonAPI::Event<
        ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eRequestType
    > RequestStatusSignalEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::drivepro::driveProTypeCollection::signalListValueMap
    > BlueScreenDataUpdateEvent;
    typedef CommonAPI::Event<
        bool
    > RpmEnableStatusUpdateEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::drivepro::driveProTypeCollection::sTripResetStatus
    > TripResetStatusEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&)> PerformDPFactoryResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType&)> ResetTripAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&)> UpdateConfigFileAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&)> UpdateDpDynamicLibAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType&)> SetTripLoggingAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType&)> GetTripLoggingAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&)> ExtractDPLogsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const uint32_t&)> SetDpLogLevelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const uint32_t&)> GetDpLogLevelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType&)> SetDpLoggingTypeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType&)> GetDpLoggingTypeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray&)> SubscribeSignalsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray&)> UnSubscribeSignalsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&)> GetSignaListValueAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const double&)> GetScalingFactorAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&, const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus&)> GetMaxRatingAsyncCallback;

    /**
     * description: Attribute that specifies the logging type(Internal/USB Logging)
     */
    virtual LogTypeAttribute& getLogTypeAttribute() = 0;
    /**
     * description: Attribute to enable/disable the resetAll option on HMI
     */
    virtual ResetAllOptionEnabledAttribute& getResetAllOptionEnabledAttribute() = 0;
    virtual S_DpVersionInfoAttribute& getS_DpVersionInfoAttribute() = 0;
    /**
     * description: Attribuite for providing the efficiency information to HMI
     */
    virtual S_EfficiencyInfoAttribute& getS_EfficiencyInfoAttribute() = 0;
    /**
     * description: Attribuite for providing the Driving information to HMI
     */
    virtual S_DrivingInfoAttribute& getS_DrivingInfoAttribute() = 0;
    /**
     * description: Attribuite for providing the safety information to HMI
     */
    virtual S_SafetyInfoAttribute& getS_SafetyInfoAttribute() = 0;
    /**
     * description: Attribuite for providing user profile information to HMI
     */
    virtual S_UserInfoAttribute& getS_UserInfoAttribute() = 0;
    /**
     * description: Attribuite for providing the EngineRPM information to HMI
     */
    virtual S_EngineRPmInfoAttribute& getS_EngineRPmInfoAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_AcOnOffDrivingTimeInfoAttribute& getS_AcOnOffDrivingTimeInfoAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_ClutchAccPedalUsageInfoAttribute& getS_ClutchAccPedalUsageInfoAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_BrakingInstRatingAttribute& getS_BrakingInstRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual BrakingCumulativeRatingAttribute& getBrakingCumulativeRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_BreakingCountPerReqKMAttribute& getS_BreakingCountPerReqKMAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_AccInstRatingAttribute& getS_AccInstRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_AccCumulativeRatingAttribute& getS_AccCumulativeRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_AccPedalPosAnalyticsAttribute& getS_AccPedalPosAnalyticsAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_AvgAccPedalPosAttribute& getS_AvgAccPedalPosAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_AccHarshCountAttribute& getS_AccHarshCountAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual EtxmnVariantAttribute& getEtxmnVariantAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual GSInstRatingAttribute& getGSInstRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_GSCumRatingAttribute& getS_GSCumRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_DriveKmTimeVsGearNumberRatingAttribute& getS_DriveKmTimeVsGearNumberRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_DriveKmTimeInIncorrectGearAttribute& getS_DriveKmTimeInIncorrectGearAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_NumberGearShiftsPerRequiredkmsAttribute& getS_NumberGearShiftsPerRequiredkmsAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_TopSpeedAttribute& getS_TopSpeedAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual DriveInstRatingAttribute& getDriveInstRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_DriveCumuRatingAttribute& getS_DriveCumuRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_TimeinDifferentSpeedBandsAttribute& getS_TimeinDifferentSpeedBandsAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_TripDistanceAttribute& getS_TripDistanceAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_TripDurationAttribute& getS_TripDurationAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_AverageSpeedAttribute& getS_AverageSpeedAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_AverageFuelEconomyAttribute& getS_AverageFuelEconomyAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual OverallScoreInstRatingAttribute& getOverallScoreInstRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_SeatBeltPerTimeAttribute& getS_SeatBeltPerTimeAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_PerTimeWithoutSeatBeltAttribute& getS_PerTimeWithoutSeatBeltAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_TimeDoorUnlockedAttribute& getS_TimeDoorUnlockedAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_ClutchBrakingAtHighSpeedAttribute& getS_ClutchBrakingAtHighSpeedAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_SafetyWarningAttribute& getS_SafetyWarningAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual SafetyInstRatingAttribute& getSafetyInstRatingAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_TripResetStatusAttribute& getS_TripResetStatusAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_DistUnitAttribute& getS_DistUnitAttribute() = 0;
    /**
     * description: Attribuite for providing information to HMI
     */
    virtual S_FuelUnitAttribute& getS_FuelUnitAttribute() = 0;

    virtual RequestStatusSignalEvent& getRequestStatusSignalEvent() = 0;
    virtual BlueScreenDataUpdateEvent& getBlueScreenDataUpdateEvent() = 0;
    virtual RpmEnableStatusUpdateEvent& getRpmEnableStatusUpdateEvent() = 0;
    /**
     * description: Signal for sending trip type and reset status information to HMI
     */
    virtual TripResetStatusEvent& getTripResetStatusEvent() = 0;

    /**
     * description: Method for Engineering Menu service to perform  	factory reset operation of
     *   drive pro data
     */
    virtual void performDPFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> performDPFactoryResetAsync(PerformDPFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to reset trip specific  data
     */
    virtual void resetTrip(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripTyp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resetTripAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, ResetTripAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to update the configuration file from the USB
     */
    virtual void updateConfigFile(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> updateConfigFileAsync(UpdateConfigFileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to update the configuration file from the USB
     */
    virtual void updateDpDynamicLib(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> updateDpDynamicLibAsync(UpdateDpDynamicLibAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to record trip specific logging
     */
    virtual void setTripLogging(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripTyp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setTripLoggingAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, SetTripLoggingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to read Drive Pro Log level
     */
    virtual void getTripLogging(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eTripType &_tripType, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getTripLoggingAsync(GetTripLoggingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to extract the Drive Pro Logs
     */
    virtual void extractDPLogs(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> extractDPLogsAsync(ExtractDPLogsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to set Drive Pro Log level
     */
    virtual void setDpLogLevel(const uint32_t &_logLevel, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, uint32_t &_logLvl, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setDpLogLevelAsync(const uint32_t &_logLevel, SetDpLogLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to read Drive Pro Log level
     */
    virtual void getDpLogLevel(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, uint32_t &_logLevel, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDpLogLevelAsync(GetDpLogLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to set Drive Pro Logging Type
     */
    virtual void setDpLoggingType(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingTyp, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setDpLoggingTypeAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, SetDpLoggingTypeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to get Drive Pro Logging Type
     */
    virtual void getDpLoggingType(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType &_loggingType, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDpLoggingTypeAsync(GetDpLoggingTypeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to subscribe signals for HMI Blue Screen
     */
    virtual void subscribeSignals(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_sigList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> subscribeSignalsAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, SubscribeSignalsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to unsubscribe signals for HMI Blue Screen
     */
    virtual void unSubscribeSignals(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_sigList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> unSubscribeSignalsAsync(const ::v0::com::harman::drivepro::driveProTypeCollection::signalArray &_signalList, UnSubscribeSignalsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getSignaListValue(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSignaListValueAsync(GetSignaListValueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getScalingFactor(CommonAPI::CallStatus &_internalCallStatus, double &_scalingFactor, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getScalingFactorAsync(GetScalingFactorAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Method to get the Max Rating
     */
    virtual void getMaxRating(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_maxRating, ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus &_retStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getMaxRatingAsync(GetMaxRatingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace drivepro
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DRIVEPRO_drivepropres_PROXY_BASE_HPP_
