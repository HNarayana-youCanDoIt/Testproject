/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_PARKASSIST_PDC_Service_PROXY_HPP_
#define V0_COM_HARMAN_PARKASSIST_PDC_Service_PROXY_HPP_

#include <v0/com/harman/ParkAssist/PDCServiceProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

template <typename ... _AttributeExtensions>
class PDCServiceProxy
    : virtual public PDCService, 
      virtual public PDCServiceProxyBase,
      virtual public _AttributeExtensions... {
public:
    PDCServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~PDCServiceProxy();

    typedef PDCService InterfaceType;


    /**
     * description: this attribute define for only rvcfault information
     */
    /**
     * Returns the wrapper class that provides access to the attribute rvcFault.
     */
    virtual RvcFaultAttribute& getRvcFaultAttribute() {
        return delegate_->getRvcFaultAttribute();
    }
    /**
     * description: attributes define for pdc and rvc fault information
     */
    /**
     * Returns the wrapper class that provides access to the attribute pdc_rvcFault.
     */
    virtual Pdc_rvcFaultAttribute& getPdc_rvcFaultAttribute() {
        return delegate_->getPdc_rvcFaultAttribute();
    }
    /**
     * description: attribute define for type of overlay
     */
    /**
     * Returns the wrapper class that provides access to the attribute rvcOverlayType.
     */
    virtual RvcOverlayTypeAttribute& getRvcOverlayTypeAttribute() {
        return delegate_->getRvcOverlayTypeAttribute();
    }
    /**
     * description: define to update hmi notification
     */
    /**
     * Returns the wrapper class that provides access to the attribute hmiNotification.
     */
    virtual HmiNotificationAttribute& getHmiNotificationAttribute() {
        return delegate_->getHmiNotificationAttribute();
    }
    /**
     * description: define to show reverse gear status for AME Command
     */
    /**
     * Returns the wrapper class that provides access to the attribute RvcBackCamera.
     */
    virtual RvcBackCameraAttribute& getRvcBackCameraAttribute() {
        return delegate_->getRvcBackCameraAttribute();
    }
    /**
     * description: define to update reverse gear status
     */
    /**
     * Returns the wrapper class that provides access to the attribute reverseGearStatus.
     */
    virtual ReverseGearStatusAttribute& getReverseGearStatusAttribute() {
        return delegate_->getReverseGearStatusAttribute();
    }
    /**
     * description: define to pdc presence is available or not
     */
    /**
     * Returns the wrapper class that provides access to the attribute pdcPresence_en.
     */
    virtual PdcPresence_enAttribute& getPdcPresence_enAttribute() {
        return delegate_->getPdcPresence_enAttribute();
    }
    /**
     * description: define to update audio zone state
     */
    /**
     * Returns the wrapper class that provides access to the attribute AudioZoneState.
     */
    virtual AudioZoneStateAttribute& getAudioZoneStateAttribute() {
        return delegate_->getAudioZoneStateAttribute();
    }
    /**
     * description: provide a tailgate status
     */
    /**
     * Returns the wrapper class that provides access to the attribute tailgateStateStatus_enum.
     */
    virtual TailgateStateStatus_enumAttribute& getTailgateStateStatus_enumAttribute() {
        return delegate_->getTailgateStateStatus_enumAttribute();
    }
    /**
     * description: define to update reverse gear status
     */
    /**
     * Returns the wrapper class that provides access to the attribute revGearStatus_enum.
     */
    virtual RevGearStatus_enumAttribute& getRevGearStatus_enumAttribute() {
        return delegate_->getRevGearStatus_enumAttribute();
    }
    /**
     * description: define to update rear sensor state
     */
    /**
     * Returns the wrapper class that provides access to the attribute PDcHuProxRearSensState.
     */
    virtual PDcHuProxRearSensStateAttribute& getPDcHuProxRearSensStateAttribute() {
        return delegate_->getPDcHuProxRearSensStateAttribute();
    }
    /**
     * description: update parkbrake state
     */
    /**
     * Returns the wrapper class that provides access to the attribute parkBrkState_enum.
     */
    virtual ParkBrkState_enumAttribute& getParkBrkState_enumAttribute() {
        return delegate_->getParkBrkState_enumAttribute();
    }
    /**
     * description: define to update only pdc fault information
     */
    /**
     * Returns the wrapper class that provides access to the attribute pDcHuFaultState_enum.
     */
    virtual PDcHuFaultState_enumAttribute& getPDcHuFaultState_enumAttribute() {
        return delegate_->getPDcHuFaultState_enumAttribute();
    }
    /**
     * description: define to update pdc audio zone state
     */
    /**
     * Returns the wrapper class that provides access to the attribute pDcHuAudioZoneState_enum.
     */
    virtual PDcHuAudioZoneState_enumAttribute& getPDcHuAudioZoneState_enumAttribute() {
        return delegate_->getPDcHuAudioZoneState_enumAttribute();
    }
    /**
     * description: define to update only pdc visual zone state
     */
    /**
     * Returns the wrapper class that provides access to the attribute pDcHuVisualZoneRearSensState.
     */
    virtual PDcHuVisualZoneRearSensStateAttribute& getPDcHuVisualZoneRearSensStateAttribute() {
        return delegate_->getPDcHuVisualZoneRearSensStateAttribute();
    }
    /**
     * description: define to update only pdc variant
     */
    /**
     * Returns the wrapper class that provides access to the attribute pDcVariant_enum.
     */
    virtual PDcVariant_enumAttribute& getPDcVariant_enumAttribute() {
        return delegate_->getPDcVariant_enumAttribute();
    }
    /**
     * description: define to update pdc rear tone
     */
    /**
     * Returns the wrapper class that provides access to the attribute pDcHuRearTone_enum.
     */
    virtual PDcHuRearTone_enumAttribute& getPDcHuRearTone_enumAttribute() {
        return delegate_->getPDcHuRearTone_enumAttribute();
    }
    /**
     * description: define to update number of sensor
     */
    /**
     * Returns the wrapper class that provides access to the attribute pDcHuRearNoOfSen_enum.
     */
    virtual PDcHuRearNoOfSen_enumAttribute& getPDcHuRearNoOfSen_enumAttribute() {
        return delegate_->getPDcHuRearNoOfSen_enumAttribute();
    }
    /**
     * description: define to update steering wheel angle
     */
    /**
     * Returns the wrapper class that provides access to the attribute SAsAngEPAS.
     */
    virtual SAsAngEPASAttribute& getSAsAngEPASAttribute() {
        return delegate_->getSAsAngEPASAttribute();
    }
    /**
     * description: define to update steering wheel direction
     */
    /**
     * Returns the wrapper class that provides access to the attribute sAsAngEPAsDir_enum.
     */
    virtual SAsAngEPAsDir_enumAttribute& getSAsAngEPAsDir_enumAttribute() {
        return delegate_->getSAsAngEPAsDir_enumAttribute();
    }
    /**
     * description: define to update tone type
     */
    /**
     * Returns the wrapper class that provides access to the attribute pDcRearToneReq_enum.
     */
    virtual PDcRearToneReq_enumAttribute& getPDcRearToneReq_enumAttribute() {
        return delegate_->getPDcRearToneReq_enumAttribute();
    }
    /**
     * description: Define to update type of pdc request
     */
    /**
     * Returns the wrapper class that provides access to the attribute huPDcReqType_enum.
     */
    virtual HuPDcReqType_enumAttribute& getHuPDcReqType_enumAttribute() {
        return delegate_->getHuPDcReqType_enumAttribute();
    }
    /**
     * description: define to update Pdc delay timer
     */
    /**
     * Returns the wrapper class that provides access to the attribute PDcOnDelayTimer.
     */
    virtual PDcOnDelayTimerAttribute& getPDcOnDelayTimerAttribute() {
        return delegate_->getPDcOnDelayTimerAttribute();
    }
    /**
     * description: define to update pdc tone volume
     */
    /**
     * Returns the wrapper class that provides access to the attribute PDcToneVolume.
     */
    virtual PDcToneVolumeAttribute& getPDcToneVolumeAttribute() {
        return delegate_->getPDcToneVolumeAttribute();
    }
    /**
     * description: define to rvc brightness
     */
    /**
     * Returns the wrapper class that provides access to the attribute RvcBrightness.
     */
    virtual RvcBrightnessAttribute& getRvcBrightnessAttribute() {
        return delegate_->getRvcBrightnessAttribute();
    }
    /**
     * description: define to update rvc contrast
     */
    /**
     * Returns the wrapper class that provides access to the attribute RvcContrast.
     */
    virtual RvcContrastAttribute& getRvcContrastAttribute() {
        return delegate_->getRvcContrastAttribute();
    }
    /**
     * description: define to update color staturation
     */
    /**
     * Returns the wrapper class that provides access to the attribute RvcColorSaturation.
     */
    virtual RvcColorSaturationAttribute& getRvcColorSaturationAttribute() {
        return delegate_->getRvcColorSaturationAttribute();
    }
    /**
     * description: define to update gama value
     */
    /**
     * Returns the wrapper class that provides access to the attribute RvcGama.
     */
    virtual RvcGamaAttribute& getRvcGamaAttribute() {
        return delegate_->getRvcGamaAttribute();
    }
    /**
     * description: define to update pdc setting Error
     */
    /**
     * Returns the wrapper class that provides access to the attribute pdcsettingUpdate.
     */
    virtual PdcsettingUpdateAttribute& getPdcsettingUpdateAttribute() {
        return delegate_->getPdcsettingUpdateAttribute();
    }
    /**
     * description: define to update parkassist variant
     */
    /**
     * Returns the wrapper class that provides access to the attribute parkAssistVariant_enum.
     */
    virtual ParkAssistVariant_enumAttribute& getParkAssistVariant_enumAttribute() {
        return delegate_->getParkAssistVariant_enumAttribute();
    }


    /**
     * description: This method is used to reset pdc setting
     * Calls ParkFactoryReset with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ParkFactoryReset(const uint16_t &_type, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ParkFactoryReset with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ParkFactoryResetAsync(const uint16_t &_type, ParkFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<PDCServiceProxyBase> delegate_;
};

typedef PDCServiceProxy<> PDCServiceProxyDefault;

namespace PDCServiceExtensions {
    /**
     * description: this attribute define for only rvcfault information
     */
    template <template <typename > class _ExtensionType>
    class RvcFaultAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::RvcFaultAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::RvcFaultAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RvcFaultAttributeExtension() {}
    #endif
    
        RvcFaultAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getRvcFaultAttribute()) {
        }
    
        inline extension_type& getRvcFaultAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: attributes define for pdc and rvc fault information
     */
    template <template <typename > class _ExtensionType>
    class Pdc_rvcFaultAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::Pdc_rvcFaultAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::Pdc_rvcFaultAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        Pdc_rvcFaultAttributeExtension() {}
    #endif
    
        Pdc_rvcFaultAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPdc_rvcFaultAttribute()) {
        }
    
        inline extension_type& getPdc_rvcFaultAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: attribute define for type of overlay
     */
    template <template <typename > class _ExtensionType>
    class RvcOverlayTypeAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::RvcOverlayTypeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::RvcOverlayTypeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RvcOverlayTypeAttributeExtension() {}
    #endif
    
        RvcOverlayTypeAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getRvcOverlayTypeAttribute()) {
        }
    
        inline extension_type& getRvcOverlayTypeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update hmi notification
     */
    template <template <typename > class _ExtensionType>
    class HmiNotificationAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::HmiNotificationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::HmiNotificationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HmiNotificationAttributeExtension() {}
    #endif
    
        HmiNotificationAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getHmiNotificationAttribute()) {
        }
    
        inline extension_type& getHmiNotificationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to show reverse gear status for AME Command
     */
    template <template <typename > class _ExtensionType>
    class RvcBackCameraAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::RvcBackCameraAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::RvcBackCameraAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RvcBackCameraAttributeExtension() {}
    #endif
    
        RvcBackCameraAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getRvcBackCameraAttribute()) {
        }
    
        inline extension_type& getRvcBackCameraAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update reverse gear status
     */
    template <template <typename > class _ExtensionType>
    class ReverseGearStatusAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::ReverseGearStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::ReverseGearStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ReverseGearStatusAttributeExtension() {}
    #endif
    
        ReverseGearStatusAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getReverseGearStatusAttribute()) {
        }
    
        inline extension_type& getReverseGearStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to pdc presence is available or not
     */
    template <template <typename > class _ExtensionType>
    class PdcPresence_enAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PdcPresence_enAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PdcPresence_enAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PdcPresence_enAttributeExtension() {}
    #endif
    
        PdcPresence_enAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPdcPresence_enAttribute()) {
        }
    
        inline extension_type& getPdcPresence_enAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update audio zone state
     */
    template <template <typename > class _ExtensionType>
    class AudioZoneStateAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::AudioZoneStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::AudioZoneStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        AudioZoneStateAttributeExtension() {}
    #endif
    
        AudioZoneStateAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getAudioZoneStateAttribute()) {
        }
    
        inline extension_type& getAudioZoneStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: provide a tailgate status
     */
    template <template <typename > class _ExtensionType>
    class TailgateStateStatus_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::TailgateStateStatus_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::TailgateStateStatus_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TailgateStateStatus_enumAttributeExtension() {}
    #endif
    
        TailgateStateStatus_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getTailgateStateStatus_enumAttribute()) {
        }
    
        inline extension_type& getTailgateStateStatus_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update reverse gear status
     */
    template <template <typename > class _ExtensionType>
    class RevGearStatus_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::RevGearStatus_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::RevGearStatus_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RevGearStatus_enumAttributeExtension() {}
    #endif
    
        RevGearStatus_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getRevGearStatus_enumAttribute()) {
        }
    
        inline extension_type& getRevGearStatus_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update rear sensor state
     */
    template <template <typename > class _ExtensionType>
    class PDcHuProxRearSensStateAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcHuProxRearSensStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcHuProxRearSensStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcHuProxRearSensStateAttributeExtension() {}
    #endif
    
        PDcHuProxRearSensStateAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcHuProxRearSensStateAttribute()) {
        }
    
        inline extension_type& getPDcHuProxRearSensStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: update parkbrake state
     */
    template <template <typename > class _ExtensionType>
    class ParkBrkState_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::ParkBrkState_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::ParkBrkState_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ParkBrkState_enumAttributeExtension() {}
    #endif
    
        ParkBrkState_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getParkBrkState_enumAttribute()) {
        }
    
        inline extension_type& getParkBrkState_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update only pdc fault information
     */
    template <template <typename > class _ExtensionType>
    class PDcHuFaultState_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcHuFaultState_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcHuFaultState_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcHuFaultState_enumAttributeExtension() {}
    #endif
    
        PDcHuFaultState_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcHuFaultState_enumAttribute()) {
        }
    
        inline extension_type& getPDcHuFaultState_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update pdc audio zone state
     */
    template <template <typename > class _ExtensionType>
    class PDcHuAudioZoneState_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcHuAudioZoneState_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcHuAudioZoneState_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcHuAudioZoneState_enumAttributeExtension() {}
    #endif
    
        PDcHuAudioZoneState_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcHuAudioZoneState_enumAttribute()) {
        }
    
        inline extension_type& getPDcHuAudioZoneState_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update only pdc visual zone state
     */
    template <template <typename > class _ExtensionType>
    class PDcHuVisualZoneRearSensStateAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcHuVisualZoneRearSensStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcHuVisualZoneRearSensStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcHuVisualZoneRearSensStateAttributeExtension() {}
    #endif
    
        PDcHuVisualZoneRearSensStateAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcHuVisualZoneRearSensStateAttribute()) {
        }
    
        inline extension_type& getPDcHuVisualZoneRearSensStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update only pdc variant
     */
    template <template <typename > class _ExtensionType>
    class PDcVariant_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcVariant_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcVariant_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcVariant_enumAttributeExtension() {}
    #endif
    
        PDcVariant_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcVariant_enumAttribute()) {
        }
    
        inline extension_type& getPDcVariant_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update pdc rear tone
     */
    template <template <typename > class _ExtensionType>
    class PDcHuRearTone_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcHuRearTone_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcHuRearTone_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcHuRearTone_enumAttributeExtension() {}
    #endif
    
        PDcHuRearTone_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcHuRearTone_enumAttribute()) {
        }
    
        inline extension_type& getPDcHuRearTone_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update number of sensor
     */
    template <template <typename > class _ExtensionType>
    class PDcHuRearNoOfSen_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcHuRearNoOfSen_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcHuRearNoOfSen_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcHuRearNoOfSen_enumAttributeExtension() {}
    #endif
    
        PDcHuRearNoOfSen_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcHuRearNoOfSen_enumAttribute()) {
        }
    
        inline extension_type& getPDcHuRearNoOfSen_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update steering wheel angle
     */
    template <template <typename > class _ExtensionType>
    class SAsAngEPASAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::SAsAngEPASAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::SAsAngEPASAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SAsAngEPASAttributeExtension() {}
    #endif
    
        SAsAngEPASAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getSAsAngEPASAttribute()) {
        }
    
        inline extension_type& getSAsAngEPASAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update steering wheel direction
     */
    template <template <typename > class _ExtensionType>
    class SAsAngEPAsDir_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::SAsAngEPAsDir_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::SAsAngEPAsDir_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SAsAngEPAsDir_enumAttributeExtension() {}
    #endif
    
        SAsAngEPAsDir_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getSAsAngEPAsDir_enumAttribute()) {
        }
    
        inline extension_type& getSAsAngEPAsDir_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update tone type
     */
    template <template <typename > class _ExtensionType>
    class PDcRearToneReq_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcRearToneReq_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcRearToneReq_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcRearToneReq_enumAttributeExtension() {}
    #endif
    
        PDcRearToneReq_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcRearToneReq_enumAttribute()) {
        }
    
        inline extension_type& getPDcRearToneReq_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Define to update type of pdc request
     */
    template <template <typename > class _ExtensionType>
    class HuPDcReqType_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::HuPDcReqType_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::HuPDcReqType_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HuPDcReqType_enumAttributeExtension() {}
    #endif
    
        HuPDcReqType_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getHuPDcReqType_enumAttribute()) {
        }
    
        inline extension_type& getHuPDcReqType_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update Pdc delay timer
     */
    template <template <typename > class _ExtensionType>
    class PDcOnDelayTimerAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcOnDelayTimerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcOnDelayTimerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcOnDelayTimerAttributeExtension() {}
    #endif
    
        PDcOnDelayTimerAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcOnDelayTimerAttribute()) {
        }
    
        inline extension_type& getPDcOnDelayTimerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update pdc tone volume
     */
    template <template <typename > class _ExtensionType>
    class PDcToneVolumeAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PDcToneVolumeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PDcToneVolumeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PDcToneVolumeAttributeExtension() {}
    #endif
    
        PDcToneVolumeAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPDcToneVolumeAttribute()) {
        }
    
        inline extension_type& getPDcToneVolumeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to rvc brightness
     */
    template <template <typename > class _ExtensionType>
    class RvcBrightnessAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::RvcBrightnessAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::RvcBrightnessAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RvcBrightnessAttributeExtension() {}
    #endif
    
        RvcBrightnessAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getRvcBrightnessAttribute()) {
        }
    
        inline extension_type& getRvcBrightnessAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update rvc contrast
     */
    template <template <typename > class _ExtensionType>
    class RvcContrastAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::RvcContrastAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::RvcContrastAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RvcContrastAttributeExtension() {}
    #endif
    
        RvcContrastAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getRvcContrastAttribute()) {
        }
    
        inline extension_type& getRvcContrastAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update color staturation
     */
    template <template <typename > class _ExtensionType>
    class RvcColorSaturationAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::RvcColorSaturationAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::RvcColorSaturationAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RvcColorSaturationAttributeExtension() {}
    #endif
    
        RvcColorSaturationAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getRvcColorSaturationAttribute()) {
        }
    
        inline extension_type& getRvcColorSaturationAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update gama value
     */
    template <template <typename > class _ExtensionType>
    class RvcGamaAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::RvcGamaAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::RvcGamaAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        RvcGamaAttributeExtension() {}
    #endif
    
        RvcGamaAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getRvcGamaAttribute()) {
        }
    
        inline extension_type& getRvcGamaAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update pdc setting Error
     */
    template <template <typename > class _ExtensionType>
    class PdcsettingUpdateAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::PdcsettingUpdateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::PdcsettingUpdateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PdcsettingUpdateAttributeExtension() {}
    #endif
    
        PdcsettingUpdateAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getPdcsettingUpdateAttribute()) {
        }
    
        inline extension_type& getPdcsettingUpdateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: define to update parkassist variant
     */
    template <template <typename > class _ExtensionType>
    class ParkAssistVariant_enumAttributeExtension {
     public:
        typedef _ExtensionType<PDCServiceProxyBase::ParkAssistVariant_enumAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<PDCServiceProxyBase::ParkAssistVariant_enumAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ParkAssistVariant_enumAttributeExtension() {}
    #endif
    
        ParkAssistVariant_enumAttributeExtension(PDCServiceProxyBase& proxy): attributeExtension_(proxy.getParkAssistVariant_enumAttribute()) {
        }
    
        inline extension_type& getParkAssistVariant_enumAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace PDCServiceExtensions

//
// PDCServiceProxy Implementation
//
template <typename ... _AttributeExtensions>
PDCServiceProxy<_AttributeExtensions...>::PDCServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<PDCServiceProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<PDCServiceProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
PDCServiceProxy<_AttributeExtensions...>::~PDCServiceProxy() {
}

/**
 * description: This method is used to reset pdc setting
 */
template <typename ... _AttributeExtensions>
void PDCServiceProxy<_AttributeExtensions...>::ParkFactoryReset(const uint16_t &_type, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->ParkFactoryReset(_type, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> PDCServiceProxy<_AttributeExtensions...>::ParkFactoryResetAsync(const uint16_t &_type, ParkFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ParkFactoryResetAsync(_type, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &PDCServiceProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool PDCServiceProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool PDCServiceProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& PDCServiceProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& PDCServiceProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::ParkAssist::PDCServiceProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::ParkAssist::PDCServiceProxy<
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::RvcFaultAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::Pdc_rvcFaultAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::RvcOverlayTypeAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::HmiNotificationAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::RvcBackCameraAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::ReverseGearStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PdcPresence_enAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::AudioZoneStateAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::TailgateStateStatus_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::RevGearStatus_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcHuProxRearSensStateAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::ParkBrkState_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcHuFaultState_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcHuAudioZoneState_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcHuVisualZoneRearSensStateAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcVariant_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcHuRearTone_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcHuRearNoOfSen_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::SAsAngEPASAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::SAsAngEPAsDir_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcRearToneReq_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::HuPDcReqType_enumAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcOnDelayTimerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PDcToneVolumeAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::RvcBrightnessAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::RvcContrastAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::RvcColorSaturationAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::RvcGamaAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::PdcsettingUpdateAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::ParkAssist::PDCServiceExtensions::ParkAssistVariant_enumAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_PARKASSIST_PDC_Service_PROXY_HPP_
