/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_AUDIOPRES_PLUGIN_Tata_Audio_Pres_Plugin_PROXY_BASE_HPP_
#define V0_COM_HARMAN_AUDIOPRES_PLUGIN_Tata_Audio_Pres_Plugin_PROXY_BASE_HPP_

#include <v0/com/harman/audiopres/plugin/TataAudioPresPlugin.hpp>


#include <v0/com/harman/audiopres/plugin/audioPresPluginTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace audiopres {
namespace plugin {

class TataAudioPresPluginProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<uint16_t> StartupVolumeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> SdvcStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAuxInGains> AuxInGainAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> PdcMixModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eVoiceAlertState> VoiceAlertStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> AuxConnectionStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> UsbConnectionStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> IpodConnectionStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint16_t> NotificationVolumeAttribute;
    typedef CommonAPI::Event<
        uint16_t, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::ConnectionState_e
    > SourceStateEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> SetStartupVolumeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> SetSDVCStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> SetAuxInGainAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> SetPdcMixModeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> PlayBeepAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> ActivateSourceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> DeactivateSourceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> PlayVoiceAlertAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> CancelVoiceAlertAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> SetAudioOffAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> AudioFactoryResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> ToggleEntertainmentSourceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> PlayFromSourceGroupAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::ConnectionState_e&)> GetSourceStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::apres_SourceConnectionState_L&)> GetSourceStateListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> SwitchToPreviousEntSourceAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> DeviceConnectionStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors&)> SetNotificationVolumeAsyncCallback;

    /**
     * description: Attribute holding startUp volume 		This will be changed by HMI by calling
     *   setStarUpVolume API with user selected startup volume.
     */
    virtual StartupVolumeAttribute& getStartupVolumeAttribute() = 0;
    /**
     * description: Attribute holding SDVC state. 		This will be changed by HMI by calling
     *   setSDVCState API for setting SDVC functionality. It can be set to ON or OFF
     */
    virtual SdvcStateAttribute& getSdvcStateAttribute() = 0;
    /**
     * description: Attribute holding Aux In Gain settings 		This will be changed by HMI by calling
     *   setAuxInGain API for setting Aux In gain settings.
     */
    virtual AuxInGainAttribute& getAuxInGainAttribute() = 0;
    /**
     * description: Attribute holding PDC Mix Mode 		This will be changed by HMI by calling
     *   setPdcMixMode API for enabling - disabling PDC Mix Mode
     */
    virtual PdcMixModeAttribute& getPdcMixModeAttribute() = 0;
    /**
     * description: Attribute holding PDC Mix Mode 		This will be changed by HMI by calling
     *   setPdcMixMode API for enabling - disabling PDC Mix Mode
     */
    virtual VoiceAlertStatusAttribute& getVoiceAlertStatusAttribute() = 0;
    /**
     * description: Attribute holding Aux connection state
     */
    virtual AuxConnectionStateAttribute& getAuxConnectionStateAttribute() = 0;
    /**
     * description: Attribute holding USB connection State
     */
    virtual UsbConnectionStateAttribute& getUsbConnectionStateAttribute() = 0;
    /**
     * description: Attribute holding Ipod connection state
     */
    virtual IpodConnectionStateAttribute& getIpodConnectionStateAttribute() = 0;
    /**
     * description: Attribute holding notification volume level
     */
    virtual NotificationVolumeAttribute& getNotificationVolumeAttribute() = 0;

    /**
     * description: Notification of source state 	Ex : Source X : State : Connecting / Connected /
     *   Disconnecting / Disconnected / Suspended 	This will be helpful in cases where
     *   where HMI wanted to know status of source
     */
    virtual SourceStateEvent& getSourceStateEvent() = 0;

    /**
     * description: This method is used to set audio entertainment sources
     */
    virtual void SetStartupVolume(const uint16_t &_volume, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetStartupVolumeAsync(const uint16_t &_volume, SetStartupVolumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to set SDVC state ON-OFF
     */
    virtual void SetSDVCState(const bool &_sdvcState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetSDVCStateAsync(const bool &_sdvcState, SetSDVCStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to set Aux In gain values
     */
    virtual void SetAuxInGain(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAuxInGains &_auxInGain, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetAuxInGainAsync(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAuxInGains &_auxInGain, SetAuxInGainAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to set PDC Mix mode status
     */
    virtual void SetPdcMixMode(const bool &_mixMode, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetPdcMixModeAsync(const bool &_mixMode, SetPdcMixModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to play eBeepTypes beep
     */
    virtual void PlayBeep(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eBeepTypes &_beepType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> PlayBeepAsync(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eBeepTypes &_beepType, PlayBeepAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to Activate Audio Source
     */
    virtual void activateSource(const uint16_t &_sourceId, const uint16_t &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> activateSourceAsync(const uint16_t &_sourceId, const uint16_t &_type, ActivateSourceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to deactivate Audio Source
     */
    virtual void deactivateSource(const uint16_t &_sourceId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deactivateSourceAsync(const uint16_t &_sourceId, DeactivateSourceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to play Voice Alert
     */
    virtual void playVoiceAlert(const uint16_t &_sourceId, const uint16_t &_id, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playVoiceAlertAsync(const uint16_t &_sourceId, const uint16_t &_id, PlayVoiceAlertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to cancel Voice Alert
     */
    virtual void cancelVoiceAlert(const uint16_t &_sourceId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> cancelVoiceAlertAsync(const uint16_t &_sourceId, CancelVoiceAlertAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to make Sink audio ON-OFF
     */
    virtual void SetAudioOff(const bool &_audioState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetAudioOffAsync(const bool &_audioState, SetAudioOffAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to reset Audio Settings
     */
    virtual void AudioFactoryReset(const uint16_t &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> AudioFactoryResetAsync(const uint16_t &_type, AudioFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to toggle entertianment source in the order specified in
     *   "toggleNextPreviousStrategy" in audiopes.cfg 	If no cfg item
     *   toggleNextPreviousStrategy with value is defined , method return an error
     *   	toggleNextPreviousStrategy should be used to capture the toggle sequence of
     *   entertainment sources in a project 	(at)attribute update activeAudioSource and
     *   activeEntSrc if a source switch has happened	 	(at)return eAudioPresErrors
     */
    virtual void ToggleEntertainmentSource(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eToggleEntSrcDirection &_direction, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ToggleEntertainmentSourceAsync(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eToggleEntSrcDirection &_direction, ToggleEntertainmentSourceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to toggle mute status of currently playing sources as per
     *   TML mute strategy 	(at)attribute update ActiveSrcMute
     */
    virtual void PlayFromSourceGroup(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eSourceGroup &_srcGroupId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> PlayFromSourceGroupAsync(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eSourceGroup &_srcGroupId, PlayFromSourceGroupAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to toggle mute status of currently playing sources as per
     *   TML mute strategy 	(at)attribute update ActiveSrcMute
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void ToggleSystemMute(CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to toggle mute status of currently playing sources as per
     *   TML mute strategy 	(at)attribute update ActiveSrcMute
     */
    /**
     * @invariant Fire And Forget
     */
    virtual void ToggleMute(const bool &_userInitiated, CommonAPI::CallStatus &_internalCallStatus) = 0;
    /**
     * description: This method is used to get source state from Audiomanager 	This will be helpful
     *   in cases where where HMI wanted to know status of source
     */
    virtual void GetSourceState(const uint16_t &_sourceId, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::ConnectionState_e &_srcState, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetSourceStateAsync(const uint16_t &_sourceId, GetSourceStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to get source state from Audiomanager 	This will be helpful
     *   in cases where where HMI wanted to know status of source
     */
    virtual void GetSourceStateList(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::apres_SourceConnectionState_L &_srcStateList, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetSourceStateListAsync(GetSourceStateListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to switch to previous entertainment source from playback
     *   list 	(at)attribute update activeAudioSource and activeEntSrc if a source
     *   switch has happened	 	(at)return eAudioPresErrors
     */
    virtual void SwitchToPreviousEntSource(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SwitchToPreviousEntSourceAsync(SwitchToPreviousEntSourceAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to register device connection State 		This is mainly used
     *   for USB and IPOD device. Can be extended in futher for other devices
     *   	(at)return eAudioPresErrors
     */
    virtual void deviceConnectionState(const uint16_t &_sourceId, const std::string &_connectionState, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deviceConnectionStateAsync(const uint16_t &_sourceId, const std::string &_connectionState, DeviceConnectionStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is used to set notification volume
     */
    virtual void SetNotificationVolume(const uint16_t &_volume, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetNotificationVolumeAsync(const uint16_t &_volume, SetNotificationVolumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace plugin
} // namespace audiopres
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_AUDIOPRES_PLUGIN_Tata_Audio_Pres_Plugin_PROXY_BASE_HPP_
