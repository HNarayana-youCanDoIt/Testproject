/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_Vehicle_Settings_Pres_Ctrl_PROXY_BASE_HPP_
#define V0_COM_HARMAN_DCIF_Vehicle_Settings_Pres_Ctrl_PROXY_BASE_HPP_

#include <v0/com/harman/dcif/VehicleSettingsPresCtrl.hpp>


#include <v0/com/harman/dcif/VehicleSettingsTypeCollection.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

class VehicleSettingsPresCtrlProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<bool> AmbientLightModeIlluOnHuAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> ParkLampStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<float> VehicleSpeedAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> BCmPresenceAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> BCmUcsStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> BCmAutoRelockStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> BCmApproachLampStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> BCmDRLStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> BCmAntitheftFeatureStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> BcmHuCkdStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::dcif::VehicleSettingsTypeCollection::antitheftKeyConfirmation_enum> BCmAntitheftKeyConfirmationAttribute;
    typedef CommonAPI::Event<
        int16_t
    > FmhValueEvent;
    typedef CommonAPI::Event<
        int16_t
    > ApproachLampValueEvent;
    typedef CommonAPI::Event<
        bool
    > DrlActiveSignalValEvent;
    typedef CommonAPI::Event<
        bool
    > HornRequestVehicleLockEvent;
    typedef CommonAPI::Event<
        bool
    > VehicleUnlockRKEEvent;
    typedef CommonAPI::Event<
        bool
    > VehicleUnlockPKEEvent;
    typedef CommonAPI::Event<
        bool
    > DriveAwayLockingEvent;
    typedef CommonAPI::Event<
        bool
    > AutoRelockfunctionEvent;
    typedef CommonAPI::Event<
        bool
    > BcmFactorySettingRequestEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum
    > HuBCmRequestErrorEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::dcif::VehicleSettingsTypeCollection::ambientLightLoadSettings_enum
    > AmbientLightLoadSettingsEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::dcif::VehicleSettingsTypeCollection::ambientLightMode_enum
    > AmbLightModeEvent;
    typedef CommonAPI::Event<
        int16_t
    > AmbLightIllumPossibleLevelsEvent;
    typedef CommonAPI::Event<
        int16_t
    > AmbientLightIllumSelLevelsEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::dcif::VehicleSettingsTypeCollection::moodtLightMode_enum
    > MoodLightModeEvent;
    typedef CommonAPI::Event<
        int16_t, int16_t
    > MoodLightlluminationLevelsEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::dcif::VehicleSettingsTypeCollection::moodtLightLocationOrZone_enum
    > MoodLightLocationOrZoneSettingsEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::dcif::VehicleSettingsTypeCollection::moodtLightColour_enum
    > MoodLightColourSettingsEvent;
    typedef CommonAPI::Event<
        bool
    > SpeedLockOutEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const VehicleSettingsPresCtrl::settingsTypeConfiguration&)> GetSettingsTypeConfigurationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum&)> PerformBcmFactoryResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum&)> GetValueAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum&)> SetValueAsyncCallback;

    /**
     * description: Attribute for ambientLightModeIlluOnHu as  	enbaled/disabled
     */
    virtual AmbientLightModeIlluOnHuAttribute& getAmbientLightModeIlluOnHuAttribute() = 0;
    /**
     * description: attribute for ParkLampStatus
     */
    virtual ParkLampStatusAttribute& getParkLampStatusAttribute() = 0;
    /**
     * description: Attribute for vehicle speed in Km/hr
     */
    virtual VehicleSpeedAttribute& getVehicleSpeedAttribute() = 0;
    /**
     * description: Attribute to get BCmPresence
     */
    virtual BCmPresenceAttribute& getBCmPresenceAttribute() = 0;
    /**
     * description: Attribute to get BCmUCsState
     */
    virtual BCmUcsStateAttribute& getBCmUcsStateAttribute() = 0;
    /**
     * description: Attribute to get BCmAutoRelockState
     */
    virtual BCmAutoRelockStateAttribute& getBCmAutoRelockStateAttribute() = 0;
    /**
     * description: Attribute to get BCmApproachLampState
     */
    virtual BCmApproachLampStateAttribute& getBCmApproachLampStateAttribute() = 0;
    /**
     * description: Attribute to get BCmDRLState
     */
    virtual BCmDRLStateAttribute& getBCmDRLStateAttribute() = 0;
    /**
     * description: Attribute to get BCmAntitheftFeatureState
     */
    virtual BCmAntitheftFeatureStateAttribute& getBCmAntitheftFeatureStateAttribute() = 0;
    /**
     * description: Attribute to get BcmHuCkdState
     */
    virtual BcmHuCkdStateAttribute& getBcmHuCkdStateAttribute() = 0;
    /**
     * description: Attribute to get BCmAntitheftKeyConfirmation
     */
    virtual BCmAntitheftKeyConfirmationAttribute& getBCmAntitheftKeyConfirmationAttribute() = 0;

    /**
     * description: signal to emit the fmhValue
     */
    virtual FmhValueEvent& getFmhValueEvent() = 0;
    /**
     * description: signal to emit the approachLampValue
     */
    virtual ApproachLampValueEvent& getApproachLampValueEvent() = 0;
    /**
     * description: signal to emit the drlActiveSignalVal
     */
    virtual DrlActiveSignalValEvent& getDrlActiveSignalValEvent() = 0;
    /**
     * description: signal to emit the hornRequestVehicleLock
     */
    virtual HornRequestVehicleLockEvent& getHornRequestVehicleLockEvent() = 0;
    /**
     * description: signal to emit the vehicleUnlockRKE
     */
    virtual VehicleUnlockRKEEvent& getVehicleUnlockRKEEvent() = 0;
    /**
     * description: signal to emit the vehicleUnlockPKE
     */
    virtual VehicleUnlockPKEEvent& getVehicleUnlockPKEEvent() = 0;
    /**
     * description: signal to emit the driveAwayLocking
     */
    virtual DriveAwayLockingEvent& getDriveAwayLockingEvent() = 0;
    /**
     * description: signal to emit the autoRelockfunction
     */
    virtual AutoRelockfunctionEvent& getAutoRelockfunctionEvent() = 0;
    /**
     * description: signal to emit the bcmFactorySettingRequest
     */
    virtual BcmFactorySettingRequestEvent& getBcmFactorySettingRequestEvent() = 0;
    virtual HuBCmRequestErrorEvent& getHuBCmRequestErrorEvent() = 0;
    /**
     * description: signal to emit the ambientLightLoadSettings 	Below are ambientLightLoadSettings
     *   		SPOT_LED 		ROOF_LED 		FOOT_WELL_LED 		DOOR_POCKET_LED
     */
    virtual AmbientLightLoadSettingsEvent& getAmbientLightLoadSettingsEvent() = 0;
    /**
     * description: signal to emit the ambLightMode 	Below are ambLightModes 	 		AUTO_MODE = 0
     *   		OFF_MODE = 1 		ON_MODE =2 		RESERVED = 3
     */
    virtual AmbLightModeEvent& getAmbLightModeEvent() = 0;
    /**
     * description: signal to emit the ambLightIllumPossibleLevels 	Below are
     *   ambLightIllumPossibleLevels 	 		value               Description 		0           
     *          Reserved 		1                   No intensity variation possible 		2     
     *                Intensity is varied in 2 levels 		3                   Intensity
     *   is varied in 3 levels 		4                   Intensity is varied in 4 levels
     *   		5                   Intensity is varied in 5 levels 		6                  
     *   Reserved 		7                   Reserved
     */
    virtual AmbLightIllumPossibleLevelsEvent& getAmbLightIllumPossibleLevelsEvent() = 0;
    /**
     * description: signal to emit the ambientLightIllumSelLevels 	Below are
     *   ambientLightIllumSelLevels 	 		value               Description 		0            
     *         Reserved 		1                   Level 1 Intensity 		2                 
     *   	Level 2 Intensity 		3                   Level 3 Intensity 		4                
     *     Level 4 Intensity 		5                   Level 5 Intensity 		6               
     *      Reserved 		7                   Reserved
     */
    virtual AmbientLightIllumSelLevelsEvent& getAmbientLightIllumSelLevelsEvent() = 0;
    /**
     * description: signal to emit the moodLightMode 	Below are the moodLightMode 	    RESERVED = 0
     *   		NO_MODE_SELECTION_MODE = 1 		OFF_ON_MODE =2 		AUTO_OFF_ON_MODE = 3
     */
    virtual MoodLightModeEvent& getMoodLightModeEvent() = 0;
    /**
     * description: signal to emit the moodLightlluminationLevels
     */
    virtual MoodLightlluminationLevelsEvent& getMoodLightlluminationLevelsEvent() = 0;
    /**
     * description: signal to emit the moodLightLocationOrZoneSettings 	Below are
     *   moodLightLocationOrZoneSettings 		ALL_AREA = 0 		FRONT_RH_AREA = 1
     *   		FRONT_LH_AREA =2 		FLOOR_CONSOLE_AREA = 3 		REAR_AREA = 4
     */
    virtual MoodLightLocationOrZoneSettingsEvent& getMoodLightLocationOrZoneSettingsEvent() = 0;
    /**
     * description: signal to emit the moodLightColourSettings 	Below are moodLightColourSettings
     *   		ICE_BLUE = 0 		COOL_BLUE = 1 		POLAR_BRIGHT_WHITE = 2 		IVORY_OFF_WHITE = 3
     *   		PURPLE = 4 		ORANGE = 5 		FLUORESCENT_GREEN = 6 		RUBY_RED = 7
     *   		PURPLE_TAUPE = 8 		HOT_MAGENTA = 9 		AERO_BLUE = 10 //A 		TUSCAN_RED = 11
     *   //B 		GOLD_YELLOW = 12 //C 		FRENCH_LIME = 13 //D 		TEAL_GREEN = 14 //E
     *   		CYAN_BLUE = 15 //F
     */
    virtual MoodLightColourSettingsEvent& getMoodLightColourSettingsEvent() = 0;
    /**
     * description: signal to emit the speedLockOut status
     */
    virtual SpeedLockOutEvent& getSpeedLockOutEvent() = 0;

    /**
     * description: method to return type of configuartion done for setttings type.
     */
    virtual void getSettingsTypeConfiguration(CommonAPI::CallStatus &_internalCallStatus, VehicleSettingsPresCtrl::settingsTypeConfiguration &_settingsTypeConfiguration_arr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSettingsTypeConfigurationAsync(GetSettingsTypeConfigurationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: method to perform BCM Factory Reset.
     */
    virtual void performBcmFactoryReset(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum &_factorySettingsType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> performBcmFactoryResetAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::factorySettingsType_enum &_factorySettingsType, PerformBcmFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: method to get the attribute value of vehicle settings type 	Below are the
     *   vehicle settings Type 	 	USER_CUSTOMIZATION_SETTINGS 	AMBIENT_LIGHT_SETTINGS
     *   	MOOD_LIGHT_SETTINGS
     */
    virtual void getValue(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getValueAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, GetValueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: method method to set the attribute value of vehicle settings type 	Below are
     *   the vehicle settings Type 	 	USER_CUSTOMIZATION_SETTINGS
     *   	AMBIENT_LIGHT_SETTINGS 	MOOD_LIGHT_SETTINGS
     */
    virtual void setValue(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, const int16_t &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::VehicleSettingsTypeCollection::retStatus_enum &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setValueAsync(const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::vehicleSettingsTypes_enum &_typeOfVehicleSettings, const ::v0::com::harman::dcif::VehicleSettingsTypeCollection::settingsAttribute_enum &_settingAttributeType, const int16_t &_value, SetValueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_Vehicle_Settings_Pres_Ctrl_PROXY_BASE_HPP_
