/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_PROXY_BASE_HPP_
#define V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_PROXY_BASE_HPP_

#include <v0/com/harman/dcif/CDisplayMgrPresCtrl.hpp>


#include <v0/com/harman/dcif/DisplayMgrEventTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

class CDisplayMgrPresCtrlProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<int32_t> LvdsConnectionStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int32_t> DisplayOnOffStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<int32_t> DayNightModeStatusAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> SetDisplayOnOffFeatureAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> SetDisplayBrightnessLevelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> DisplayOnEventAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int16_t&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> GetDisplayBrightnessLevelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int16_t&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> GetHardwareVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int16_t&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> GetSoftwareVersionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> GetDisplay16RSparePartNumberAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> GetDisplay16REcuHwNumberAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> SetButtonPanelBrightnessAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int16_t&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> GetButtonPanelBrightnessLevelAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int16_t&, const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus&)> GetDisplayTemperatureAsyncCallback;

    /**
     * description: lvdsConnectionStatus: To emit the connection status of LVDS cable
     */
    virtual LvdsConnectionStatusAttribute& getLvdsConnectionStatusAttribute() = 0;
    /**
     * description: DisplayOnOffStatus: To get the display ON-OFF feature status 0 - disabled , 1 -
     *   enabled
     */
    virtual DisplayOnOffStatusAttribute& getDisplayOnOffStatusAttribute() = 0;
    /**
     * description: DayNightModeStatus: To get the display Day/night mode status 0 - disabled , 1 -
     *   enabled
     */
    virtual DayNightModeStatusAttribute& getDayNightModeStatusAttribute() = 0;


    /**
     * description: setDisplayOnOffFeature: To set the display ON-OFF status false - Display off ,
     *   true - Display on
     */
    virtual void setDisplayOnOffFeature(const bool &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setDisplayOnOffFeatureAsync(const bool &_value, SetDisplayOnOffFeatureAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setDisplayBrightnessLevel: To set the display brightness level
     */
    virtual void setDisplayBrightnessLevel(const int16_t &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setDisplayBrightnessLevelAsync(const int16_t &_value, SetDisplayBrightnessLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: displayOnEvent: To send events for which HMI has to turn on the display
     */
    virtual void displayOnEvent(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> displayOnEventAsync(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, DisplayOnEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getDisplayBrightnessLevel: To get the display brightness level
     */
    virtual void getDisplayBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDisplayBrightnessLevelAsync(GetDisplayBrightnessLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getHardwareVersion: To get the display Hardware Version
     */
    virtual void getHardwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getHardwareVersionAsync(GetHardwareVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getSoftwareVersion: To get the display Software Version
     */
    virtual void getSoftwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSoftwareVersionAsync(GetSoftwareVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getDisplay16RSparePartNumber: To get the display 16R spare part number
     */
    virtual void getDisplay16RSparePartNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDisplay16RSparePartNumberAsync(GetDisplay16RSparePartNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getDisplay16REcuHwNumber: To get the display 16R ECU number
     */
    virtual void getDisplay16REcuHwNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDisplay16REcuHwNumberAsync(GetDisplay16REcuHwNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: setButtonPanelBrightness: To set the button panel brightness level
     */
    virtual void setButtonPanelBrightness(const int16_t &_status, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setButtonPanelBrightnessAsync(const int16_t &_status, SetButtonPanelBrightnessAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getButtonPanelBrightnessLevel: To get the button panel brightness level
     */
    virtual void getButtonPanelBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getButtonPanelBrightnessLevelAsync(GetButtonPanelBrightnessLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: getDisplayTemperature: To get the Display temerature information
     */
    virtual void getDisplayTemperature(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getDisplayTemperatureAsync(GetDisplayTemperatureAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_PROXY_BASE_HPP_
