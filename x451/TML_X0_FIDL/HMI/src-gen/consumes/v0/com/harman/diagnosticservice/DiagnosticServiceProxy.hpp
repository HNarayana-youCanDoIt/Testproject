/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: This class implements all DiagnosticService Operations
 * author: Akash Jaiswal
 */
#ifndef V0_COM_HARMAN_DIAGNOSTICSERVICE_Diagnostic_Service_PROXY_HPP_
#define V0_COM_HARMAN_DIAGNOSTICSERVICE_Diagnostic_Service_PROXY_HPP_

#include <v0/com/harman/diagnosticservice/DiagnosticServiceProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace diagnosticservice {

template <typename ... _AttributeExtensions>
class DiagnosticServiceProxy
    : virtual public DiagnosticService, 
      virtual public DiagnosticServiceProxyBase,
      virtual public _AttributeExtensions... {
public:
    DiagnosticServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~DiagnosticServiceProxy();

    typedef DiagnosticService InterfaceType;


    /**
     * description: DiagEngSessionStatus: To emit the BT Auto Pairing request through AME Diagnostic
     */
    /**
     * Returns the wrapper class that provides access to the attribute DiagEngSessionStatus.
     */
    virtual DiagEngSessionStatusAttribute& getDiagEngSessionStatusAttribute() {
        return delegate_->getDiagEngSessionStatusAttribute();
    }
    /**
     * description: DiagSWCStatus: To emit the Steering Wheel Control connection status
     */
    /**
     * Returns the wrapper class that provides access to the attribute DiagSWCStatus.
     */
    virtual DiagSWCStatusAttribute& getDiagSWCStatusAttribute() {
        return delegate_->getDiagSWCStatusAttribute();
    }
    /**
     * description: DiagMICStatus: To emit the MIC connection status
     */
    /**
     * Returns the wrapper class that provides access to the attribute DiagMICStatus.
     */
    virtual DiagMICStatusAttribute& getDiagMICStatusAttribute() {
        return delegate_->getDiagMICStatusAttribute();
    }
    /**
     * description: DiagGPSStatus: To emit the GPS connection status
     */
    /**
     * Returns the wrapper class that provides access to the attribute DiagGPSStatus.
     */
    virtual DiagGPSStatusAttribute& getDiagGPSStatusAttribute() {
        return delegate_->getDiagGPSStatusAttribute();
    }
    /**
     * description: DiagAmFmAntennaStatus: To emit the AM/FM Antenna connection status
     */
    /**
     * Returns the wrapper class that provides access to the attribute DiagAmFmAntennaStatus.
     */
    virtual DiagAmFmAntennaStatusAttribute& getDiagAmFmAntennaStatusAttribute() {
        return delegate_->getDiagAmFmAntennaStatusAttribute();
    }




    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<DiagnosticServiceProxyBase> delegate_;
};

typedef DiagnosticServiceProxy<> DiagnosticServiceProxyDefault;

namespace DiagnosticServiceExtensions {
    /**
     * description: DiagEngSessionStatus: To emit the BT Auto Pairing request through AME Diagnostic
     */
    template <template <typename > class _ExtensionType>
    class DiagEngSessionStatusAttributeExtension {
     public:
        typedef _ExtensionType<DiagnosticServiceProxyBase::DiagEngSessionStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DiagnosticServiceProxyBase::DiagEngSessionStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DiagEngSessionStatusAttributeExtension() {}
    #endif
    
        DiagEngSessionStatusAttributeExtension(DiagnosticServiceProxyBase& proxy): attributeExtension_(proxy.getDiagEngSessionStatusAttribute()) {
        }
    
        inline extension_type& getDiagEngSessionStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: DiagSWCStatus: To emit the Steering Wheel Control connection status
     */
    template <template <typename > class _ExtensionType>
    class DiagSWCStatusAttributeExtension {
     public:
        typedef _ExtensionType<DiagnosticServiceProxyBase::DiagSWCStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DiagnosticServiceProxyBase::DiagSWCStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DiagSWCStatusAttributeExtension() {}
    #endif
    
        DiagSWCStatusAttributeExtension(DiagnosticServiceProxyBase& proxy): attributeExtension_(proxy.getDiagSWCStatusAttribute()) {
        }
    
        inline extension_type& getDiagSWCStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: DiagMICStatus: To emit the MIC connection status
     */
    template <template <typename > class _ExtensionType>
    class DiagMICStatusAttributeExtension {
     public:
        typedef _ExtensionType<DiagnosticServiceProxyBase::DiagMICStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DiagnosticServiceProxyBase::DiagMICStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DiagMICStatusAttributeExtension() {}
    #endif
    
        DiagMICStatusAttributeExtension(DiagnosticServiceProxyBase& proxy): attributeExtension_(proxy.getDiagMICStatusAttribute()) {
        }
    
        inline extension_type& getDiagMICStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: DiagGPSStatus: To emit the GPS connection status
     */
    template <template <typename > class _ExtensionType>
    class DiagGPSStatusAttributeExtension {
     public:
        typedef _ExtensionType<DiagnosticServiceProxyBase::DiagGPSStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DiagnosticServiceProxyBase::DiagGPSStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DiagGPSStatusAttributeExtension() {}
    #endif
    
        DiagGPSStatusAttributeExtension(DiagnosticServiceProxyBase& proxy): attributeExtension_(proxy.getDiagGPSStatusAttribute()) {
        }
    
        inline extension_type& getDiagGPSStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: DiagAmFmAntennaStatus: To emit the AM/FM Antenna connection status
     */
    template <template <typename > class _ExtensionType>
    class DiagAmFmAntennaStatusAttributeExtension {
     public:
        typedef _ExtensionType<DiagnosticServiceProxyBase::DiagAmFmAntennaStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<DiagnosticServiceProxyBase::DiagAmFmAntennaStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DiagAmFmAntennaStatusAttributeExtension() {}
    #endif
    
        DiagAmFmAntennaStatusAttributeExtension(DiagnosticServiceProxyBase& proxy): attributeExtension_(proxy.getDiagAmFmAntennaStatusAttribute()) {
        }
    
        inline extension_type& getDiagAmFmAntennaStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace DiagnosticServiceExtensions

//
// DiagnosticServiceProxy Implementation
//
template <typename ... _AttributeExtensions>
DiagnosticServiceProxy<_AttributeExtensions...>::DiagnosticServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<DiagnosticServiceProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<DiagnosticServiceProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
DiagnosticServiceProxy<_AttributeExtensions...>::~DiagnosticServiceProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &DiagnosticServiceProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool DiagnosticServiceProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool DiagnosticServiceProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& DiagnosticServiceProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& DiagnosticServiceProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace diagnosticservice
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::diagnosticservice::DiagnosticServiceProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::diagnosticservice::DiagnosticServiceProxy<
            ::v0::com::harman::diagnosticservice::DiagnosticServiceExtensions::DiagEngSessionStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::diagnosticservice::DiagnosticServiceExtensions::DiagSWCStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::diagnosticservice::DiagnosticServiceExtensions::DiagMICStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::diagnosticservice::DiagnosticServiceExtensions::DiagGPSStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::diagnosticservice::DiagnosticServiceExtensions::DiagAmFmAntennaStatusAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DIAGNOSTICSERVICE_Diagnostic_Service_PROXY_HPP_
