/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_PROXY_HPP_
#define V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_PROXY_HPP_

#include <v0/com/harman/androidautopres/TataAndroidAutoPresPluginProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace androidautopres {

template <typename ... _AttributeExtensions>
class TataAndroidAutoPresPluginProxy
    : virtual public TataAndroidAutoPresPlugin, 
      virtual public TataAndroidAutoPresPluginProxyBase,
      virtual public _AttributeExtensions... {
public:
    TataAndroidAutoPresPluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TataAndroidAutoPresPluginProxy();

    typedef TataAndroidAutoPresPlugin InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute FunctionOwner.
     */
    virtual FunctionOwnerAttribute& getFunctionOwnerAttribute() {
        return delegate_->getFunctionOwnerAttribute();
    }
    /**
     * description: This enum is used for current screen owner.
     */
    /**
     * Returns the wrapper class that provides access to the attribute screenOwner.
     */
    virtual ScreenOwnerAttribute& getScreenOwnerAttribute() {
        return delegate_->getScreenOwnerAttribute();
    }
    /**
     * description: This enum is used for current navi owner.
     */
    /**
     * Returns the wrapper class that provides access to the attribute naviOwner.
     */
    virtual NaviOwnerAttribute& getNaviOwnerAttribute() {
        return delegate_->getNaviOwnerAttribute();
    }
    /**
     * description: This enum is used for current navi owner.
     */
    /**
     * Returns the wrapper class that provides access to the attribute speechOwner.
     */
    virtual SpeechOwnerAttribute& getSpeechOwnerAttribute() {
        return delegate_->getSpeechOwnerAttribute();
    }

    /**
     * Returns the wrapper class that provides access to the broadcast firstConnShowPopup.
     */
    virtual FirstConnShowPopupEvent& getFirstConnShowPopupEvent() {
        return delegate_->getFirstConnShowPopupEvent();
    }

    /**
     * Calls reportKeyEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls reportKeyEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playAapMedia with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playAapMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playAapMediaAsync(PlayAapMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pauseAapMedia with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pauseAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pauseAapMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> pauseAapMediaAsync(PauseAapMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls toggleAapMedia with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void toggleAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls toggleAapMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> toggleAapMediaAsync(ToggleAapMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by Engineering Menu service for factory reset.        
     *   	return: true - Success 		    false - Not successful
     * Calls AaFactoryReset with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void AaFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls AaFactoryReset with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> AaFactoryResetAsync(AaFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to changed the song to Next.         	return: true
     *   - Success 		    false - Not successful
     * Calls AapMediaNext with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void AapMediaNext(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls AapMediaNext with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> AapMediaNextAsync(AapMediaNextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to changed the song to Previous.          
     *   	return: true - Success 		    false - Not successful
     * Calls AapMediaPrevious with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void AapMediaPrevious(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls AapMediaPrevious with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> AapMediaPreviousAsync(AapMediaPreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getFunctionOwnerStruct with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getFunctionOwnerStruct(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::HuFunctions &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getFunctionOwnerStruct with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getFunctionOwnerStructAsync(GetFunctionOwnerStructAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to get the current screen owner.          
     *   	return: OwnerType
     * Calls getScreenOwner with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getScreenOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getScreenOwner with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getScreenOwnerAsync(GetScreenOwnerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to get the current navi owner.           	return:
     *   OwnerType
     * Calls getNaviOwner with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getNaviOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getNaviOwner with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getNaviOwnerAsync(GetNaviOwnerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI whenever AAP media has to be shown        
     *   	return: true - Success 		    false - Not successful
     * Calls AapShowAaMedia with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void AapShowAaMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls AapShowAaMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> AapShowAaMediaAsync(AapShowAaMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to get the current speech owner.          
     *   	return: OwnerType
     * Calls getSpeechOwner with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSpeechOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSpeechOwner with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSpeechOwnerAsync(GetSpeechOwnerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<TataAndroidAutoPresPluginProxyBase> delegate_;
};

typedef TataAndroidAutoPresPluginProxy<> TataAndroidAutoPresPluginProxyDefault;

namespace TataAndroidAutoPresPluginExtensions {
    template <template <typename > class _ExtensionType>
    class FunctionOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataAndroidAutoPresPluginProxyBase::FunctionOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataAndroidAutoPresPluginProxyBase::FunctionOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        FunctionOwnerAttributeExtension() {}
    #endif
    
        FunctionOwnerAttributeExtension(TataAndroidAutoPresPluginProxyBase& proxy): attributeExtension_(proxy.getFunctionOwnerAttribute()) {
        }
    
        inline extension_type& getFunctionOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: This enum is used for current screen owner.
     */
    template <template <typename > class _ExtensionType>
    class ScreenOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataAndroidAutoPresPluginProxyBase::ScreenOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataAndroidAutoPresPluginProxyBase::ScreenOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ScreenOwnerAttributeExtension() {}
    #endif
    
        ScreenOwnerAttributeExtension(TataAndroidAutoPresPluginProxyBase& proxy): attributeExtension_(proxy.getScreenOwnerAttribute()) {
        }
    
        inline extension_type& getScreenOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: This enum is used for current navi owner.
     */
    template <template <typename > class _ExtensionType>
    class NaviOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataAndroidAutoPresPluginProxyBase::NaviOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataAndroidAutoPresPluginProxyBase::NaviOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NaviOwnerAttributeExtension() {}
    #endif
    
        NaviOwnerAttributeExtension(TataAndroidAutoPresPluginProxyBase& proxy): attributeExtension_(proxy.getNaviOwnerAttribute()) {
        }
    
        inline extension_type& getNaviOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: This enum is used for current navi owner.
     */
    template <template <typename > class _ExtensionType>
    class SpeechOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataAndroidAutoPresPluginProxyBase::SpeechOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataAndroidAutoPresPluginProxyBase::SpeechOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SpeechOwnerAttributeExtension() {}
    #endif
    
        SpeechOwnerAttributeExtension(TataAndroidAutoPresPluginProxyBase& proxy): attributeExtension_(proxy.getSpeechOwnerAttribute()) {
        }
    
        inline extension_type& getSpeechOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace TataAndroidAutoPresPluginExtensions

//
// TataAndroidAutoPresPluginProxy Implementation
//
template <typename ... _AttributeExtensions>
TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::TataAndroidAutoPresPluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<TataAndroidAutoPresPluginProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<TataAndroidAutoPresPluginProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::~TataAndroidAutoPresPluginProxy() {
}

template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->reportKeyEvent(_KeyCode, _KeyStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->reportKeyEventAsync(_KeyCode, _KeyStatus, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::playAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->playAapMedia(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::playAapMediaAsync(PlayAapMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->playAapMediaAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::pauseAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->pauseAapMedia(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::pauseAapMediaAsync(PauseAapMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->pauseAapMediaAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::toggleAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->toggleAapMedia(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::toggleAapMediaAsync(ToggleAapMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->toggleAapMediaAsync(_callback, _info);
}
/**
 * description: This method is called by Engineering Menu service for factory reset.        
 *   	return: true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::AaFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->AaFactoryReset(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::AaFactoryResetAsync(AaFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->AaFactoryResetAsync(_callback, _info);
}
/**
 * description: This method is called by HMI to changed the song to Next.         	return: true
 *   - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::AapMediaNext(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->AapMediaNext(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::AapMediaNextAsync(AapMediaNextAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->AapMediaNextAsync(_callback, _info);
}
/**
 * description: This method is called by HMI to changed the song to Previous.          
 *   	return: true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::AapMediaPrevious(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->AapMediaPrevious(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::AapMediaPreviousAsync(AapMediaPreviousAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->AapMediaPreviousAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getFunctionOwnerStruct(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::HuFunctions &_result, const CommonAPI::CallInfo *_info) {
    delegate_->getFunctionOwnerStruct(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getFunctionOwnerStructAsync(GetFunctionOwnerStructAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getFunctionOwnerStructAsync(_callback, _info);
}
/**
 * description: This method is called by HMI to get the current screen owner.          
 *   	return: OwnerType
 */
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getScreenOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info) {
    delegate_->getScreenOwner(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getScreenOwnerAsync(GetScreenOwnerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getScreenOwnerAsync(_callback, _info);
}
/**
 * description: This method is called by HMI to get the current navi owner.           	return:
 *   OwnerType
 */
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getNaviOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info) {
    delegate_->getNaviOwner(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getNaviOwnerAsync(GetNaviOwnerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getNaviOwnerAsync(_callback, _info);
}
/**
 * description: This method is called by HMI whenever AAP media has to be shown        
 *   	return: true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::AapShowAaMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->AapShowAaMedia(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::AapShowAaMediaAsync(AapShowAaMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->AapShowAaMediaAsync(_callback, _info);
}
/**
 * description: This method is called by HMI to get the current speech owner.          
 *   	return: OwnerType
 */
template <typename ... _AttributeExtensions>
void TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getSpeechOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info) {
    delegate_->getSpeechOwner(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getSpeechOwnerAsync(GetSpeechOwnerAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSpeechOwnerAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TataAndroidAutoPresPluginProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace androidautopres
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::androidautopres::TataAndroidAutoPresPluginProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::androidautopres::TataAndroidAutoPresPluginProxy<
            ::v0::com::harman::androidautopres::TataAndroidAutoPresPluginExtensions::FunctionOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::androidautopres::TataAndroidAutoPresPluginExtensions::ScreenOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::androidautopres::TataAndroidAutoPresPluginExtensions::NaviOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::androidautopres::TataAndroidAutoPresPluginExtensions::SpeechOwnerAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_PROXY_HPP_
