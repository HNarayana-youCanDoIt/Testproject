/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_PROXY_BASE_HPP_
#define V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_PROXY_BASE_HPP_

#include <v0/com/harman/androidautopres/TataAndroidAutoPresPlugin.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace androidautopres {

class TataAndroidAutoPresPluginProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::HuFunctions> FunctionOwnerAttribute;
    typedef CommonAPI::ObservableAttribute<::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType> ScreenOwnerAttribute;
    typedef CommonAPI::ObservableAttribute<::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType> NaviOwnerAttribute;
    typedef CommonAPI::ObservableAttribute<::v0::com::harman::androidautopres::TataAndroidAutoPresPlugin::OwnerType> SpeechOwnerAttribute;
    typedef CommonAPI::Event<
        uint8_t
    > FirstConnShowPopupEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> ReportKeyEventAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> PlayAapMediaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> PauseAapMediaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> ToggleAapMediaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> AaFactoryResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> AapMediaNextAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> AapMediaPreviousAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const TataAndroidAutoPresPlugin::HuFunctions&)> GetFunctionOwnerStructAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const TataAndroidAutoPresPlugin::OwnerType&)> GetScreenOwnerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const TataAndroidAutoPresPlugin::OwnerType&)> GetNaviOwnerAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> AapShowAaMediaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const TataAndroidAutoPresPlugin::OwnerType&)> GetSpeechOwnerAsyncCallback;

    virtual FunctionOwnerAttribute& getFunctionOwnerAttribute() = 0;
    /**
     * description: This enum is used for current screen owner.
     */
    virtual ScreenOwnerAttribute& getScreenOwnerAttribute() = 0;
    /**
     * description: This enum is used for current navi owner.
     */
    virtual NaviOwnerAttribute& getNaviOwnerAttribute() = 0;
    /**
     * description: This enum is used for current navi owner.
     */
    virtual SpeechOwnerAttribute& getSpeechOwnerAttribute() = 0;

    virtual FirstConnShowPopupEvent& getFirstConnShowPopupEvent() = 0;

    virtual void reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void playAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playAapMediaAsync(PlayAapMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void pauseAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseAapMediaAsync(PauseAapMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void toggleAapMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> toggleAapMediaAsync(ToggleAapMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by Engineering Menu service for factory reset.        
     *   	return: true - Success 		    false - Not successful
     */
    virtual void AaFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> AaFactoryResetAsync(AaFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to changed the song to Next.         	return: true
     *   - Success 		    false - Not successful
     */
    virtual void AapMediaNext(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> AapMediaNextAsync(AapMediaNextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to changed the song to Previous.          
     *   	return: true - Success 		    false - Not successful
     */
    virtual void AapMediaPrevious(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> AapMediaPreviousAsync(AapMediaPreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getFunctionOwnerStruct(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::HuFunctions &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getFunctionOwnerStructAsync(GetFunctionOwnerStructAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to get the current screen owner.          
     *   	return: OwnerType
     */
    virtual void getScreenOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getScreenOwnerAsync(GetScreenOwnerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to get the current navi owner.           	return:
     *   OwnerType
     */
    virtual void getNaviOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getNaviOwnerAsync(GetNaviOwnerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI whenever AAP media has to be shown        
     *   	return: true - Success 		    false - Not successful
     */
    virtual void AapShowAaMedia(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> AapShowAaMediaAsync(AapShowAaMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to get the current speech owner.          
     *   	return: OwnerType
     */
    virtual void getSpeechOwner(CommonAPI::CallStatus &_internalCallStatus, TataAndroidAutoPresPlugin::OwnerType &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getSpeechOwnerAsync(GetSpeechOwnerAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace androidautopres
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_ANDROIDAUTOPRES_Tata_Android_Auto_Pres_Plugin_PROXY_BASE_HPP_
