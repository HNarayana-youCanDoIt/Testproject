/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_Ic_Render_Pres_Types_HPP_
#define V0_COM_HARMAN_DCIF_Ic_Render_Pres_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

struct IcRenderPresTypes {
    
    struct eIcRenderCast : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ICRENDER_CAST_MASTER = 1,
            ICRENDER_CAST_RADIO = 2,
            ICRENDER_CAST_MEDIA = 3
        };
        
        eIcRenderCast() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ICRENDER_CAST_MASTER)) {}
        eIcRenderCast(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ICRENDER_CAST_MASTER):
                case static_cast<int32_t>(Literal::ICRENDER_CAST_RADIO):
                case static_cast<int32_t>(Literal::ICRENDER_CAST_MEDIA):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eIcRenderCast &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eIcRenderCast &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eIcRenderCast &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eIcRenderCast &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eIcRenderCast &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eIcRenderCast &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eIcColorStatus_enum : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            IC_THEME_BLUE = 0,
            IC_THEME_GREEN = 1,
            IC_THEME_RED = 2,
            IC_THEME_PINK = 3,
            IC_THEME_ORANGE = 4,
            IC_THEME_RESERVED_5 = 5,
            IC_THEME_RESERVED_6 = 6,
            IC_THEME_RESERVED = 7
        };
        
        eIcColorStatus_enum() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::IC_THEME_BLUE)) {}
        eIcColorStatus_enum(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::IC_THEME_BLUE):
                case static_cast<int32_t>(Literal::IC_THEME_GREEN):
                case static_cast<int32_t>(Literal::IC_THEME_RED):
                case static_cast<int32_t>(Literal::IC_THEME_PINK):
                case static_cast<int32_t>(Literal::IC_THEME_ORANGE):
                case static_cast<int32_t>(Literal::IC_THEME_RESERVED_5):
                case static_cast<int32_t>(Literal::IC_THEME_RESERVED_6):
                case static_cast<int32_t>(Literal::IC_THEME_RESERVED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eIcColorStatus_enum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eIcColorStatus_enum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eIcColorStatus_enum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eIcColorStatus_enum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eIcColorStatus_enum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eIcColorStatus_enum &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eIcRenderCallState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ICRENDER_NO_PHONE_CALL = 0,
            ICRENDER_INCOMING_CALL = 1,
            ICRENDER_OUTGOING_CALL = 2,
            ICRENDER_ACTIVE_CALL = 3,
            ICRENDER_ACTIVE_CONF_CALL = 4,
            ICRENDER_CALL_ONHOLD = 5,
            ICRENDER_CALL_ENDED = 6,
            ICRENDER_INVALID_CALL_STATE = 7
        };
        
        eIcRenderCallState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ICRENDER_NO_PHONE_CALL)) {}
        eIcRenderCallState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ICRENDER_NO_PHONE_CALL):
                case static_cast<int32_t>(Literal::ICRENDER_INCOMING_CALL):
                case static_cast<int32_t>(Literal::ICRENDER_OUTGOING_CALL):
                case static_cast<int32_t>(Literal::ICRENDER_ACTIVE_CALL):
                case static_cast<int32_t>(Literal::ICRENDER_ACTIVE_CONF_CALL):
                case static_cast<int32_t>(Literal::ICRENDER_CALL_ONHOLD):
                case static_cast<int32_t>(Literal::ICRENDER_CALL_ENDED):
                case static_cast<int32_t>(Literal::ICRENDER_INVALID_CALL_STATE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eIcRenderCallState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eIcRenderCallState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eIcRenderCallState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eIcRenderCallState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eIcRenderCallState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eIcRenderCallState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.dcif.IcRenderPresTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct IcRenderPresTypes

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for eIcRenderCast
    template<>
    struct hash<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast> {
        inline size_t operator()(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast& eIcRenderCast) const {
            return static_cast<int32_t>(eIcRenderCast);
        }
    };
    //Hash for eIcColorStatus_enum
    template<>
    struct hash<::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum> {
        inline size_t operator()(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum& eIcColorStatus_enum) const {
            return static_cast<int32_t>(eIcColorStatus_enum);
        }
    };
    //Hash for eIcRenderCallState
    template<>
    struct hash<::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState> {
        inline size_t operator()(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState& eIcRenderCallState) const {
            return static_cast<int32_t>(eIcRenderCallState);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_Ic_Render_Pres_Types_HPP_
