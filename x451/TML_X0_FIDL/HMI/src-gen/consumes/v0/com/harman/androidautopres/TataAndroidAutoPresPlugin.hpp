/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_ANDROIDAUTOPRES_TATA_ANDROID_AUTO_PRES_PLUGIN_HPP_
#define V0_COM_HARMAN_ANDROIDAUTOPRES_TATA_ANDROID_AUTO_PRES_PLUGIN_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace androidautopres {

class TataAndroidAutoPresPlugin {
public:
    virtual ~TataAndroidAutoPresPlugin() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct OwnerType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            None = 0,
            Phone = 1,
            HeadUnit = 2
        };
        
        OwnerType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::None)) {}
        OwnerType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::None):
                case static_cast<int32_t>(Literal::Phone):
                case static_cast<int32_t>(Literal::HeadUnit):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const OwnerType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const OwnerType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const OwnerType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const OwnerType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const OwnerType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const OwnerType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: This structure will inform about the current function owner. By default it will
     *   be HeadUnit. If any function is held by phone, then it will be Phone. None is
     *   just place holder.
     */
    struct HuFunctions : CommonAPI::Struct<OwnerType, OwnerType, OwnerType, OwnerType> {
    	
    	HuFunctions() {
    	}
    	HuFunctions(const OwnerType &_screenOwner, const OwnerType &_mediaOwner, const OwnerType &_speechOwner, const OwnerType &_naviOwner)
    	{
    		std::get<0>(values_) = _screenOwner;
    		std::get<1>(values_) = _mediaOwner;
    		std::get<2>(values_) = _speechOwner;
    		std::get<3>(values_) = _naviOwner;
    	}
    	inline const OwnerType &getScreenOwner() const { return std::get<0>(values_); }
    	inline void setScreenOwner(const OwnerType &_value) { std::get<0>(values_) = _value; }
    	inline const OwnerType &getMediaOwner() const { return std::get<1>(values_); }
    	inline void setMediaOwner(const OwnerType &_value) { std::get<1>(values_) = _value; }
    	inline const OwnerType &getSpeechOwner() const { return std::get<2>(values_); }
    	inline void setSpeechOwner(const OwnerType &_value) { std::get<2>(values_) = _value; }
    	inline const OwnerType &getNaviOwner() const { return std::get<3>(values_); }
    	inline void setNaviOwner(const OwnerType &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const HuFunctions& _other) const {
                return (getScreenOwner() == _other.getScreenOwner() && getMediaOwner() == _other.getMediaOwner() && getSpeechOwner() == _other.getSpeechOwner() && getNaviOwner() == _other.getNaviOwner());
        }
    	inline bool operator!=(const HuFunctions &_other) const {
    		return !((*this) == _other);
    	}
    
    };
};

const char* TataAndroidAutoPresPlugin::getInterface() {
    return ("com.harman.androidautopres.TataAndroidAutoPresPlugin");
}

CommonAPI::Version TataAndroidAutoPresPlugin::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}

/**
 * description: This enum is used for HuFunctions.
 */
/**
 * description: This structure will inform about the current function owner. By default it will
 *   be HeadUnit. If any function is held by phone, then it will be Phone. None is
 *   just place holder.
 */

} // namespace androidautopres
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_ANDROIDAUTOPRES_TATA_ANDROID_AUTO_PRES_PLUGIN_HPP_
