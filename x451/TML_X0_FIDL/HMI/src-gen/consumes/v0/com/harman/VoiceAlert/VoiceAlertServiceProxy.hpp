/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_PROXY_HPP_
#define V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_PROXY_HPP_

#include <v0/com/harman/VoiceAlert/VoiceAlertServiceProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace VoiceAlert {

template <typename ... _AttributeExtensions>
class VoiceAlertServiceProxy
    : virtual public VoiceAlertService, 
      virtual public VoiceAlertServiceProxyBase,
      virtual public _AttributeExtensions... {
public:
    VoiceAlertServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~VoiceAlertServiceProxy();

    typedef VoiceAlertService InterfaceType;


    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute curDriveModeSig.
     */
    virtual CurDriveModeSigAttribute& getCurDriveModeSigAttribute() {
        return delegate_->getCurDriveModeSigAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute huAlertState.
     */
    virtual HuAlertStateAttribute& getHuAlertStateAttribute() {
        return delegate_->getHuAlertStateAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute huAlertHMISelection.
     */
    virtual HuAlertHMISelectionAttribute& getHuAlertHMISelectionAttribute() {
        return delegate_->getHuAlertHMISelectionAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute huInfoFeaturePresence.
     */
    virtual HuInfoFeaturePresenceAttribute& getHuInfoFeaturePresenceAttribute() {
        return delegate_->getHuInfoFeaturePresenceAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute huAlertStatus.
     */
    virtual HuAlertStatusAttribute& getHuAlertStatusAttribute() {
        return delegate_->getHuAlertStatusAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute vasStatus.
     */
    virtual VasStatusAttribute& getVasStatusAttribute() {
        return delegate_->getVasStatusAttribute();
    }
    /**
     * description: No Information Available
     */
    /**
     * Returns the wrapper class that provides access to the attribute huAlertStateMce.
     */
    virtual HuAlertStateMceAttribute& getHuAlertStateMceAttribute() {
        return delegate_->getHuAlertStateMceAttribute();
    }


    /**
     * Calls setHuHMISelection with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setHuHMISelection(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huTypeofAlert, const bool &_alertStatus, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huAlertType, bool &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setHuHMISelection with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setHuHMISelectionAsync(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huTypeofAlert, const bool &_alertStatus, SetHuHMISelectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<VoiceAlertServiceProxyBase> delegate_;
};

typedef VoiceAlertServiceProxy<> VoiceAlertServiceProxyDefault;

namespace VoiceAlertServiceExtensions {
    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class CurDriveModeSigAttributeExtension {
     public:
        typedef _ExtensionType<VoiceAlertServiceProxyBase::CurDriveModeSigAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VoiceAlertServiceProxyBase::CurDriveModeSigAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurDriveModeSigAttributeExtension() {}
    #endif
    
        CurDriveModeSigAttributeExtension(VoiceAlertServiceProxyBase& proxy): attributeExtension_(proxy.getCurDriveModeSigAttribute()) {
        }
    
        inline extension_type& getCurDriveModeSigAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class HuAlertStateAttributeExtension {
     public:
        typedef _ExtensionType<VoiceAlertServiceProxyBase::HuAlertStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VoiceAlertServiceProxyBase::HuAlertStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HuAlertStateAttributeExtension() {}
    #endif
    
        HuAlertStateAttributeExtension(VoiceAlertServiceProxyBase& proxy): attributeExtension_(proxy.getHuAlertStateAttribute()) {
        }
    
        inline extension_type& getHuAlertStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class HuAlertHMISelectionAttributeExtension {
     public:
        typedef _ExtensionType<VoiceAlertServiceProxyBase::HuAlertHMISelectionAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VoiceAlertServiceProxyBase::HuAlertHMISelectionAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HuAlertHMISelectionAttributeExtension() {}
    #endif
    
        HuAlertHMISelectionAttributeExtension(VoiceAlertServiceProxyBase& proxy): attributeExtension_(proxy.getHuAlertHMISelectionAttribute()) {
        }
    
        inline extension_type& getHuAlertHMISelectionAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class HuInfoFeaturePresenceAttributeExtension {
     public:
        typedef _ExtensionType<VoiceAlertServiceProxyBase::HuInfoFeaturePresenceAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VoiceAlertServiceProxyBase::HuInfoFeaturePresenceAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HuInfoFeaturePresenceAttributeExtension() {}
    #endif
    
        HuInfoFeaturePresenceAttributeExtension(VoiceAlertServiceProxyBase& proxy): attributeExtension_(proxy.getHuInfoFeaturePresenceAttribute()) {
        }
    
        inline extension_type& getHuInfoFeaturePresenceAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class HuAlertStatusAttributeExtension {
     public:
        typedef _ExtensionType<VoiceAlertServiceProxyBase::HuAlertStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VoiceAlertServiceProxyBase::HuAlertStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HuAlertStatusAttributeExtension() {}
    #endif
    
        HuAlertStatusAttributeExtension(VoiceAlertServiceProxyBase& proxy): attributeExtension_(proxy.getHuAlertStatusAttribute()) {
        }
    
        inline extension_type& getHuAlertStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class VasStatusAttributeExtension {
     public:
        typedef _ExtensionType<VoiceAlertServiceProxyBase::VasStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VoiceAlertServiceProxyBase::VasStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VasStatusAttributeExtension() {}
    #endif
    
        VasStatusAttributeExtension(VoiceAlertServiceProxyBase& proxy): attributeExtension_(proxy.getVasStatusAttribute()) {
        }
    
        inline extension_type& getVasStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: No Information Available
     */
    template <template <typename > class _ExtensionType>
    class HuAlertStateMceAttributeExtension {
     public:
        typedef _ExtensionType<VoiceAlertServiceProxyBase::HuAlertStateMceAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VoiceAlertServiceProxyBase::HuAlertStateMceAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        HuAlertStateMceAttributeExtension() {}
    #endif
    
        HuAlertStateMceAttributeExtension(VoiceAlertServiceProxyBase& proxy): attributeExtension_(proxy.getHuAlertStateMceAttribute()) {
        }
    
        inline extension_type& getHuAlertStateMceAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace VoiceAlertServiceExtensions

//
// VoiceAlertServiceProxy Implementation
//
template <typename ... _AttributeExtensions>
VoiceAlertServiceProxy<_AttributeExtensions...>::VoiceAlertServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<VoiceAlertServiceProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<VoiceAlertServiceProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
VoiceAlertServiceProxy<_AttributeExtensions...>::~VoiceAlertServiceProxy() {
}

template <typename ... _AttributeExtensions>
void VoiceAlertServiceProxy<_AttributeExtensions...>::setHuHMISelection(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huTypeofAlert, const bool &_alertStatus, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huAlertType, bool &_status, const CommonAPI::CallInfo *_info) {
    if (!_huTypeofAlert.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setHuHMISelection(_huTypeofAlert, _alertStatus, _internalCallStatus, _huAlertType, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VoiceAlertServiceProxy<_AttributeExtensions...>::setHuHMISelectionAsync(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huTypeofAlert, const bool &_alertStatus, SetHuHMISelectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_huTypeofAlert.validate()) {
        ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum huAlertType = ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum::En_Voice__Text_Alert;
        bool status = false;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, huAlertType, status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setHuHMISelectionAsync(_huTypeofAlert, _alertStatus, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &VoiceAlertServiceProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool VoiceAlertServiceProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool VoiceAlertServiceProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& VoiceAlertServiceProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& VoiceAlertServiceProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace VoiceAlert
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::VoiceAlert::VoiceAlertServiceProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::VoiceAlert::VoiceAlertServiceProxy<
            ::v0::com::harman::VoiceAlert::VoiceAlertServiceExtensions::CurDriveModeSigAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::VoiceAlert::VoiceAlertServiceExtensions::HuAlertStateAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::VoiceAlert::VoiceAlertServiceExtensions::HuAlertHMISelectionAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::VoiceAlert::VoiceAlertServiceExtensions::HuInfoFeaturePresenceAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::VoiceAlert::VoiceAlertServiceExtensions::HuAlertStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::VoiceAlert::VoiceAlertServiceExtensions::VasStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::VoiceAlert::VoiceAlertServiceExtensions::HuAlertStateMceAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_PROXY_HPP_
