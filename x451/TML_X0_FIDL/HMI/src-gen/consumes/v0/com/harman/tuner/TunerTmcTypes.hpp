/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Tuner TMC data type collection.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2017
 */
#ifndef V0_COM_HARMAN_TUNER_Tuner_Tmc_Types_HPP_
#define V0_COM_HARMAN_TUNER_Tuner_Tmc_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace tuner {

struct TunerTmcTypes {
    
    struct DeviceType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AMFM = 0,
            DAB = 1,
            SDARS = 2
        };
        
        DeviceType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AMFM)) {}
        DeviceType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AMFM):
                case static_cast<int32_t>(Literal::DAB):
                case static_cast<int32_t>(Literal::SDARS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DeviceType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DeviceType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DeviceType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DeviceType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DeviceType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DeviceType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct CurrentStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            STAT_NOT_READY = 0,
            STAT_NOT_APPLICABLE = 1,
            STAT_OFF = 2,
            STAT_NO_TMC = 3,
            STAT_NO_TMC_WITH_FILTER = 4,
            STAT_OK = 5
        };
        
        CurrentStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::STAT_NOT_READY)) {}
        CurrentStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::STAT_NOT_READY):
                case static_cast<int32_t>(Literal::STAT_NOT_APPLICABLE):
                case static_cast<int32_t>(Literal::STAT_OFF):
                case static_cast<int32_t>(Literal::STAT_NO_TMC):
                case static_cast<int32_t>(Literal::STAT_NO_TMC_WITH_FILTER):
                case static_cast<int32_t>(Literal::STAT_OK):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CurrentStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CurrentStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CurrentStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CurrentStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CurrentStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CurrentStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct MaskElement : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MASK_PID = 1,
            MASK_SID = 2,
            MASK_MGS = 4,
            MASK_CC = 8,
            MASK_LT = 16,
            MASK_BSA = 32,
            MASK_ST = 64,
            MASK_QUAL = 128,
            MASK_DELETE = 32768
        };
        
        MaskElement() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MASK_PID)) {}
        MaskElement(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MASK_PID):
                case static_cast<int32_t>(Literal::MASK_SID):
                case static_cast<int32_t>(Literal::MASK_MGS):
                case static_cast<int32_t>(Literal::MASK_CC):
                case static_cast<int32_t>(Literal::MASK_LT):
                case static_cast<int32_t>(Literal::MASK_BSA):
                case static_cast<int32_t>(Literal::MASK_ST):
                case static_cast<int32_t>(Literal::MASK_QUAL):
                case static_cast<int32_t>(Literal::MASK_DELETE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const MaskElement &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const MaskElement &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const MaskElement &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const MaskElement &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const MaskElement &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const MaskElement &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct TunerRole : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ROLE_FG = 0,
            ROLE_FG_PHD = 1,
            ROLE_BG = 2
        };
        
        TunerRole() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ROLE_FG)) {}
        TunerRole(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ROLE_FG):
                case static_cast<int32_t>(Literal::ROLE_FG_PHD):
                case static_cast<int32_t>(Literal::ROLE_BG):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TunerRole &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TunerRole &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TunerRole &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TunerRole &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TunerRole &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TunerRole &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Current device / TMC status of specific device
     */
    struct DeviceStatus : CommonAPI::Struct<DeviceType, CurrentStatus> {
    	
    	DeviceStatus() {
    	}
    	DeviceStatus(const DeviceType &_device, const CurrentStatus &_status)
    	{
    		std::get<0>(values_) = _device;
    		std::get<1>(values_) = _status;
    	}
    	/**
    	 * description: TMC tuner device
    	 */
    	inline const DeviceType &getDevice() const { return std::get<0>(values_); }
    	inline void setDevice(const DeviceType &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Current device / TMC status
    	 */
    	inline const CurrentStatus &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const CurrentStatus &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const DeviceStatus& _other) const {
                return (getDevice() == _other.getDevice() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const DeviceStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Unique TMC service identification data for filtering (some attributes maybe
     *   unused for specific devices)
     */
    struct FilterData : CommonAPI::Struct<DeviceType, uint32_t, uint16_t, uint8_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t> {
    	
    	FilterData() {
    	}
    	FilterData(const DeviceType &_device, const uint32_t &_programId, const uint16_t &_serviceId, const uint8_t &_messageGeoScope, const uint16_t &_countryCode, const uint8_t &_locationTable, const uint16_t &_broadcastServiceArea, const uint8_t &_serviceType, const uint8_t &_quality)
    	{
    		std::get<0>(values_) = _device;
    		std::get<1>(values_) = _programId;
    		std::get<2>(values_) = _serviceId;
    		std::get<3>(values_) = _messageGeoScope;
    		std::get<4>(values_) = _countryCode;
    		std::get<5>(values_) = _locationTable;
    		std::get<6>(values_) = _broadcastServiceArea;
    		std::get<7>(values_) = _serviceType;
    		std::get<8>(values_) = _quality;
    	}
    	/**
    	 * description: TMC tuner device
    	 */
    	inline const DeviceType &getDevice() const { return std::get<0>(values_); }
    	inline void setDevice(const DeviceType &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Program ID: e.g. PI in case of AM/FM, combination of SID, EnsID, ECC for DAB
    	 */
    	inline const uint32_t &getProgramId() const { return std::get<1>(values_); }
    	inline void setProgramId(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: TMC service ID: As the service provider is not necessarily identical to the
    	 *   broadcaster, a unique service identifier is used.
    	 */
    	inline const uint16_t &getServiceId() const { return std::get<2>(values_); }
    	inline void setServiceId(const uint16_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Message geographical scope: Indicate the geographical relevance of the RDS-TMC
    	 *   service (international  / national / regional / urban). This is an important
    	 *   feature for selection of a service. For local trips users are much more
    	 *   interested in listening to a TMC-service providing them with urban and/or
    	 *   regional traffic information. Users intending to make a long, perhaps
    	 *   international, trip would like to get their information from a TMC-service
    	 *   broadcasting national and international  traffic information.
    	 */
    	inline const uint8_t &getMessageGeoScope() const { return std::get<3>(values_); }
    	inline void setMessageGeoScope(const uint8_t &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: Country code (16 Bit to be prepared for ECC if necessary)
    	 */
    	inline const uint16_t &getCountryCode() const { return std::get<4>(values_); }
    	inline void setCountryCode(const uint16_t &_value) { std::get<4>(values_) = _value; }
    	/**
    	 * description: Location table number
    	 */
    	inline const uint8_t &getLocationTable() const { return std::get<5>(values_); }
    	inline void setLocationTable(const uint8_t &_value) { std::get<5>(values_) = _value; }
    	/**
    	 * description: Broadcast service area: Specifies a geographic area contained within a a
    	 *   location table (TMC service provider specific).
    	 */
    	inline const uint16_t &getBroadcastServiceArea() const { return std::get<6>(values_); }
    	inline void setBroadcastServiceArea(const uint16_t &_value) { std::get<6>(values_) = _value; }
    	/**
    	 * description: Service type (0: Alert C, 1: Alert C and Alert Plus)
    	 */
    	inline const uint8_t &getServiceType() const { return std::get<7>(values_); }
    	inline void setServiceType(const uint8_t &_value) { std::get<7>(values_) = _value; }
    	/**
    	 * description: Quality value (bad) 0-255 (excellent)
    	 */
    	inline const uint8_t &getQuality() const { return std::get<8>(values_); }
    	inline void setQuality(const uint8_t &_value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const FilterData& _other) const {
                return (getDevice() == _other.getDevice() && getProgramId() == _other.getProgramId() && getServiceId() == _other.getServiceId() && getMessageGeoScope() == _other.getMessageGeoScope() && getCountryCode() == _other.getCountryCode() && getLocationTable() == _other.getLocationTable() && getBroadcastServiceArea() == _other.getBroadcastServiceArea() && getServiceType() == _other.getServiceType() && getQuality() == _other.getQuality());
        }
    	inline bool operator!=(const FilterData &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Current active filter element
     */
    struct Filter : CommonAPI::Struct<uint8_t, uint32_t, FilterData> {
    	
    	Filter() {
    	}
    	Filter(const uint8_t &_number, const uint32_t &_mask, const FilterData &_data)
    	{
    		std::get<0>(values_) = _number;
    		std::get<1>(values_) = _mask;
    		std::get<2>(values_) = _data;
    	}
    	/**
    	 * description: Filter number (unique for a device), 0xFF deletes all filters.
    	 */
    	inline const uint8_t &getNumber() const { return std::get<0>(values_); }
    	inline void setNumber(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: For interpretation use / refer to MaskElement enumeration
    	 */
    	inline const uint32_t &getMask() const { return std::get<1>(values_); }
    	inline void setMask(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Corresponding filter settings
    	 */
    	inline const FilterData &getData() const { return std::get<2>(values_); }
    	inline void setData(const FilterData &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const Filter& _other) const {
                return (getNumber() == _other.getNumber() && getMask() == _other.getMask() && getData() == _other.getData());
        }
    	inline bool operator!=(const Filter &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: TMC service data
     */
    struct Service : CommonAPI::Struct<FilterData, std::string, std::string, std::string> {
    	
    	Service() {
    	}
    	Service(const FilterData &_filterData, const std::string &_name, const std::string &_abbreviation, const std::string &_provider)
    	{
    		std::get<0>(values_) = _filterData;
    		std::get<1>(values_) = _name;
    		std::get<2>(values_) = _abbreviation;
    		std::get<3>(values_) = _provider;
    	}
    	/**
    	 * description: Unique TMC service identification data for filtering
    	 */
    	inline const FilterData &getFilterData() const { return std::get<0>(values_); }
    	inline void setFilterData(const FilterData &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Station name
    	 */
    	inline const std::string &getName() const { return std::get<1>(values_); }
    	inline void setName(const std::string &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Station abbreviation
    	 */
    	inline const std::string &getAbbreviation() const { return std::get<2>(values_); }
    	inline void setAbbreviation(const std::string &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Provider name
    	 */
    	inline const std::string &getProvider() const { return std::get<3>(values_); }
    	inline void setProvider(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Service& _other) const {
                return (getFilterData() == _other.getFilterData() && getName() == _other.getName() && getAbbreviation() == _other.getAbbreviation() && getProvider() == _other.getProvider());
        }
    	inline bool operator!=(const Service &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Detailed status of one single tuner
     */
    struct SingleTunerStatus : CommonAPI::Struct<uint8_t, TunerRole, int8_t, CurrentStatus, Service> {
    	
    	SingleTunerStatus() {
    	}
    	SingleTunerStatus(const uint8_t &_tunerNumber, const TunerRole &_tunerRole, const int8_t &_filterNumber, const CurrentStatus &_status, const Service &_service)
    	{
    		std::get<0>(values_) = _tunerNumber;
    		std::get<1>(values_) = _tunerRole;
    		std::get<2>(values_) = _filterNumber;
    		std::get<3>(values_) = _status;
    		std::get<4>(values_) = _service;
    	}
    	/**
    	 * description: Tuner number (1, 2, ...)
    	 */
    	inline const uint8_t &getTunerNumber() const { return std::get<0>(values_); }
    	inline void setTunerNumber(const uint8_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Tuner role
    	 */
    	inline const TunerRole &getTunerRole() const { return std::get<1>(values_); }
    	inline void setTunerRole(const TunerRole &_value) { std::get<1>(values_) = _value; }
    	/**
    	 * description: Processing filter number (-1: no filter e.g. audio foreground tuner tuned to no
    	 *   TMC station or not desired/filtered TMC station)
    	 */
    	inline const int8_t &getFilterNumber() const { return std::get<2>(values_); }
    	inline void setFilterNumber(const int8_t &_value) { std::get<2>(values_) = _value; }
    	/**
    	 * description: Tuner/filter specific status
    	 */
    	inline const CurrentStatus &getStatus() const { return std::get<3>(values_); }
    	inline void setStatus(const CurrentStatus &_value) { std::get<3>(values_) = _value; }
    	/**
    	 * description: Currently tuned service
    	 */
    	inline const Service &getService() const { return std::get<4>(values_); }
    	inline void setService(const Service &_value) { std::get<4>(values_) = _value; }
    	inline bool operator==(const SingleTunerStatus& _other) const {
                return (getTunerNumber() == _other.getTunerNumber() && getTunerRole() == _other.getTunerRole() && getFilterNumber() == _other.getFilterNumber() && getStatus() == _other.getStatus() && getService() == _other.getService());
        }
    	inline bool operator!=(const SingleTunerStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: Vector of SingleTunerStatus
     */
    typedef std::vector<TunerTmcTypes::SingleTunerStatus> TunerStatus;
    /**
     * description: Detailed device / TMC status of specific device
     */
    struct DetailedDeviceStatus : CommonAPI::Struct<DeviceType, TunerStatus> {
    	
    	DetailedDeviceStatus() {
    	}
    	DetailedDeviceStatus(const DeviceType &_device, const TunerStatus &_status)
    	{
    		std::get<0>(values_) = _device;
    		std::get<1>(values_) = _status;
    	}
    	/**
    	 * description: TMC tuner device
    	 */
    	inline const DeviceType &getDevice() const { return std::get<0>(values_); }
    	inline void setDevice(const DeviceType &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Detailed tuner status (per dedicated tuner)
    	 */
    	inline const TunerStatus &getStatus() const { return std::get<1>(values_); }
    	inline void setStatus(const TunerStatus &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const DetailedDeviceStatus& _other) const {
                return (getDevice() == _other.getDevice() && getStatus() == _other.getStatus());
        }
    	inline bool operator!=(const DetailedDeviceStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    /**
     * description: DeviceStatus vector
     */
    typedef std::vector<TunerTmcTypes::DeviceStatus> Status;
    /**
     * description: Service vector
     */
    typedef std::vector<TunerTmcTypes::Service> Services;
    /**
     * description: Filter vector
     */
    typedef std::vector<TunerTmcTypes::Filter> Filters;
    /**
     * description: Vector of SingleTunerStatus
     */
    typedef std::vector<TunerTmcTypes::DetailedDeviceStatus> DetailedStatus;



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.tuner.TunerTmcTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct TunerTmcTypes

} // namespace tuner
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for DeviceType
    template<>
    struct hash<::v0::com::harman::tuner::TunerTmcTypes::DeviceType> {
        inline size_t operator()(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType& deviceType) const {
            return static_cast<int32_t>(deviceType);
        }
    };
    //Hash for CurrentStatus
    template<>
    struct hash<::v0::com::harman::tuner::TunerTmcTypes::CurrentStatus> {
        inline size_t operator()(const ::v0::com::harman::tuner::TunerTmcTypes::CurrentStatus& currentStatus) const {
            return static_cast<int32_t>(currentStatus);
        }
    };
    //Hash for MaskElement
    template<>
    struct hash<::v0::com::harman::tuner::TunerTmcTypes::MaskElement> {
        inline size_t operator()(const ::v0::com::harman::tuner::TunerTmcTypes::MaskElement& maskElement) const {
            return static_cast<int32_t>(maskElement);
        }
    };
    //Hash for TunerRole
    template<>
    struct hash<::v0::com::harman::tuner::TunerTmcTypes::TunerRole> {
        inline size_t operator()(const ::v0::com::harman::tuner::TunerTmcTypes::TunerRole& tunerRole) const {
            return static_cast<int32_t>(tunerRole);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_TUNER_Tuner_Tmc_Types_HPP_
