/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_PARKASSIST_PDC_Service_PROXY_BASE_HPP_
#define V0_COM_HARMAN_PARKASSIST_PDC_Service_PROXY_BASE_HPP_

#include <v0/com/harman/ParkAssist/PDCService.hpp>


#include <v1/com/harman/ParkAssist/ParkAssistBaseType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace ParkAssist {

class PDCServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::RvcFault_enum> RvcFaultAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::Pdc_RvcFault_enum> Pdc_rvcFaultAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::RvcOverlayType_enum> RvcOverlayTypeAttribute;
    typedef CommonAPI::ObservableAttribute<bool> HmiNotificationAttribute;
    typedef CommonAPI::ObservableAttribute<bool> RvcBackCameraAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::reverseStatus> ReverseGearStatusAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcPresence_enum> PdcPresence_enAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::enAudioZoneState> AudioZoneStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::TailgateStateStatus_enum> TailgateStateStatus_enumAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::RevGearStatus_enum> RevGearStatus_enumAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint16_t> PDcHuProxRearSensStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkBrkState_enum> ParkBrkState_enumAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuFaultState_enum> PDcHuFaultState_enumAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuAudioZoneState_enum> PDcHuAudioZoneState_enumAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<uint32_t> PDcHuVisualZoneRearSensStateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcVariant_enum> PDcVariant_enumAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuRearTone_enum> PDcHuRearTone_enumAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcHuRearNoOfSen_enum> PDcHuRearNoOfSen_enumAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<double> SAsAngEPASAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::SAsAngEPAsDir_enum> SAsAngEPAsDir_enumAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::PDcRearToneReq_enum> PDcRearToneReq_enumAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::HuPDcReqType_enum> HuPDcReqType_enumAttribute;
    typedef CommonAPI::ObservableAttribute<uint8_t> PDcOnDelayTimerAttribute;
    typedef CommonAPI::ObservableAttribute<uint8_t> PDcToneVolumeAttribute;
    typedef CommonAPI::ObservableAttribute<uint8_t> RvcBrightnessAttribute;
    typedef CommonAPI::ObservableAttribute<uint8_t> RvcContrastAttribute;
    typedef CommonAPI::ObservableAttribute<uint8_t> RvcColorSaturationAttribute;
    typedef CommonAPI::ObservableAttribute<uint8_t> RvcGamaAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::pdcsettingErrorUpdate> PdcsettingUpdateAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::ParkAssist::ParkAssistBaseType::ParkAssistVariant_enum> ParkAssistVariant_enumAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&)> ParkFactoryResetAsyncCallback;

    /**
     * description: this attribute define for only rvcfault information
     */
    virtual RvcFaultAttribute& getRvcFaultAttribute() = 0;
    /**
     * description: attributes define for pdc and rvc fault information
     */
    virtual Pdc_rvcFaultAttribute& getPdc_rvcFaultAttribute() = 0;
    /**
     * description: attribute define for type of overlay
     */
    virtual RvcOverlayTypeAttribute& getRvcOverlayTypeAttribute() = 0;
    /**
     * description: define to update hmi notification
     */
    virtual HmiNotificationAttribute& getHmiNotificationAttribute() = 0;
    /**
     * description: define to show reverse gear status for AME Command
     */
    virtual RvcBackCameraAttribute& getRvcBackCameraAttribute() = 0;
    /**
     * description: define to update reverse gear status
     */
    virtual ReverseGearStatusAttribute& getReverseGearStatusAttribute() = 0;
    /**
     * description: define to pdc presence is available or not
     */
    virtual PdcPresence_enAttribute& getPdcPresence_enAttribute() = 0;
    /**
     * description: define to update audio zone state
     */
    virtual AudioZoneStateAttribute& getAudioZoneStateAttribute() = 0;
    /**
     * description: provide a tailgate status
     */
    virtual TailgateStateStatus_enumAttribute& getTailgateStateStatus_enumAttribute() = 0;
    /**
     * description: define to update reverse gear status
     */
    virtual RevGearStatus_enumAttribute& getRevGearStatus_enumAttribute() = 0;
    /**
     * description: define to update rear sensor state
     */
    virtual PDcHuProxRearSensStateAttribute& getPDcHuProxRearSensStateAttribute() = 0;
    /**
     * description: update parkbrake state
     */
    virtual ParkBrkState_enumAttribute& getParkBrkState_enumAttribute() = 0;
    /**
     * description: define to update only pdc fault information
     */
    virtual PDcHuFaultState_enumAttribute& getPDcHuFaultState_enumAttribute() = 0;
    /**
     * description: define to update pdc audio zone state
     */
    virtual PDcHuAudioZoneState_enumAttribute& getPDcHuAudioZoneState_enumAttribute() = 0;
    /**
     * description: define to update only pdc visual zone state
     */
    virtual PDcHuVisualZoneRearSensStateAttribute& getPDcHuVisualZoneRearSensStateAttribute() = 0;
    /**
     * description: define to update only pdc variant
     */
    virtual PDcVariant_enumAttribute& getPDcVariant_enumAttribute() = 0;
    /**
     * description: define to update pdc rear tone
     */
    virtual PDcHuRearTone_enumAttribute& getPDcHuRearTone_enumAttribute() = 0;
    /**
     * description: define to update number of sensor
     */
    virtual PDcHuRearNoOfSen_enumAttribute& getPDcHuRearNoOfSen_enumAttribute() = 0;
    /**
     * description: define to update steering wheel angle
     */
    virtual SAsAngEPASAttribute& getSAsAngEPASAttribute() = 0;
    /**
     * description: define to update steering wheel direction
     */
    virtual SAsAngEPAsDir_enumAttribute& getSAsAngEPAsDir_enumAttribute() = 0;
    /**
     * description: define to update tone type
     */
    virtual PDcRearToneReq_enumAttribute& getPDcRearToneReq_enumAttribute() = 0;
    /**
     * description: Define to update type of pdc request
     */
    virtual HuPDcReqType_enumAttribute& getHuPDcReqType_enumAttribute() = 0;
    /**
     * description: define to update Pdc delay timer
     */
    virtual PDcOnDelayTimerAttribute& getPDcOnDelayTimerAttribute() = 0;
    /**
     * description: define to update pdc tone volume
     */
    virtual PDcToneVolumeAttribute& getPDcToneVolumeAttribute() = 0;
    /**
     * description: define to rvc brightness
     */
    virtual RvcBrightnessAttribute& getRvcBrightnessAttribute() = 0;
    /**
     * description: define to update rvc contrast
     */
    virtual RvcContrastAttribute& getRvcContrastAttribute() = 0;
    /**
     * description: define to update color staturation
     */
    virtual RvcColorSaturationAttribute& getRvcColorSaturationAttribute() = 0;
    /**
     * description: define to update gama value
     */
    virtual RvcGamaAttribute& getRvcGamaAttribute() = 0;
    /**
     * description: define to update pdc setting Error
     */
    virtual PdcsettingUpdateAttribute& getPdcsettingUpdateAttribute() = 0;
    /**
     * description: define to update parkassist variant
     */
    virtual ParkAssistVariant_enumAttribute& getParkAssistVariant_enumAttribute() = 0;


    /**
     * description: This method is used to reset pdc setting
     */
    virtual void ParkFactoryReset(const uint16_t &_type, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ParkFactoryResetAsync(const uint16_t &_type, ParkFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace ParkAssist
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_PARKASSIST_PDC_Service_PROXY_BASE_HPP_
