/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DRIVEPRO_drive_Pro_Type_Collection_HPP_
#define V0_COM_HARMAN_DRIVEPRO_drive_Pro_Type_Collection_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace drivepro {

struct driveProTypeCollection {
    
    struct eReturnStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SUCCESS = 0,
            FAILURE = -1
        };
        
        eReturnStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SUCCESS)) {}
        eReturnStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::FAILURE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eReturnStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eReturnStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eReturnStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eReturnStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eReturnStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eReturnStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTripType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TRIP_A = 0,
            TRIP_B = 1,
            OVERALL_TRIP = 2,
            CURRENT_TRIP = 3,
            LAST_TRIP = 4,
            BEST_TRIP = 5,
            ALL_TRIP = 6
        };
        
        eTripType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TRIP_A)) {}
        eTripType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TRIP_A):
                case static_cast<int32_t>(Literal::TRIP_B):
                case static_cast<int32_t>(Literal::OVERALL_TRIP):
                case static_cast<int32_t>(Literal::CURRENT_TRIP):
                case static_cast<int32_t>(Literal::LAST_TRIP):
                case static_cast<int32_t>(Literal::BEST_TRIP):
                case static_cast<int32_t>(Literal::ALL_TRIP):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTripType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTripType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTripType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTripType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTripType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTripType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eRequestType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TRIP_A_RESET = 0,
            TRIP_B_RESET = 1,
            TRIP_OVERALL_RESET = 2,
            TRIP_ALL_RESET = 3
        };
        
        eRequestType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TRIP_A_RESET)) {}
        eRequestType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TRIP_A_RESET):
                case static_cast<int32_t>(Literal::TRIP_B_RESET):
                case static_cast<int32_t>(Literal::TRIP_OVERALL_RESET):
                case static_cast<int32_t>(Literal::TRIP_ALL_RESET):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eRequestType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eRequestType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eRequestType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eRequestType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eRequestType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eRequestType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eLoggingType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            LOGGING_INTERNAL = 0,
            LOGGING_USB = 1,
            UNKNOWN = 3
        };
        
        eLoggingType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::LOGGING_INTERNAL)) {}
        eLoggingType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::LOGGING_INTERNAL):
                case static_cast<int32_t>(Literal::LOGGING_USB):
                case static_cast<int32_t>(Literal::UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eLoggingType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eLoggingType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eLoggingType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eLoggingType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eLoggingType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eLoggingType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eDbugLevel : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DISABLE = 0,
            VERBOSE_LEVEL = 1,
            DEBUG_LEVEL = 2,
            ERROR_LEVEL = 3
        };
        
        eDbugLevel() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DISABLE)) {}
        eDbugLevel(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DISABLE):
                case static_cast<int32_t>(Literal::VERBOSE_LEVEL):
                case static_cast<int32_t>(Literal::DEBUG_LEVEL):
                case static_cast<int32_t>(Literal::ERROR_LEVEL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDbugLevel &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDbugLevel &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDbugLevel &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDbugLevel &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDbugLevel &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDbugLevel &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eTxmnVariant : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            MANUAL_TXMN = 0,
            AUTOMATED_MANUAL_TXMN = 1,
            AUTOMATIC_TXMN = 2,
            RESERVED = 3
        };
        
        eTxmnVariant() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::MANUAL_TXMN)) {}
        eTxmnVariant(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::MANUAL_TXMN):
                case static_cast<int32_t>(Literal::AUTOMATED_MANUAL_TXMN):
                case static_cast<int32_t>(Literal::AUTOMATIC_TXMN):
                case static_cast<int32_t>(Literal::RESERVED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eTxmnVariant &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eTxmnVariant &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eTxmnVariant &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eTxmnVariant &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eTxmnVariant &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eTxmnVariant &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eSignalNames : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CURRENTTRIP_FUELECOINSTRATING = 0,
            CURRENTTRIP_FUELECOCUMRATING = 1,
            CURRENTTRIP_TOTALTIME_ENGINEIDLE = 2,
            CURRENTTRIP_IDLETIME = 3,
            CURRENTTRIP_IDLETIMEPER = 4,
            CURRENTTRIP_TOTALFUELIDLE = 5,
            CURRENTTRIP_TOTALTIME_RPMEFFINFO = 6,
            CURRENTTRIP_TOTALDIST = 7,
            CURRENTTRIP_EFF_RPMTIMEAMBER = 8,
            CURRENTTRIP_EFF_RPMTIMEAMBERPER = 9,
            CURRENTTRIP_EFF_RPMTIMEGREEN = 10,
            CURRENTTRIP_EFF_RPMTIMEGREENPER = 11,
            CURRENTTRIP_EFF_RPMTIMERED = 12,
            CURRENTTRIP_EFF_RPMTIMEREDPER = 13,
            CURRENTTRIP_EFF_RPMDISTAMBER = 14,
            CURRENTTRIP_EFF_RPMDISTAMBERPER = 15,
            CURRENTTRIP_EFF_RPMDISTGREEN = 16,
            CURRENTTRIP_EFF_RPMDISTGREENPER = 17,
            CURRENTTRIP_EFF_RPMDISTRED = 18,
            CURRENTTRIP_EFF_RPMDISTREDPER = 19,
            CURRENTTRIP_AVGENG_RPM = 20,
            CURRENTTRIP_TOTALTIME_ACON = 21,
            CURRENTTRIP_AC_ONTIME = 22,
            CURRENTTRIP_AC_ONTIMEPER = 23,
            CURRENTTRIP_TOTALTIME_CLT_ACC = 24,
            CURRENTTRIP_CLT_ACCTIME = 25,
            CURRENTTRIP_CLT_ACCTIMEPER = 26,
            CURRENTTRIP_BRKINSTRATING = 27,
            CURRENTTRIP_ACCLN = 28,
            CURRENTTRIP_NOOFBRKCYCLE = 29,
            CURRENTTRIP_BRKCUMRATING = 30,
            CURRENTTRIP_TOTALBRK = 31,
            CURRENTTRIP_NORMALBRK = 32,
            CURRENTTRIP_NORMALBRKPER = 33,
            CURRENTTRIP_MODERATEBRK = 34,
            CURRENTTRIP_MODERATEBRKPER = 35,
            CURRENTTRIP_HEAVYBRK = 36,
            CURRENTTRIP_HEAVYBRKPER = 37,
            CURRENTTRIP_PANICBRK = 38,
            CURRENTTRIP_PANICBRKPER = 39,
            CURRENTTRIP_HARSHBRK = 40,
            CURRENTTRIP_HARSHBRKPER = 41,
            CURRENTTRIP_AVGBRKCOUNT = 42,
            CURRENTTRIP_ODODISTPERTRIP_BRAKING = 43,
            CURRENTTRIP_ACCINSTRATING = 44,
            CURRENTTRIP_ACCCUMRATING = 45,
            CURRENTTRIP_TOTALTRAVELTIME = 46,
            CURRENTTRIP_TOTALACCPEDALPRESSTIME = 47,
            CURRENTTRIP_ACCPEDALPRESSRANGE1 = 48,
            CURRENTTRIP_ACCPEDALPRESSRANGE1PER = 49,
            CURRENTTRIP_ACCPEDALPRESSRANGE2 = 50,
            CURRENTTRIP_ACCPEDALPRESSRANGE2PER = 51,
            CURRENTTRIP_ACCPEDALPRESSRANGE3 = 52,
            CURRENTTRIP_ACCPEDALPRESSRANGE3PER = 53,
            CURRENTTRIP_ACCPEDALPRESSRANGE4 = 54,
            CURRENTTRIP_ACCPEDALPRESSRANGE4PER = 55,
            CURRENTTRIP_ACCPEDALPRESSNO = 56,
            CURRENTTRIP_ACCPEDALPRESNOPER = 57,
            CURRENTTRIP_AVGACCPEDALPOS = 58,
            CURRENTTRIP_ACCHARSHCOUNT = 59,
            CURRENTTRIP_VEHICLE_TXMNVARIANT = 60,
            CURRENTTRIP_GSINSTRATING = 61,
            CURRENTTRIP_GSCUMRATING = 62,
            CURRENTTRIP_TOTALDISTVALIDGEAR_GEARSHIFT = 63,
            CURRENTTRIP_TOTALTIMEVALIDGEAR_GEARSHIFT = 64,
            CURRENTTRIP_TIMEGEAR1 = 65,
            CURRENTTRIP_DISTGEAR1 = 66,
            CURRENTTRIP_TIMEGEAR1PER = 67,
            CURRENTTRIP_DISTGEAR1PER = 68,
            CURRENTTRIP_TIMEGEAR2 = 69,
            CURRENTTRIP_DISTGEAR2 = 70,
            CURRENTTRIP_TIMEGEAR2PER = 71,
            CURRENTTRIP_DISTGEAR2PER = 72,
            CURRENTTRIP_TIMEGEAR3 = 73,
            CURRENTTRIP_DISTGEAR3 = 74,
            CURRENTTRIP_TIMEGEAR3PER = 75,
            CURRENTTRIP_DISTGEAR3PER = 76,
            CURRENTTRIP_TIMEGEAR4 = 77,
            CURRENTTRIP_DISTGEAR4 = 78,
            CURRENTTRIP_TIMEGEAR4PER = 79,
            CURRENTTRIP_DISTGEAR4PER = 80,
            CURRENTTRIP_TIMEGEAR5 = 81,
            CURRENTTRIP_DISTGEAR5 = 82,
            CURRENTTRIP_TIMEGEAR5PER = 83,
            CURRENTTRIP_DISTGEAR5PER = 84,
            CURRENTTRIP_TIMEGEAR6 = 85,
            CURRENTTRIP_DISTGEAR6 = 86,
            CURRENTTRIP_TIMEGEAR6PER = 87,
            CURRENTTRIP_DISTGEAR6PER = 88,
            CURRENTTRIP_MOSTTIMEGEAR = 89,
            CURRENTTRIP_TOTALDISTVALIDGEAR = 90,
            CURRENTTRIP_TOTALDISTWRONGGEAR = 91,
            CURRENTTRIP_TOTALDISTDOWNINDI = 92,
            CURRENTTRIP_TOTALDISTUPINDI = 93,
            CURRENTTRIP_AVGDISTWRONGINDI = 94,
            CURRENTTRIP_AVGDISTDOWNINDI = 95,
            CURRENTTRIP_AVGDISTUPINDI = 96,
            CURRENTTRIP_TOTALDISTWRONGGEARPER = 97,
            CURRENTTRIP_TOTALDISTDOWNINDIPER = 98,
            CURRENTTRIP_TOTALDISTUPINDIPER = 99,
            CURRENTTRIP_TOTALTIMEVALIDGEAR = 100,
            CURRENTTRIP_TOTALTIMEWRONGGEAR = 101,
            CURRENTTRIP_TOTALTIMEDOWNINDI = 102,
            CURRENTTRIP_TOTALTIMEUPINDI = 103,
            CURRENTTRIP_TOTALTIMEWRONGGEARPER = 104,
            CURRENTTRIP_TOTALTIMEDOWNINDIPER = 105,
            CURRENTTRIP_TOTALTIMEUPINDIPER = 106,
            CURRENTTRIP_TOTALCOUNTWRONGGEAR = 107,
            CURRENTTRIP_TOTALCOUNTDOWNINDI = 108,
            CURRENTTRIP_TOTALCOUNTUPINDI = 109,
            CURRENTTRIP_TOTALCOUNTDOWNINDIPER = 110,
            CURRENTTRIP_TOTALCOUNTUPINDIPER = 111,
            CURRENTTRIP_AVGCOUNTUPINDI = 112,
            CURRENTTRIP_AVGCOUNTDOWNINDI = 113,
            CURRENTTRIP_TOTALTIMECORRECTGEARPER = 114,
            CURRENTTRIP_AVGGEARSHIFT = 115,
            CURRENTTRIP_NOOFGEARSHIFT = 116,
            CURRENTTRIP_ODODISTPERTRIP = 117,
            CURRENTTRIP_TOPSPEED = 118,
            CURRENTTRIP_DRIVEINSTRATING = 119,
            CURRENTTRIP_DRIVECUMURATING = 120,
            CURRENTTRIP_SPEEDBAND1TIME = 121,
            CURRENTTRIP_SPEEDBAND1TIMEPER = 122,
            CURRENTTRIP_SPEEDBAND2TIME = 123,
            CURRENTTRIP_SPEEDBAND2TIMEPER = 124,
            CURRENTTRIP_SPEEDBAND3TIME = 125,
            CURRENTTRIP_SPEEDBAND3TIMEPER = 126,
            CURRENTTRIP_SPEEDBAND4TIME = 127,
            CURRENTTRIP_SPEEDBAND4TIMEPER = 128,
            CURRENTTRIP_TRIPDIST = 129,
            CURRENTTRIP_TRIPDURATION = 130,
            CURRENTTRIP_AVGSPEED = 131,
            CURRENTTRIP_AVGFUELECO = 132,
            CURRENTTRIP_OVERALLINSTRATING = 133,
            CURRENTTRIP_OVERALLCUMURATING = 134,
            CURRENTTRIP_PERTIMEWITHOUTSEATBELT = 135,
            CURRENTTRIP_PERTIMEWITHSEATBELT = 136,
            CURRENTTRIP_SEATBELTFACTOR = 137,
            CURRENTTRIP_NOOFTIMEWITHOUTSEATBELT = 138,
            CURRENTTRIP_NOOFTIMEWITHSEATBELT = 139,
            CURRENTTRIP_NOOFTIMEWITHOUTSEATBELTPER = 140,
            CURRENTTRIP_DOORCLOSETIMEPER = 141,
            CURRENTTRIP_DOOROPENTIMEPER = 142,
            CURRENTTRIP_TIMEHIGHSPEEDCLTBRKPRESSEDPER = 143,
            CURRENTTRIP_TOTALTIMEHIGHSPEEDPER = 144,
            CURRENTTRIP_SRSFACTOR = 145,
            CURRENTTRIP_TEABREAKFACTOR = 146,
            CURRENTTRIP_TRLFACTOR = 147,
            CURRENTTRIP_TLLFACTOR = 148,
            CURRENTTRIP_TBLFACTOR = 149,
            CURRENTTRIP_TFLFACTOR = 150,
            CURRENTTRIP_TPLFACTOR = 151,
            CURRENTTRIP_TRVLFACTOR = 152,
            CURRENTTRIP_BRKFLDFACTOR = 153,
            CURRENTTRIP_OILPRFACTOR = 154,
            CURRENTTRIP_WIFFACTOR = 155,
            CURRENTTRIP_VEHICLEHEALTH = 156,
            CURRENTTRIP_SAFETYINSTRATING = 157,
            CURRENTTRIP_SAFETYCUMRATING = 158,
            TRIPA_FUELECOINSTRATING = 159,
            TRIPA_FUELECOCUMRATING = 160,
            TRIPA_TOTALTIME_ENGINEIDLE = 161,
            TRIPA_IDLETIME = 162,
            TRIPA_IDLETIMEPER = 163,
            TRIPA_TOTALFUELIDLE = 164,
            TRIPA_TOTALTIME_RPMEFFINFO = 165,
            TRIPA_TOTALDIST = 166,
            TRIPA_EFF_RPMTIMEAMBER = 167,
            TRIPA_EFF_RPMTIMEAMBERPER = 168,
            TRIPA_EFF_RPMTIMEGREEN = 169,
            TRIPA_EFF_RPMTIMEGREENPER = 170,
            TRIPA_EFF_RPMTIMERED = 171,
            TRIPA_EFF_RPMTIMEREDPER = 172,
            TRIPA_EFF_RPMDISTAMBER = 173,
            TRIPA_EFF_RPMDISTAMBERPER = 174,
            TRIPA_EFF_RPMDISTGREEN = 175,
            TRIPA_EFF_RPMDISTGREENPER = 176,
            TRIPA_EFF_RPMDISTRED = 177,
            TRIPA_EFF_RPMDISTREDPER = 178,
            TRIPA_AVGENG_RPM = 179,
            TRIPA_TOTALTIME_ACON = 180,
            TRIPA_AC_ONTIME = 181,
            TRIPA_AC_ONTIMEPER = 182,
            TRIPA_TOTALTIME_CLT_ACC = 183,
            TRIPA_CLT_ACCTIME = 184,
            TRIPA_CLT_ACCTIMEPER = 185,
            TRIPA_BRKINSTRATING = 186,
            TRIPA_ACCLN = 187,
            TRIPA_NOOFBRKCYCLE = 188,
            TRIPA_BRKCUMRATING = 189,
            TRIPA_TOTALBRK = 190,
            TRIPA_NORMALBRK = 191,
            TRIPA_NORMALBRKPER = 192,
            TRIPA_MODERATEBRK = 193,
            TRIPA_MODERATEBRKPER = 194,
            TRIPA_HEAVYBRK = 195,
            TRIPA_HEAVYBRKPER = 196,
            TRIPA_PANICBRK = 197,
            TRIPA_PANICBRKPER = 198,
            TRIPA_HARSHBRK = 199,
            TRIPA_HARSHBRKPER = 200,
            TRIPA_AVGBRKCOUNT = 201,
            TRIPA_ODODISTPERTRIP_BRAKING = 202,
            TRIPA_ACCINSTRATING = 203,
            TRIPA_ACCCUMRATING = 204,
            TRIPA_TOTALTRAVELTIME = 205,
            TRIPA_TOTALACCPEDALPRESSTIME = 206,
            TRIPA_ACCPEDALPRESSRANGE1 = 207,
            TRIPA_ACCPEDALPRESSRANGE1PER = 208,
            TRIPA_ACCPEDALPRESSRANGE2 = 209,
            TRIPA_ACCPEDALPRESSRANGE2PER = 210,
            TRIPA_ACCPEDALPRESSRANGE3 = 211,
            TRIPA_ACCPEDALPRESSRANGE3PER = 212,
            TRIPA_ACCPEDALPRESSRANGE4 = 213,
            TRIPA_ACCPEDALPRESSRANGE4PER = 214,
            TRIPA_ACCPEDALPRESSNO = 215,
            TRIPA_ACCPEDALPRESNOPER = 216,
            TRIPA_AVGACCPEDALPOS = 217,
            TRIPA_ACCHARSHCOUNT = 218,
            TRIPA_VEHICLE_TXMNVARIANT = 219,
            TRIPA_GSINSTRATING = 220,
            TRIPA_GSCUMRATING = 221,
            TRIPA_TOTALDISTVALIDGEAR_GEARSHIFT = 222,
            TRIPA_TOTALTIMEVALIDGEAR_GEARSHIFT = 223,
            TRIPA_TIMEGEAR1 = 224,
            TRIPA_DISTGEAR1 = 225,
            TRIPA_TIMEGEAR1PER = 226,
            TRIPA_DISTGEAR1PER = 227,
            TRIPA_TIMEGEAR2 = 228,
            TRIPA_DISTGEAR2 = 229,
            TRIPA_TIMEGEAR2PER = 230,
            TRIPA_DISTGEAR2PER = 231,
            TRIPA_TIMEGEAR3 = 232,
            TRIPA_DISTGEAR3 = 233,
            TRIPA_TIMEGEAR3PER = 234,
            TRIPA_DISTGEAR3PER = 235,
            TRIPA_TIMEGEAR4 = 236,
            TRIPA_DISTGEAR4 = 237,
            TRIPA_TIMEGEAR4PER = 238,
            TRIPA_DISTGEAR4PER = 239,
            TRIPA_TIMEGEAR5 = 240,
            TRIPA_DISTGEAR5 = 241,
            TRIPA_TIMEGEAR5PER = 242,
            TRIPA_DISTGEAR5PER = 243,
            TRIPA_TIMEGEAR6 = 244,
            TRIPA_DISTGEAR6 = 245,
            TRIPA_TIMEGEAR6PER = 246,
            TRIPA_DISTGEAR6PER = 247,
            TRIPA_MOSTTIMEGEAR = 248,
            TRIPA_TOTALDISTVALIDGEAR = 249,
            TRIPA_TOTALDISTWRONGGEAR = 250,
            TRIPA_TOTALDISTDOWNINDI = 251,
            TRIPA_TOTALDISTUPINDI = 252,
            TRIPA_AVGDISTWRONGINDI = 253,
            TRIPA_AVGDISTDOWNINDI = 254,
            TRIPA_AVGDISTUPINDI = 255,
            TRIPA_TOTALDISTWRONGGEARPER = 256,
            TRIPA_TOTALDISTDOWNINDIPER = 257,
            TRIPA_TOTALDISTUPINDIPER = 258,
            TRIPA_TOTALTIMEVALIDGEAR = 259,
            TRIPA_TOTALTIMEWRONGGEAR = 260,
            TRIPA_TOTALTIMEDOWNINDI = 261,
            TRIPA_TOTALTIMEUPINDI = 262,
            TRIPA_TOTALTIMEWRONGGEARPER = 263,
            TRIPA_TOTALTIMEDOWNINDIPER = 264,
            TRIPA_TOTALTIMEUPINDIPER = 265,
            TRIPA_TOTALCOUNTWRONGGEAR = 266,
            TRIPA_TOTALCOUNTDOWNINDI = 267,
            TRIPA_TOTALCOUNTUPINDI = 268,
            TRIPA_TOTALCOUNTDOWNINDIPER = 269,
            TRIPA_TOTALCOUNTUPINDIPER = 270,
            TRIPA_AVGCOUNTUPINDI = 271,
            TRIPA_AVGCOUNTDOWNINDI = 272,
            TRIPA_TOTALTIMECORRECTGEARPER = 273,
            TRIPA_AVGGEARSHIFT = 274,
            TRIPA_NOOFGEARSHIFT = 275,
            TRIPA_ODODISTPERTRIP = 276,
            TRIPA_TOPSPEED = 277,
            TRIPA_DRIVEINSTRATING = 278,
            TRIPA_DRIVECUMURATING = 279,
            TRIPA_SPEEDBAND1TIME = 280,
            TRIPA_SPEEDBAND1TIMEPER = 281,
            TRIPA_SPEEDBAND2TIME = 282,
            TRIPA_SPEEDBAND2TIMEPER = 283,
            TRIPA_SPEEDBAND3TIME = 284,
            TRIPA_SPEEDBAND3TIMEPER = 285,
            TRIPA_SPEEDBAND4TIME = 286,
            TRIPA_SPEEDBAND4TIMEPER = 287,
            TRIPA_TRIPDIST = 288,
            TRIPA_TRIPDURATION = 289,
            TRIPA_AVGSPEED = 290,
            TRIPA_AVGFUELECO = 291,
            TRIPA_OVERALLINSTRATING = 292,
            TRIPA_OVERALLCUMURATING = 293,
            TRIPA_PERTIMEWITHOUTSEATBELT = 294,
            TRIPA_PERTIMEWITHSEATBELT = 295,
            TRIPA_SEATBELTFACTOR = 296,
            TRIPA_NOOFTIMEWITHOUTSEATBELT = 297,
            TRIPA_NOOFTIMEWITHSEATBELT = 298,
            TRIPA_NOOFTIMEWITHOUTSEATBELTPER = 299,
            TRIPA_DOORCLOSETIMEPER = 300,
            TRIPA_DOOROPENTIMEPER = 301,
            TRIPA_TIMEHIGHSPEEDCLTBRKPRESSEDPER = 302,
            TRIPA_TOTALTIMEHIGHSPEEDPER = 303,
            TRIPA_SRSFACTOR = 304,
            TRIPA_TEABREAKFACTOR = 305,
            TRIPA_TRLFACTOR = 306,
            TRIPA_TLLFACTOR = 307,
            TRIPA_TBLFACTOR = 308,
            TRIPA_TFLFACTOR = 309,
            TRIPA_TPLFACTOR = 310,
            TRIPA_TRVLFACTOR = 311,
            TRIPA_BRKFLDFACTOR = 312,
            TRIPA_OILPRFACTOR = 313,
            TRIPA_WIFFACTOR = 314,
            TRIPA_VEHICLEHEALTH = 315,
            TRIPA_SAFETYINSTRATING = 316,
            TRIPA_SAFETYCUMRATING = 317,
            TRIPB_FUELECOINSTRATING = 318,
            TRIPB_FUELECOCUMRATING = 319,
            TRIPB_TOTALTIME_ENGINEIDLE = 320,
            TRIPB_IDLETIME = 321,
            TRIPB_IDLETIMEPER = 322,
            TRIPB_TOTALFUELIDLE = 323,
            TRIPB_TOTALTIME_RPMEFFINFO = 324,
            TRIPB_TOTALDIST = 325,
            TRIPB_EFF_RPMTIMEAMBER = 326,
            TRIPB_EFF_RPMTIMEAMBERPER = 327,
            TRIPB_EFF_RPMTIMEGREEN = 328,
            TRIPB_EFF_RPMTIMEGREENPER = 329,
            TRIPB_EFF_RPMTIMERED = 330,
            TRIPB_EFF_RPMTIMEREDPER = 331,
            TRIPB_EFF_RPMDISTAMBER = 332,
            TRIPB_EFF_RPMDISTAMBERPER = 333,
            TRIPB_EFF_RPMDISTGREEN = 334,
            TRIPB_EFF_RPMDISTGREENPER = 335,
            TRIPB_EFF_RPMDISTRED = 336,
            TRIPB_EFF_RPMDISTREDPER = 337,
            TRIPB_AVGENG_RPM = 338,
            TRIPB_TOTALTIME_ACON = 339,
            TRIPB_AC_ONTIME = 340,
            TRIPB_AC_ONTIMEPER = 341,
            TRIPB_TOTALTIME_CLT_ACC = 342,
            TRIPB_CLT_ACCTIME = 343,
            TRIPB_CLT_ACCTIMEPER = 344,
            TRIPB_BRKINSTRATING = 345,
            TRIPB_ACCLN = 346,
            TRIPB_NOOFBRKCYCLE = 347,
            TRIPB_BRKCUMRATING = 348,
            TRIPB_TOTALBRK = 349,
            TRIPB_NORMALBRK = 350,
            TRIPB_NORMALBRKPER = 351,
            TRIPB_MODERATEBRK = 352,
            TRIPB_MODERATEBRKPER = 353,
            TRIPB_HEAVYBRK = 354,
            TRIPB_HEAVYBRKPER = 355,
            TRIPB_PANICBRK = 356,
            TRIPB_PANICBRKPER = 357,
            TRIPB_HARSHBRK = 358,
            TRIPB_HARSHBRKPER = 359,
            TRIPB_AVGBRKCOUNT = 360,
            TRIPB_ODODISTPERTRIP_BRAKING = 361,
            TRIPB_ACCINSTRATING = 362,
            TRIPB_ACCCUMRATING = 363,
            TRIPB_TOTALTRAVELTIME = 364,
            TRIPB_TOTALACCPEDALPRESSTIME = 365,
            TRIPB_ACCPEDALPRESSRANGE1 = 366,
            TRIPB_ACCPEDALPRESSRANGE1PER = 367,
            TRIPB_ACCPEDALPRESSRANGE2 = 368,
            TRIPB_ACCPEDALPRESSRANGE2PER = 369,
            TRIPB_ACCPEDALPRESSRANGE3 = 370,
            TRIPB_ACCPEDALPRESSRANGE3PER = 371,
            TRIPB_ACCPEDALPRESSRANGE4 = 372,
            TRIPB_ACCPEDALPRESSRANGE4PER = 373,
            TRIPB_ACCPEDALPRESSNO = 374,
            TRIPB_ACCPEDALPRESNOPER = 375,
            TRIPB_AVGACCPEDALPOS = 376,
            TRIPB_ACCHARSHCOUNT = 377,
            TRIPB_VEHICLE_TXMNVARIANT = 378,
            TRIPB_GSINSTRATING = 379,
            TRIPB_GSCUMRATING = 380,
            TRIPB_TOTALDISTVALIDGEAR_GEARSHIFT = 381,
            TRIPB_TOTALTIMEVALIDGEAR_GEARSHIFT = 382,
            TRIPB_TIMEGEAR1 = 383,
            TRIPB_DISTGEAR1 = 384,
            TRIPB_TIMEGEAR1PER = 385,
            TRIPB_DISTGEAR1PER = 386,
            TRIPB_TIMEGEAR2 = 387,
            TRIPB_DISTGEAR2 = 388,
            TRIPB_TIMEGEAR2PER = 389,
            TRIPB_DISTGEAR2PER = 390,
            TRIPB_TIMEGEAR3 = 391,
            TRIPB_DISTGEAR3 = 392,
            TRIPB_TIMEGEAR3PER = 393,
            TRIPB_DISTGEAR3PER = 394,
            TRIPB_TIMEGEAR4 = 395,
            TRIPB_DISTGEAR4 = 396,
            TRIPB_TIMEGEAR4PER = 397,
            TRIPB_DISTGEAR4PER = 398,
            TRIPB_TIMEGEAR5 = 399,
            TRIPB_DISTGEAR5 = 400,
            TRIPB_TIMEGEAR5PER = 401,
            TRIPB_DISTGEAR5PER = 402,
            TRIPB_TIMEGEAR6 = 403,
            TRIPB_DISTGEAR6 = 404,
            TRIPB_TIMEGEAR6PER = 405,
            TRIPB_DISTGEAR6PER = 406,
            TRIPB_MOSTTIMEGEAR = 407,
            TRIPB_TOTALDISTVALIDGEAR = 408,
            TRIPB_TOTALDISTWRONGGEAR = 409,
            TRIPB_TOTALDISTDOWNINDI = 410,
            TRIPB_TOTALDISTUPINDI = 411,
            TRIPB_AVGDISTWRONGINDI = 412,
            TRIPB_AVGDISTDOWNINDI = 413,
            TRIPB_AVGDISTUPINDI = 414,
            TRIPB_TOTALDISTWRONGGEARPER = 415,
            TRIPB_TOTALDISTDOWNINDIPER = 416,
            TRIPB_TOTALDISTUPINDIPER = 417,
            TRIPB_TOTALTIMEVALIDGEAR = 418,
            TRIPB_TOTALTIMEWRONGGEAR = 419,
            TRIPB_TOTALTIMEDOWNINDI = 420,
            TRIPB_TOTALTIMEUPINDI = 421,
            TRIPB_TOTALTIMEWRONGGEARPER = 422,
            TRIPB_TOTALTIMEDOWNINDIPER = 423,
            TRIPB_TOTALTIMEUPINDIPER = 424,
            TRIPB_TOTALCOUNTWRONGGEAR = 425,
            TRIPB_TOTALCOUNTDOWNINDI = 426,
            TRIPB_TOTALCOUNTUPINDI = 427,
            TRIPB_TOTALCOUNTDOWNINDIPER = 428,
            TRIPB_TOTALCOUNTUPINDIPER = 429,
            TRIPB_AVGCOUNTUPINDI = 430,
            TRIPB_AVGCOUNTDOWNINDI = 431,
            TRIPB_TOTALTIMECORRECTGEARPER = 432,
            TRIPB_AVGGEARSHIFT = 433,
            TRIPB_NOOFGEARSHIFT = 434,
            TRIPB_ODODISTPERTRIP = 435,
            TRIPB_TOPSPEED = 436,
            TRIPB_DRIVEINSTRATING = 437,
            TRIPB_DRIVECUMURATING = 438,
            TRIPB_SPEEDBAND1TIME = 439,
            TRIPB_SPEEDBAND1TIMEPER = 440,
            TRIPB_SPEEDBAND2TIME = 441,
            TRIPB_SPEEDBAND2TIMEPER = 442,
            TRIPB_SPEEDBAND3TIME = 443,
            TRIPB_SPEEDBAND3TIMEPER = 444,
            TRIPB_SPEEDBAND4TIME = 445,
            TRIPB_SPEEDBAND4TIMEPER = 446,
            TRIPB_TRIPDIST = 447,
            TRIPB_TRIPDURATION = 448,
            TRIPB_AVGSPEED = 449,
            TRIPB_AVGFUELECO = 450,
            TRIPB_OVERALLINSTRATING = 451,
            TRIPB_OVERALLCUMURATING = 452,
            TRIPB_PERTIMEWITHOUTSEATBELT = 453,
            TRIPB_PERTIMEWITHSEATBELT = 454,
            TRIPB_SEATBELTFACTOR = 455,
            TRIPB_NOOFTIMEWITHOUTSEATBELT = 456,
            TRIPB_NOOFTIMEWITHSEATBELT = 457,
            TRIPB_NOOFTIMEWITHOUTSEATBELTPER = 458,
            TRIPB_DOORCLOSETIMEPER = 459,
            TRIPB_DOOROPENTIMEPER = 460,
            TRIPB_TIMEHIGHSPEEDCLTBRKPRESSEDPER = 461,
            TRIPB_TOTALTIMEHIGHSPEEDPER = 462,
            TRIPB_SRSFACTOR = 463,
            TRIPB_TEABREAKFACTOR = 464,
            TRIPB_TRLFACTOR = 465,
            TRIPB_TLLFACTOR = 466,
            TRIPB_TBLFACTOR = 467,
            TRIPB_TFLFACTOR = 468,
            TRIPB_TPLFACTOR = 469,
            TRIPB_TRVLFACTOR = 470,
            TRIPB_BRKFLDFACTOR = 471,
            TRIPB_OILPRFACTOR = 472,
            TRIPB_WIFFACTOR = 473,
            TRIPB_VEHICLEHEALTH = 474,
            TRIPB_SAFETYINSTRATING = 475,
            TRIPB_SAFETYCUMRATING = 476,
            OVERALLTRIP_FUELECOINSTRATING = 477,
            OVERALLTRIP_FUELECOCUMRATING = 478,
            OVERALLTRIP_TOTALTIME_ENGINEIDLE = 479,
            OVERALLTRIP_IDLETIME = 480,
            OVERALLTRIP_IDLETIMEPER = 481,
            OVERALLTRIP_TOTALFUELIDLE = 482,
            OVERALLTRIP_TOTALTIME_RPMEFFINFO = 483,
            OVERALLTRIP_TOTALDIST = 484,
            OVERALLTRIP_EFF_RPMTIMEAMBER = 485,
            OVERALLTRIP_EFF_RPMTIMEAMBERPER = 486,
            OVERALLTRIP_EFF_RPMTIMEGREEN = 487,
            OVERALLTRIP_EFF_RPMTIMEGREENPER = 488,
            OVERALLTRIP_EFF_RPMTIMERED = 489,
            OVERALLTRIP_EFF_RPMTIMEREDPER = 490,
            OVERALLTRIP_EFF_RPMDISTAMBER = 491,
            OVERALLTRIP_EFF_RPMDISTAMBERPER = 492,
            OVERALLTRIP_EFF_RPMDISTGREEN = 493,
            OVERALLTRIP_EFF_RPMDISTGREENPER = 494,
            OVERALLTRIP_EFF_RPMDISTRED = 495,
            OVERALLTRIP_EFF_RPMDISTREDPER = 496,
            OVERALLTRIP_AVGENG_RPM = 497,
            OVERALLTRIP_TOTALTIME_ACON = 498,
            OVERALLTRIP_AC_ONTIME = 499,
            OVERALLTRIP_AC_ONTIMEPER = 500,
            OVERALLTRIP_TOTALTIME_CLT_ACC = 501,
            OVERALLTRIP_CLT_ACCTIME = 502,
            OVERALLTRIP_CLT_ACCTIMEPER = 503,
            OVERALLTRIP_BRKINSTRATING = 504,
            OVERALLTRIP_ACCLN = 505,
            OVERALLTRIP_NOOFBRKCYCLE = 506,
            OVERALLTRIP_BRKCUMRATING = 507,
            OVERALLTRIP_TOTALBRK = 508,
            OVERALLTRIP_NORMALBRK = 509,
            OVERALLTRIP_NORMALBRKPER = 510,
            OVERALLTRIP_MODERATEBRK = 511,
            OVERALLTRIP_MODERATEBRKPER = 512,
            OVERALLTRIP_HEAVYBRK = 513,
            OVERALLTRIP_HEAVYBRKPER = 514,
            OVERALLTRIP_PANICBRK = 515,
            OVERALLTRIP_PANICBRKPER = 516,
            OVERALLTRIP_HARSHBRK = 517,
            OVERALLTRIP_HARSHBRKPER = 518,
            OVERALLTRIP_AVGBRKCOUNT = 519,
            OVERALLTRIP_ODODISTPERTRIP_BRAKING = 520,
            OVERALLTRIP_ACCINSTRATING = 521,
            OVERALLTRIP_ACCCUMRATING = 522,
            OVERALLTRIP_TOTALTRAVELTIME = 523,
            OVERALLTRIP_TOTALACCPEDALPRESSTIME = 524,
            OVERALLTRIP_ACCPEDALPRESSRANGE1 = 525,
            OVERALLTRIP_ACCPEDALPRESSRANGE1PER = 526,
            OVERALLTRIP_ACCPEDALPRESSRANGE2 = 527,
            OVERALLTRIP_ACCPEDALPRESSRANGE2PER = 528,
            OVERALLTRIP_ACCPEDALPRESSRANGE3 = 529,
            OVERALLTRIP_ACCPEDALPRESSRANGE3PER = 530,
            OVERALLTRIP_ACCPEDALPRESSRANGE4 = 531,
            OVERALLTRIP_ACCPEDALPRESSRANGE4PER = 532,
            OVERALLTRIP_ACCPEDALPRESSNO = 533,
            OVERALLTRIP_ACCPEDALPRESNOPER = 534,
            OVERALLTRIP_AVGACCPEDALPOS = 535,
            OVERALLTRIP_ACCHARSHCOUNT = 536,
            OVERALLTRIP_VEHICLE_TXMNVARIANT = 537,
            OVERALLTRIP_GSINSTRATING = 538,
            OVERALLTRIP_GSCUMRATING = 539,
            OVERALLTRIP_TOTALDISTVALIDGEAR_GEARSHIFT = 540,
            OVERALLTRIP_TOTALTIMEVALIDGEAR_GEARSHIFT = 541,
            OVERALLTRIP_TIMEGEAR1 = 542,
            OVERALLTRIP_DISTGEAR1 = 543,
            OVERALLTRIP_TIMEGEAR1PER = 544,
            OVERALLTRIP_DISTGEAR1PER = 545,
            OVERALLTRIP_TIMEGEAR2 = 546,
            OVERALLTRIP_DISTGEAR2 = 547,
            OVERALLTRIP_TIMEGEAR2PER = 548,
            OVERALLTRIP_DISTGEAR2PER = 549,
            OVERALLTRIP_TIMEGEAR3 = 550,
            OVERALLTRIP_DISTGEAR3 = 551,
            OVERALLTRIP_TIMEGEAR3PER = 552,
            OVERALLTRIP_DISTGEAR3PER = 553,
            OVERALLTRIP_TIMEGEAR4 = 554,
            OVERALLTRIP_DISTGEAR4 = 555,
            OVERALLTRIP_TIMEGEAR4PER = 556,
            OVERALLTRIP_DISTGEAR4PER = 557,
            OVERALLTRIP_TIMEGEAR5 = 558,
            OVERALLTRIP_DISTGEAR5 = 559,
            OVERALLTRIP_TIMEGEAR5PER = 560,
            OVERALLTRIP_DISTGEAR5PER = 561,
            OVERALLTRIP_TIMEGEAR6 = 562,
            OVERALLTRIP_DISTGEAR6 = 563,
            OVERALLTRIP_TIMEGEAR6PER = 564,
            OVERALLTRIP_DISTGEAR6PER = 565,
            OVERALLTRIP_MOSTTIMEGEAR = 566,
            OVERALLTRIP_TOTALDISTVALIDGEAR = 567,
            OVERALLTRIP_TOTALDISTWRONGGEAR = 568,
            OVERALLTRIP_TOTALDISTDOWNINDI = 569,
            OVERALLTRIP_TOTALDISTUPINDI = 570,
            OVERALLTRIP_AVGDISTWRONGINDI = 571,
            OVERALLTRIP_AVGDISTDOWNINDI = 572,
            OVERALLTRIP_AVGDISTUPINDI = 573,
            OVERALLTRIP_TOTALDISTWRONGGEARPER = 574,
            OVERALLTRIP_TOTALDISTDOWNINDIPER = 575,
            OVERALLTRIP_TOTALDISTUPINDIPER = 576,
            OVERALLTRIP_TOTALTIMEVALIDGEAR = 577,
            OVERALLTRIP_TOTALTIMEWRONGGEAR = 578,
            OVERALLTRIP_TOTALTIMEDOWNINDI = 579,
            OVERALLTRIP_TOTALTIMEUPINDI = 580,
            OVERALLTRIP_TOTALTIMEWRONGGEARPER = 581,
            OVERALLTRIP_TOTALTIMEDOWNINDIPER = 582,
            OVERALLTRIP_TOTALTIMEUPINDIPER = 583,
            OVERALLTRIP_TOTALCOUNTWRONGGEAR = 584,
            OVERALLTRIP_TOTALCOUNTDOWNINDI = 585,
            OVERALLTRIP_TOTALCOUNTUPINDI = 586,
            OVERALLTRIP_TOTALCOUNTDOWNINDIPER = 587,
            OVERALLTRIP_TOTALCOUNTUPINDIPER = 588,
            OVERALLTRIP_AVGCOUNTUPINDI = 589,
            OVERALLTRIP_AVGCOUNTDOWNINDI = 590,
            OVERALLTRIP_TOTALTIMECORRECTGEARPER = 591,
            OVERALLTRIP_AVGGEARSHIFT = 592,
            OVERALLTRIP_NOOFGEARSHIFT = 593,
            OVERALLTRIP_ODODISTPERTRIP = 594,
            OVERALLTRIP_TOPSPEED = 595,
            OVERALLTRIP_DRIVEINSTRATING = 596,
            OVERALLTRIP_DRIVECUMURATING = 597,
            OVERALLTRIP_SPEEDBAND1TIME = 598,
            OVERALLTRIP_SPEEDBAND1TIMEPER = 599,
            OVERALLTRIP_SPEEDBAND2TIME = 600,
            OVERALLTRIP_SPEEDBAND2TIMEPER = 601,
            OVERALLTRIP_SPEEDBAND3TIME = 602,
            OVERALLTRIP_SPEEDBAND3TIMEPER = 603,
            OVERALLTRIP_SPEEDBAND4TIME = 604,
            OVERALLTRIP_SPEEDBAND4TIMEPER = 605,
            OVERALLTRIP_TRIPDIST = 606,
            OVERALLTRIP_TRIPDURATION = 607,
            OVERALLTRIP_AVGSPEED = 608,
            OVERALLTRIP_AVGFUELECO = 609,
            OVERALLTRIP_OVERALLINSTRATING = 610,
            OVERALLTRIP_OVERALLCUMURATING = 611,
            OVERALLTRIP_PERTIMEWITHOUTSEATBELT = 612,
            OVERALLTRIP_PERTIMEWITHSEATBELT = 613,
            OVERALLTRIP_SEATBELTFACTOR = 614,
            OVERALLTRIP_NOOFTIMEWITHOUTSEATBELT = 615,
            OVERALLTRIP_NOOFTIMEWITHSEATBELT = 616,
            OVERALLTRIP_NOOFTIMEWITHOUTSEATBELTPER = 617,
            OVERALLTRIP_DOORCLOSETIMEPER = 618,
            OVERALLTRIP_DOOROPENTIMEPER = 619,
            OVERALLTRIP_TIMEHIGHSPEEDCLTBRKPRESSEDPER = 620,
            OVERALLTRIP_TOTALTIMEHIGHSPEEDPER = 621,
            OVERALLTRIP_SRSFACTOR = 622,
            OVERALLTRIP_TEABREAKFACTOR = 623,
            OVERALLTRIP_TRLFACTOR = 624,
            OVERALLTRIP_TLLFACTOR = 625,
            OVERALLTRIP_TBLFACTOR = 626,
            OVERALLTRIP_TFLFACTOR = 627,
            OVERALLTRIP_TPLFACTOR = 628,
            OVERALLTRIP_TRVLFACTOR = 629,
            OVERALLTRIP_BRKFLDFACTOR = 630,
            OVERALLTRIP_OILPRFACTOR = 631,
            OVERALLTRIP_WIFFACTOR = 632,
            OVERALLTRIP_VEHICLEHEALTH = 633,
            OVERALLTRIP_SAFETYINSTRATING = 634,
            OVERALLTRIP_SAFETYCUMRATING = 635,
            BESTTRIP_FUELECOINSTRATING = 636,
            BESTTRIP_FUELECOCUMRATING = 637,
            BESTTRIP_TOTALTIME_ENGINEIDLE = 638,
            BESTTRIP_IDLETIME = 639,
            BESTTRIP_IDLETIMEPER = 640,
            BESTTRIP_TOTALFUELIDLE = 641,
            BESTTRIP_TOTALTIME_RPMEFFINFO = 642,
            BESTTRIP_TOTALDIST = 643,
            BESTTRIP_EFF_RPMTIMEAMBER = 644,
            BESTTRIP_EFF_RPMTIMEAMBERPER = 645,
            BESTTRIP_EFF_RPMTIMEGREEN = 646,
            BESTTRIP_EFF_RPMTIMEGREENPER = 647,
            BESTTRIP_EFF_RPMTIMERED = 648,
            BESTTRIP_EFF_RPMTIMEREDPER = 649,
            BESTTRIP_EFF_RPMDISTAMBER = 650,
            BESTTRIP_EFF_RPMDISTAMBERPER = 651,
            BESTTRIP_EFF_RPMDISTGREEN = 652,
            BESTTRIP_EFF_RPMDISTGREENPER = 653,
            BESTTRIP_EFF_RPMDISTRED = 654,
            BESTTRIP_EFF_RPMDISTREDPER = 655,
            BESTTRIP_AVGENG_RPM = 656,
            BESTTRIP_TOTALTIME_ACON = 657,
            BESTTRIP_AC_ONTIME = 658,
            BESTTRIP_AC_ONTIMEPER = 659,
            BESTTRIP_TOTALTIME_CLT_ACC = 660,
            BESTTRIP_CLT_ACCTIME = 661,
            BESTTRIP_CLT_ACCTIMEPER = 662,
            BESTTRIP_BRKINSTRATING = 663,
            BESTTRIP_ACCLN = 664,
            BESTTRIP_NOOFBRKCYCLE = 665,
            BESTTRIP_BRKCUMRATING = 666,
            BESTTRIP_TOTALBRK = 667,
            BESTTRIP_NORMALBRK = 668,
            BESTTRIP_NORMALBRKPER = 669,
            BESTTRIP_MODERATEBRK = 670,
            BESTTRIP_MODERATEBRKPER = 671,
            BESTTRIP_HEAVYBRK = 672,
            BESTTRIP_HEAVYBRKPER = 673,
            BESTTRIP_PANICBRK = 674,
            BESTTRIP_PANICBRKPER = 675,
            BESTTRIP_HARSHBRK = 676,
            BESTTRIP_HARSHBRKPER = 677,
            BESTTRIP_AVGBRKCOUNT = 678,
            BESTTRIP_ODODISTPERTRIP_BRAKING = 679,
            BESTTRIP_ACCINSTRATING = 680,
            BESTTRIP_ACCCUMRATING = 681,
            BESTTRIP_TOTALTRAVELTIME = 682,
            BESTTRIP_TOTALACCPEDALPRESSTIME = 683,
            BESTTRIP_ACCPEDALPRESSRANGE1 = 684,
            BESTTRIP_ACCPEDALPRESSRANGE1PER = 685,
            BESTTRIP_ACCPEDALPRESSRANGE2 = 686,
            BESTTRIP_ACCPEDALPRESSRANGE2PER = 687,
            BESTTRIP_ACCPEDALPRESSRANGE3 = 688,
            BESTTRIP_ACCPEDALPRESSRANGE3PER = 689,
            BESTTRIP_ACCPEDALPRESSRANGE4 = 690,
            BESTTRIP_ACCPEDALPRESSRANGE4PER = 691,
            BESTTRIP_ACCPEDALPRESSNO = 692,
            BESTTRIP_ACCPEDALPRESNOPER = 693,
            BESTTRIP_AVGACCPEDALPOS = 694,
            BESTTRIP_ACCHARSHCOUNT = 695,
            BESTTRIP_VEHICLE_TXMNVARIANT = 696,
            BESTTRIP_GSINSTRATING = 697,
            BESTTRIP_GSCUMRATING = 698,
            BESTTRIP_TOTALDISTVALIDGEAR_GEARSHIFT = 699,
            BESTTRIP_TOTALTIMEVALIDGEAR_GEARSHIFT = 700,
            BESTTRIP_TIMEGEAR1 = 701,
            BESTTRIP_DISTGEAR1 = 702,
            BESTTRIP_TIMEGEAR1PER = 703,
            BESTTRIP_DISTGEAR1PER = 704,
            BESTTRIP_TIMEGEAR2 = 705,
            BESTTRIP_DISTGEAR2 = 706,
            BESTTRIP_TIMEGEAR2PER = 707,
            BESTTRIP_DISTGEAR2PER = 708,
            BESTTRIP_TIMEGEAR3 = 709,
            BESTTRIP_DISTGEAR3 = 710,
            BESTTRIP_TIMEGEAR3PER = 711,
            BESTTRIP_DISTGEAR3PER = 712,
            BESTTRIP_TIMEGEAR4 = 713,
            BESTTRIP_DISTGEAR4 = 714,
            BESTTRIP_TIMEGEAR4PER = 715,
            BESTTRIP_DISTGEAR4PER = 716,
            BESTTRIP_TIMEGEAR5 = 717,
            BESTTRIP_DISTGEAR5 = 718,
            BESTTRIP_TIMEGEAR5PER = 719,
            BESTTRIP_DISTGEAR5PER = 720,
            BESTTRIP_TIMEGEAR6 = 721,
            BESTTRIP_DISTGEAR6 = 722,
            BESTTRIP_TIMEGEAR6PER = 723,
            BESTTRIP_DISTGEAR6PER = 724,
            BESTTRIP_MOSTTIMEGEAR = 725,
            BESTTRIP_TOTALDISTVALIDGEAR = 726,
            BESTTRIP_TOTALDISTWRONGGEAR = 727,
            BESTTRIP_TOTALDISTDOWNINDI = 728,
            BESTTRIP_TOTALDISTUPINDI = 729,
            BESTTRIP_AVGDISTWRONGINDI = 730,
            BESTTRIP_AVGDISTDOWNINDI = 731,
            BESTTRIP_AVGDISTUPINDI = 732,
            BESTTRIP_TOTALDISTWRONGGEARPER = 733,
            BESTTRIP_TOTALDISTDOWNINDIPER = 734,
            BESTTRIP_TOTALDISTUPINDIPER = 735,
            BESTTRIP_TOTALTIMEVALIDGEAR = 736,
            BESTTRIP_TOTALTIMEWRONGGEAR = 737,
            BESTTRIP_TOTALTIMEDOWNINDI = 738,
            BESTTRIP_TOTALTIMEUPINDI = 739,
            BESTTRIP_TOTALTIMEWRONGGEARPER = 740,
            BESTTRIP_TOTALTIMEDOWNINDIPER = 741,
            BESTTRIP_TOTALTIMEUPINDIPER = 742,
            BESTTRIP_TOTALCOUNTWRONGGEAR = 743,
            BESTTRIP_TOTALCOUNTDOWNINDI = 744,
            BESTTRIP_TOTALCOUNTUPINDI = 745,
            BESTTRIP_TOTALCOUNTDOWNINDIPER = 746,
            BESTTRIP_TOTALCOUNTUPINDIPER = 747,
            BESTTRIP_AVGCOUNTUPINDI = 748,
            BESTTRIP_AVGCOUNTDOWNINDI = 749,
            BESTTRIP_TOTALTIMECORRECTGEARPER = 750,
            BESTTRIP_AVGGEARSHIFT = 751,
            BESTTRIP_NOOFGEARSHIFT = 752,
            BESTTRIP_ODODISTPERTRIP = 753,
            BESTTRIP_TOPSPEED = 754,
            BESTTRIP_DRIVEINSTRATING = 755,
            BESTTRIP_DRIVECUMURATING = 756,
            BESTTRIP_SPEEDBAND1TIME = 757,
            BESTTRIP_SPEEDBAND1TIMEPER = 758,
            BESTTRIP_SPEEDBAND2TIME = 759,
            BESTTRIP_SPEEDBAND2TIMEPER = 760,
            BESTTRIP_SPEEDBAND3TIME = 761,
            BESTTRIP_SPEEDBAND3TIMEPER = 762,
            BESTTRIP_SPEEDBAND4TIME = 763,
            BESTTRIP_SPEEDBAND4TIMEPER = 764,
            BESTTRIP_TRIPDIST = 765,
            BESTTRIP_TRIPDURATION = 766,
            BESTTRIP_AVGSPEED = 767,
            BESTTRIP_AVGFUELECO = 768,
            BESTTRIP_OVERALLINSTRATING = 769,
            BESTTRIP_OVERALLCUMURATING = 770,
            BESTTRIP_PERTIMEWITHOUTSEATBELT = 771,
            BESTTRIP_PERTIMEWITHSEATBELT = 772,
            BESTTRIP_SEATBELTFACTOR = 773,
            BESTTRIP_NOOFTIMEWITHOUTSEATBELT = 774,
            BESTTRIP_NOOFTIMEWITHSEATBELT = 775,
            BESTTRIP_NOOFTIMEWITHOUTSEATBELTPER = 776,
            BESTTRIP_DOORCLOSETIMEPER = 777,
            BESTTRIP_DOOROPENTIMEPER = 778,
            BESTTRIP_TIMEHIGHSPEEDCLTBRKPRESSEDPER = 779,
            BESTTRIP_TOTALTIMEHIGHSPEEDPER = 780,
            BESTTRIP_SRSFACTOR = 781,
            BESTTRIP_TEABREAKFACTOR = 782,
            BESTTRIP_TRLFACTOR = 783,
            BESTTRIP_TLLFACTOR = 784,
            BESTTRIP_TBLFACTOR = 785,
            BESTTRIP_TFLFACTOR = 786,
            BESTTRIP_TPLFACTOR = 787,
            BESTTRIP_TRVLFACTOR = 788,
            BESTTRIP_BRKFLDFACTOR = 789,
            BESTTRIP_OILPRFACTOR = 790,
            BESTTRIP_WIFFACTOR = 791,
            BESTTRIP_VEHICLEHEALTH = 792,
            BESTTRIP_SAFETYINSTRATING = 793,
            BESTTRIP_SAFETYCUMRATING = 794,
            LASTTRIP_FUELECOINSTRATING = 795,
            LASTTRIP_FUELECOCUMRATING = 796,
            LASTTRIP_TOTALTIME_ENGINEIDLE = 797,
            LASTTRIP_IDLETIME = 798,
            LASTTRIP_IDLETIMEPER = 799,
            LASTTRIP_TOTALFUELIDLE = 800,
            LASTTRIP_TOTALTIME_RPMEFFINFO = 801,
            LASTTRIP_TOTALDIST = 802,
            LASTTRIP_EFF_RPMTIMEAMBER = 803,
            LASTTRIP_EFF_RPMTIMEAMBERPER = 804,
            LASTTRIP_EFF_RPMTIMEGREEN = 805,
            LASTTRIP_EFF_RPMTIMEGREENPER = 806,
            LASTTRIP_EFF_RPMTIMERED = 807,
            LASTTRIP_EFF_RPMTIMEREDPER = 808,
            LASTTRIP_EFF_RPMDISTAMBER = 809,
            LASTTRIP_EFF_RPMDISTAMBERPER = 810,
            LASTTRIP_EFF_RPMDISTGREEN = 811,
            LASTTRIP_EFF_RPMDISTGREENPER = 812,
            LASTTRIP_EFF_RPMDISTRED = 813,
            LASTTRIP_EFF_RPMDISTREDPER = 814,
            LASTTRIP_AVGENG_RPM = 815,
            LASTTRIP_TOTALTIME_ACON = 816,
            LASTTRIP_AC_ONTIME = 817,
            LASTTRIP_AC_ONTIMEPER = 818,
            LASTTRIP_TOTALTIME_CLT_ACC = 819,
            LASTTRIP_CLT_ACCTIME = 820,
            LASTTRIP_CLT_ACCTIMEPER = 821,
            LASTTRIP_BRKINSTRATING = 822,
            LASTTRIP_ACCLN = 823,
            LASTTRIP_NOOFBRKCYCLE = 824,
            LASTTRIP_BRKCUMRATING = 825,
            LASTTRIP_TOTALBRK = 826,
            LASTTRIP_NORMALBRK = 827,
            LASTTRIP_NORMALBRKPER = 828,
            LASTTRIP_MODERATEBRK = 829,
            LASTTRIP_MODERATEBRKPER = 830,
            LASTTRIP_HEAVYBRK = 831,
            LASTTRIP_HEAVYBRKPER = 832,
            LASTTRIP_PANICBRK = 833,
            LASTTRIP_PANICBRKPER = 834,
            LASTTRIP_HARSHBRK = 835,
            LASTTRIP_HARSHBRKPER = 836,
            LASTTRIP_AVGBRKCOUNT = 837,
            LASTTRIP_ODODISTPERTRIP_BRAKING = 838,
            LASTTRIP_ACCINSTRATING = 839,
            LASTTRIP_ACCCUMRATING = 840,
            LASTTRIP_TOTALTRAVELTIME = 841,
            LASTTRIP_TOTALACCPEDALPRESSTIME = 842,
            LASTTRIP_ACCPEDALPRESSRANGE1 = 843,
            LASTTRIP_ACCPEDALPRESSRANGE1PER = 844,
            LASTTRIP_ACCPEDALPRESSRANGE2 = 845,
            LASTTRIP_ACCPEDALPRESSRANGE2PER = 846,
            LASTTRIP_ACCPEDALPRESSRANGE3 = 847,
            LASTTRIP_ACCPEDALPRESSRANGE3PER = 848,
            LASTTRIP_ACCPEDALPRESSRANGE4 = 849,
            LASTTRIP_ACCPEDALPRESSRANGE4PER = 850,
            LASTTRIP_ACCPEDALPRESSNO = 851,
            LASTTRIP_ACCPEDALPRESNOPER = 852,
            LASTTRIP_AVGACCPEDALPOS = 853,
            LASTTRIP_ACCHARSHCOUNT = 854,
            LASTTRIP_VEHICLE_TXMNVARIANT = 855,
            LASTTRIP_GSINSTRATING = 856,
            LASTTRIP_GSCUMRATING = 857,
            LASTTRIP_TOTALDISTVALIDGEAR_GEARSHIFT = 858,
            LASTTRIP_TOTALTIMEVALIDGEAR_GEARSHIFT = 859,
            LASTTRIP_TIMEGEAR1 = 860,
            LASTTRIP_DISTGEAR1 = 861,
            LASTTRIP_TIMEGEAR1PER = 862,
            LASTTRIP_DISTGEAR1PER = 863,
            LASTTRIP_TIMEGEAR2 = 864,
            LASTTRIP_DISTGEAR2 = 865,
            LASTTRIP_TIMEGEAR2PER = 866,
            LASTTRIP_DISTGEAR2PER = 867,
            LASTTRIP_TIMEGEAR3 = 868,
            LASTTRIP_DISTGEAR3 = 869,
            LASTTRIP_TIMEGEAR3PER = 870,
            LASTTRIP_DISTGEAR3PER = 871,
            LASTTRIP_TIMEGEAR4 = 872,
            LASTTRIP_DISTGEAR4 = 873,
            LASTTRIP_TIMEGEAR4PER = 874,
            LASTTRIP_DISTGEAR4PER = 875,
            LASTTRIP_TIMEGEAR5 = 876,
            LASTTRIP_DISTGEAR5 = 877,
            LASTTRIP_TIMEGEAR5PER = 878,
            LASTTRIP_DISTGEAR5PER = 879,
            LASTTRIP_TIMEGEAR6 = 880,
            LASTTRIP_DISTGEAR6 = 881,
            LASTTRIP_TIMEGEAR6PER = 882,
            LASTTRIP_DISTGEAR6PER = 883,
            LASTTRIP_MOSTTIMEGEAR = 884,
            LASTTRIP_TOTALDISTVALIDGEAR = 885,
            LASTTRIP_TOTALDISTWRONGGEAR = 886,
            LASTTRIP_TOTALDISTDOWNINDI = 887,
            LASTTRIP_TOTALDISTUPINDI = 888,
            LASTTRIP_AVGDISTWRONGINDI = 889,
            LASTTRIP_AVGDISTDOWNINDI = 890,
            LASTTRIP_AVGDISTUPINDI = 891,
            LASTTRIP_TOTALDISTWRONGGEARPER = 892,
            LASTTRIP_TOTALDISTDOWNINDIPER = 893,
            LASTTRIP_TOTALDISTUPINDIPER = 894,
            LASTTRIP_TOTALTIMEVALIDGEAR = 895,
            LASTTRIP_TOTALTIMEWRONGGEAR = 896,
            LASTTRIP_TOTALTIMEDOWNINDI = 897,
            LASTTRIP_TOTALTIMEUPINDI = 898,
            LASTTRIP_TOTALTIMEWRONGGEARPER = 899,
            LASTTRIP_TOTALTIMEDOWNINDIPER = 900,
            LASTTRIP_TOTALTIMEUPINDIPER = 901,
            LASTTRIP_TOTALCOUNTWRONGGEAR = 902,
            LASTTRIP_TOTALCOUNTDOWNINDI = 903,
            LASTTRIP_TOTALCOUNTUPINDI = 904,
            LASTTRIP_TOTALCOUNTDOWNINDIPER = 905,
            LASTTRIP_TOTALCOUNTUPINDIPER = 906,
            LASTTRIP_AVGCOUNTUPINDI = 907,
            LASTTRIP_AVGCOUNTDOWNINDI = 908,
            LASTTRIP_TOTALTIMECORRECTGEARPER = 909,
            LASTTRIP_AVGGEARSHIFT = 910,
            LASTTRIP_NOOFGEARSHIFT = 911,
            LASTTRIP_ODODISTPERTRIP = 912,
            LASTTRIP_TOPSPEED = 913,
            LASTTRIP_DRIVEINSTRATING = 914,
            LASTTRIP_DRIVECUMURATING = 915,
            LASTTRIP_SPEEDBAND1TIME = 916,
            LASTTRIP_SPEEDBAND1TIMEPER = 917,
            LASTTRIP_SPEEDBAND2TIME = 918,
            LASTTRIP_SPEEDBAND2TIMEPER = 919,
            LASTTRIP_SPEEDBAND3TIME = 920,
            LASTTRIP_SPEEDBAND3TIMEPER = 921,
            LASTTRIP_SPEEDBAND4TIME = 922,
            LASTTRIP_SPEEDBAND4TIMEPER = 923,
            LASTTRIP_TRIPDIST = 924,
            LASTTRIP_TRIPDURATION = 925,
            LASTTRIP_AVGSPEED = 926,
            LASTTRIP_AVGFUELECO = 927,
            LASTTRIP_OVERALLINSTRATING = 928,
            LASTTRIP_OVERALLCUMURATING = 929,
            LASTTRIP_PERTIMEWITHOUTSEATBELT = 930,
            LASTTRIP_PERTIMEWITHSEATBELT = 931,
            LASTTRIP_SEATBELTFACTOR = 932,
            LASTTRIP_NOOFTIMEWITHOUTSEATBELT = 933,
            LASTTRIP_NOOFTIMEWITHSEATBELT = 934,
            LASTTRIP_NOOFTIMEWITHOUTSEATBELTPER = 935,
            LASTTRIP_DOORCLOSETIMEPER = 936,
            LASTTRIP_DOOROPENTIMEPER = 937,
            LASTTRIP_TIMEHIGHSPEEDCLTBRKPRESSEDPER = 938,
            LASTTRIP_TOTALTIMEHIGHSPEEDPER = 939,
            LASTTRIP_SRSFACTOR = 940,
            LASTTRIP_TEABREAKFACTOR = 941,
            LASTTRIP_TRLFACTOR = 942,
            LASTTRIP_TLLFACTOR = 943,
            LASTTRIP_TBLFACTOR = 944,
            LASTTRIP_TFLFACTOR = 945,
            LASTTRIP_TPLFACTOR = 946,
            LASTTRIP_TRVLFACTOR = 947,
            LASTTRIP_BRKFLDFACTOR = 948,
            LASTTRIP_OILPRFACTOR = 949,
            LASTTRIP_WIFFACTOR = 950,
            LASTTRIP_VEHICLEHEALTH = 951,
            LASTTRIP_SAFETYINSTRATING = 952,
            LASTTRIP_SAFETYCUMRATING = 953,
            TOTAL_COUNT = 954,
            UNKONWN = -1
        };
        
        eSignalNames() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CURRENTTRIP_FUELECOINSTRATING)) {}
        eSignalNames(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CURRENTTRIP_FUELECOINSTRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_FUELECOCUMRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIME_ENGINEIDLE):
                case static_cast<int32_t>(Literal::CURRENTTRIP_IDLETIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_IDLETIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALFUELIDLE):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIME_RPMEFFINFO):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDIST):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMTIMEAMBER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMTIMEAMBERPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMTIMEGREEN):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMTIMEGREENPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMTIMERED):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMTIMEREDPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMDISTAMBER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMDISTAMBERPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMDISTGREEN):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMDISTGREENPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMDISTRED):
                case static_cast<int32_t>(Literal::CURRENTTRIP_EFF_RPMDISTREDPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGENG_RPM):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIME_ACON):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AC_ONTIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AC_ONTIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIME_CLT_ACC):
                case static_cast<int32_t>(Literal::CURRENTTRIP_CLT_ACCTIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_CLT_ACCTIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_BRKINSTRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCLN):
                case static_cast<int32_t>(Literal::CURRENTTRIP_NOOFBRKCYCLE):
                case static_cast<int32_t>(Literal::CURRENTTRIP_BRKCUMRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALBRK):
                case static_cast<int32_t>(Literal::CURRENTTRIP_NORMALBRK):
                case static_cast<int32_t>(Literal::CURRENTTRIP_NORMALBRKPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_MODERATEBRK):
                case static_cast<int32_t>(Literal::CURRENTTRIP_MODERATEBRKPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_HEAVYBRK):
                case static_cast<int32_t>(Literal::CURRENTTRIP_HEAVYBRKPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_PANICBRK):
                case static_cast<int32_t>(Literal::CURRENTTRIP_PANICBRKPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_HARSHBRK):
                case static_cast<int32_t>(Literal::CURRENTTRIP_HARSHBRKPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGBRKCOUNT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ODODISTPERTRIP_BRAKING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCINSTRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCCUMRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTRAVELTIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALACCPEDALPRESSTIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSRANGE1):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSRANGE1PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSRANGE2):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSRANGE2PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSRANGE3):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSRANGE3PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSRANGE4):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSRANGE4PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESSNO):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCPEDALPRESNOPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGACCPEDALPOS):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ACCHARSHCOUNT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_VEHICLE_TXMNVARIANT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_GSINSTRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_GSCUMRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDISTVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR1):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR1):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR1PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR1PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR2):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR2):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR2PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR2PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR3):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR3):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR3PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR3PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR4):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR4):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR4PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR4PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR5):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR5):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR5PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR5PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR6):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR6):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEGEAR6PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DISTGEAR6PER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_MOSTTIMEGEAR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDISTVALIDGEAR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDISTWRONGGEAR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDISTDOWNINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDISTUPINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGDISTWRONGINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGDISTDOWNINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGDISTUPINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDISTWRONGGEARPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDISTDOWNINDIPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALDISTUPINDIPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEVALIDGEAR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEWRONGGEAR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEDOWNINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEUPINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEWRONGGEARPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEDOWNINDIPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEUPINDIPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALCOUNTWRONGGEAR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALCOUNTUPINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALCOUNTDOWNINDIPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALCOUNTUPINDIPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGCOUNTUPINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMECORRECTGEARPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGGEARSHIFT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_NOOFGEARSHIFT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_ODODISTPERTRIP):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOPSPEED):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DRIVEINSTRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DRIVECUMURATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SPEEDBAND1TIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SPEEDBAND1TIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SPEEDBAND2TIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SPEEDBAND2TIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SPEEDBAND3TIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SPEEDBAND3TIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SPEEDBAND4TIME):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SPEEDBAND4TIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TRIPDIST):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TRIPDURATION):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGSPEED):
                case static_cast<int32_t>(Literal::CURRENTTRIP_AVGFUELECO):
                case static_cast<int32_t>(Literal::CURRENTTRIP_OVERALLINSTRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_OVERALLCUMURATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_PERTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_PERTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SEATBELTFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_NOOFTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_NOOFTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::CURRENTTRIP_NOOFTIMEWITHOUTSEATBELTPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DOORCLOSETIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_DOOROPENTIMEPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TIMEHIGHSPEEDCLTBRKPRESSEDPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TOTALTIMEHIGHSPEEDPER):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SRSFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TEABREAKFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TRLFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TLLFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TBLFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TFLFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TPLFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_TRVLFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_BRKFLDFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_OILPRFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_WIFFACTOR):
                case static_cast<int32_t>(Literal::CURRENTTRIP_VEHICLEHEALTH):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SAFETYINSTRATING):
                case static_cast<int32_t>(Literal::CURRENTTRIP_SAFETYCUMRATING):
                case static_cast<int32_t>(Literal::TRIPA_FUELECOINSTRATING):
                case static_cast<int32_t>(Literal::TRIPA_FUELECOCUMRATING):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIME_ENGINEIDLE):
                case static_cast<int32_t>(Literal::TRIPA_IDLETIME):
                case static_cast<int32_t>(Literal::TRIPA_IDLETIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALFUELIDLE):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIME_RPMEFFINFO):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDIST):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMTIMEAMBER):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMTIMEAMBERPER):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMTIMEGREEN):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMTIMEGREENPER):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMTIMERED):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMTIMEREDPER):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMDISTAMBER):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMDISTAMBERPER):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMDISTGREEN):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMDISTGREENPER):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMDISTRED):
                case static_cast<int32_t>(Literal::TRIPA_EFF_RPMDISTREDPER):
                case static_cast<int32_t>(Literal::TRIPA_AVGENG_RPM):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIME_ACON):
                case static_cast<int32_t>(Literal::TRIPA_AC_ONTIME):
                case static_cast<int32_t>(Literal::TRIPA_AC_ONTIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIME_CLT_ACC):
                case static_cast<int32_t>(Literal::TRIPA_CLT_ACCTIME):
                case static_cast<int32_t>(Literal::TRIPA_CLT_ACCTIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_BRKINSTRATING):
                case static_cast<int32_t>(Literal::TRIPA_ACCLN):
                case static_cast<int32_t>(Literal::TRIPA_NOOFBRKCYCLE):
                case static_cast<int32_t>(Literal::TRIPA_BRKCUMRATING):
                case static_cast<int32_t>(Literal::TRIPA_TOTALBRK):
                case static_cast<int32_t>(Literal::TRIPA_NORMALBRK):
                case static_cast<int32_t>(Literal::TRIPA_NORMALBRKPER):
                case static_cast<int32_t>(Literal::TRIPA_MODERATEBRK):
                case static_cast<int32_t>(Literal::TRIPA_MODERATEBRKPER):
                case static_cast<int32_t>(Literal::TRIPA_HEAVYBRK):
                case static_cast<int32_t>(Literal::TRIPA_HEAVYBRKPER):
                case static_cast<int32_t>(Literal::TRIPA_PANICBRK):
                case static_cast<int32_t>(Literal::TRIPA_PANICBRKPER):
                case static_cast<int32_t>(Literal::TRIPA_HARSHBRK):
                case static_cast<int32_t>(Literal::TRIPA_HARSHBRKPER):
                case static_cast<int32_t>(Literal::TRIPA_AVGBRKCOUNT):
                case static_cast<int32_t>(Literal::TRIPA_ODODISTPERTRIP_BRAKING):
                case static_cast<int32_t>(Literal::TRIPA_ACCINSTRATING):
                case static_cast<int32_t>(Literal::TRIPA_ACCCUMRATING):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTRAVELTIME):
                case static_cast<int32_t>(Literal::TRIPA_TOTALACCPEDALPRESSTIME):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSRANGE1):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSRANGE1PER):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSRANGE2):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSRANGE2PER):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSRANGE3):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSRANGE3PER):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSRANGE4):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSRANGE4PER):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESSNO):
                case static_cast<int32_t>(Literal::TRIPA_ACCPEDALPRESNOPER):
                case static_cast<int32_t>(Literal::TRIPA_AVGACCPEDALPOS):
                case static_cast<int32_t>(Literal::TRIPA_ACCHARSHCOUNT):
                case static_cast<int32_t>(Literal::TRIPA_VEHICLE_TXMNVARIANT):
                case static_cast<int32_t>(Literal::TRIPA_GSINSTRATING):
                case static_cast<int32_t>(Literal::TRIPA_GSCUMRATING):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDISTVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR1):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR1):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR1PER):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR1PER):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR2):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR2):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR2PER):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR2PER):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR3):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR3):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR3PER):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR3PER):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR4):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR4):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR4PER):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR4PER):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR5):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR5):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR5PER):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR5PER):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR6):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR6):
                case static_cast<int32_t>(Literal::TRIPA_TIMEGEAR6PER):
                case static_cast<int32_t>(Literal::TRIPA_DISTGEAR6PER):
                case static_cast<int32_t>(Literal::TRIPA_MOSTTIMEGEAR):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDISTVALIDGEAR):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDISTWRONGGEAR):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDISTDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDISTUPINDI):
                case static_cast<int32_t>(Literal::TRIPA_AVGDISTWRONGINDI):
                case static_cast<int32_t>(Literal::TRIPA_AVGDISTDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPA_AVGDISTUPINDI):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDISTWRONGGEARPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDISTDOWNINDIPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALDISTUPINDIPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEVALIDGEAR):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEWRONGGEAR):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEUPINDI):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEWRONGGEARPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEDOWNINDIPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEUPINDIPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALCOUNTWRONGGEAR):
                case static_cast<int32_t>(Literal::TRIPA_TOTALCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPA_TOTALCOUNTUPINDI):
                case static_cast<int32_t>(Literal::TRIPA_TOTALCOUNTDOWNINDIPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALCOUNTUPINDIPER):
                case static_cast<int32_t>(Literal::TRIPA_AVGCOUNTUPINDI):
                case static_cast<int32_t>(Literal::TRIPA_AVGCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMECORRECTGEARPER):
                case static_cast<int32_t>(Literal::TRIPA_AVGGEARSHIFT):
                case static_cast<int32_t>(Literal::TRIPA_NOOFGEARSHIFT):
                case static_cast<int32_t>(Literal::TRIPA_ODODISTPERTRIP):
                case static_cast<int32_t>(Literal::TRIPA_TOPSPEED):
                case static_cast<int32_t>(Literal::TRIPA_DRIVEINSTRATING):
                case static_cast<int32_t>(Literal::TRIPA_DRIVECUMURATING):
                case static_cast<int32_t>(Literal::TRIPA_SPEEDBAND1TIME):
                case static_cast<int32_t>(Literal::TRIPA_SPEEDBAND1TIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_SPEEDBAND2TIME):
                case static_cast<int32_t>(Literal::TRIPA_SPEEDBAND2TIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_SPEEDBAND3TIME):
                case static_cast<int32_t>(Literal::TRIPA_SPEEDBAND3TIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_SPEEDBAND4TIME):
                case static_cast<int32_t>(Literal::TRIPA_SPEEDBAND4TIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_TRIPDIST):
                case static_cast<int32_t>(Literal::TRIPA_TRIPDURATION):
                case static_cast<int32_t>(Literal::TRIPA_AVGSPEED):
                case static_cast<int32_t>(Literal::TRIPA_AVGFUELECO):
                case static_cast<int32_t>(Literal::TRIPA_OVERALLINSTRATING):
                case static_cast<int32_t>(Literal::TRIPA_OVERALLCUMURATING):
                case static_cast<int32_t>(Literal::TRIPA_PERTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::TRIPA_PERTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::TRIPA_SEATBELTFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_NOOFTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::TRIPA_NOOFTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::TRIPA_NOOFTIMEWITHOUTSEATBELTPER):
                case static_cast<int32_t>(Literal::TRIPA_DOORCLOSETIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_DOOROPENTIMEPER):
                case static_cast<int32_t>(Literal::TRIPA_TIMEHIGHSPEEDCLTBRKPRESSEDPER):
                case static_cast<int32_t>(Literal::TRIPA_TOTALTIMEHIGHSPEEDPER):
                case static_cast<int32_t>(Literal::TRIPA_SRSFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_TEABREAKFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_TRLFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_TLLFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_TBLFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_TFLFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_TPLFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_TRVLFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_BRKFLDFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_OILPRFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_WIFFACTOR):
                case static_cast<int32_t>(Literal::TRIPA_VEHICLEHEALTH):
                case static_cast<int32_t>(Literal::TRIPA_SAFETYINSTRATING):
                case static_cast<int32_t>(Literal::TRIPA_SAFETYCUMRATING):
                case static_cast<int32_t>(Literal::TRIPB_FUELECOINSTRATING):
                case static_cast<int32_t>(Literal::TRIPB_FUELECOCUMRATING):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIME_ENGINEIDLE):
                case static_cast<int32_t>(Literal::TRIPB_IDLETIME):
                case static_cast<int32_t>(Literal::TRIPB_IDLETIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALFUELIDLE):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIME_RPMEFFINFO):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDIST):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMTIMEAMBER):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMTIMEAMBERPER):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMTIMEGREEN):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMTIMEGREENPER):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMTIMERED):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMTIMEREDPER):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMDISTAMBER):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMDISTAMBERPER):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMDISTGREEN):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMDISTGREENPER):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMDISTRED):
                case static_cast<int32_t>(Literal::TRIPB_EFF_RPMDISTREDPER):
                case static_cast<int32_t>(Literal::TRIPB_AVGENG_RPM):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIME_ACON):
                case static_cast<int32_t>(Literal::TRIPB_AC_ONTIME):
                case static_cast<int32_t>(Literal::TRIPB_AC_ONTIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIME_CLT_ACC):
                case static_cast<int32_t>(Literal::TRIPB_CLT_ACCTIME):
                case static_cast<int32_t>(Literal::TRIPB_CLT_ACCTIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_BRKINSTRATING):
                case static_cast<int32_t>(Literal::TRIPB_ACCLN):
                case static_cast<int32_t>(Literal::TRIPB_NOOFBRKCYCLE):
                case static_cast<int32_t>(Literal::TRIPB_BRKCUMRATING):
                case static_cast<int32_t>(Literal::TRIPB_TOTALBRK):
                case static_cast<int32_t>(Literal::TRIPB_NORMALBRK):
                case static_cast<int32_t>(Literal::TRIPB_NORMALBRKPER):
                case static_cast<int32_t>(Literal::TRIPB_MODERATEBRK):
                case static_cast<int32_t>(Literal::TRIPB_MODERATEBRKPER):
                case static_cast<int32_t>(Literal::TRIPB_HEAVYBRK):
                case static_cast<int32_t>(Literal::TRIPB_HEAVYBRKPER):
                case static_cast<int32_t>(Literal::TRIPB_PANICBRK):
                case static_cast<int32_t>(Literal::TRIPB_PANICBRKPER):
                case static_cast<int32_t>(Literal::TRIPB_HARSHBRK):
                case static_cast<int32_t>(Literal::TRIPB_HARSHBRKPER):
                case static_cast<int32_t>(Literal::TRIPB_AVGBRKCOUNT):
                case static_cast<int32_t>(Literal::TRIPB_ODODISTPERTRIP_BRAKING):
                case static_cast<int32_t>(Literal::TRIPB_ACCINSTRATING):
                case static_cast<int32_t>(Literal::TRIPB_ACCCUMRATING):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTRAVELTIME):
                case static_cast<int32_t>(Literal::TRIPB_TOTALACCPEDALPRESSTIME):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSRANGE1):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSRANGE1PER):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSRANGE2):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSRANGE2PER):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSRANGE3):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSRANGE3PER):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSRANGE4):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSRANGE4PER):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESSNO):
                case static_cast<int32_t>(Literal::TRIPB_ACCPEDALPRESNOPER):
                case static_cast<int32_t>(Literal::TRIPB_AVGACCPEDALPOS):
                case static_cast<int32_t>(Literal::TRIPB_ACCHARSHCOUNT):
                case static_cast<int32_t>(Literal::TRIPB_VEHICLE_TXMNVARIANT):
                case static_cast<int32_t>(Literal::TRIPB_GSINSTRATING):
                case static_cast<int32_t>(Literal::TRIPB_GSCUMRATING):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDISTVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR1):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR1):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR1PER):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR1PER):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR2):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR2):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR2PER):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR2PER):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR3):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR3):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR3PER):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR3PER):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR4):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR4):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR4PER):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR4PER):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR5):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR5):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR5PER):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR5PER):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR6):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR6):
                case static_cast<int32_t>(Literal::TRIPB_TIMEGEAR6PER):
                case static_cast<int32_t>(Literal::TRIPB_DISTGEAR6PER):
                case static_cast<int32_t>(Literal::TRIPB_MOSTTIMEGEAR):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDISTVALIDGEAR):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDISTWRONGGEAR):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDISTDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDISTUPINDI):
                case static_cast<int32_t>(Literal::TRIPB_AVGDISTWRONGINDI):
                case static_cast<int32_t>(Literal::TRIPB_AVGDISTDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPB_AVGDISTUPINDI):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDISTWRONGGEARPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDISTDOWNINDIPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALDISTUPINDIPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEVALIDGEAR):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEWRONGGEAR):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEUPINDI):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEWRONGGEARPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEDOWNINDIPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEUPINDIPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALCOUNTWRONGGEAR):
                case static_cast<int32_t>(Literal::TRIPB_TOTALCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPB_TOTALCOUNTUPINDI):
                case static_cast<int32_t>(Literal::TRIPB_TOTALCOUNTDOWNINDIPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALCOUNTUPINDIPER):
                case static_cast<int32_t>(Literal::TRIPB_AVGCOUNTUPINDI):
                case static_cast<int32_t>(Literal::TRIPB_AVGCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMECORRECTGEARPER):
                case static_cast<int32_t>(Literal::TRIPB_AVGGEARSHIFT):
                case static_cast<int32_t>(Literal::TRIPB_NOOFGEARSHIFT):
                case static_cast<int32_t>(Literal::TRIPB_ODODISTPERTRIP):
                case static_cast<int32_t>(Literal::TRIPB_TOPSPEED):
                case static_cast<int32_t>(Literal::TRIPB_DRIVEINSTRATING):
                case static_cast<int32_t>(Literal::TRIPB_DRIVECUMURATING):
                case static_cast<int32_t>(Literal::TRIPB_SPEEDBAND1TIME):
                case static_cast<int32_t>(Literal::TRIPB_SPEEDBAND1TIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_SPEEDBAND2TIME):
                case static_cast<int32_t>(Literal::TRIPB_SPEEDBAND2TIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_SPEEDBAND3TIME):
                case static_cast<int32_t>(Literal::TRIPB_SPEEDBAND3TIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_SPEEDBAND4TIME):
                case static_cast<int32_t>(Literal::TRIPB_SPEEDBAND4TIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_TRIPDIST):
                case static_cast<int32_t>(Literal::TRIPB_TRIPDURATION):
                case static_cast<int32_t>(Literal::TRIPB_AVGSPEED):
                case static_cast<int32_t>(Literal::TRIPB_AVGFUELECO):
                case static_cast<int32_t>(Literal::TRIPB_OVERALLINSTRATING):
                case static_cast<int32_t>(Literal::TRIPB_OVERALLCUMURATING):
                case static_cast<int32_t>(Literal::TRIPB_PERTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::TRIPB_PERTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::TRIPB_SEATBELTFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_NOOFTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::TRIPB_NOOFTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::TRIPB_NOOFTIMEWITHOUTSEATBELTPER):
                case static_cast<int32_t>(Literal::TRIPB_DOORCLOSETIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_DOOROPENTIMEPER):
                case static_cast<int32_t>(Literal::TRIPB_TIMEHIGHSPEEDCLTBRKPRESSEDPER):
                case static_cast<int32_t>(Literal::TRIPB_TOTALTIMEHIGHSPEEDPER):
                case static_cast<int32_t>(Literal::TRIPB_SRSFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_TEABREAKFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_TRLFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_TLLFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_TBLFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_TFLFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_TPLFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_TRVLFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_BRKFLDFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_OILPRFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_WIFFACTOR):
                case static_cast<int32_t>(Literal::TRIPB_VEHICLEHEALTH):
                case static_cast<int32_t>(Literal::TRIPB_SAFETYINSTRATING):
                case static_cast<int32_t>(Literal::TRIPB_SAFETYCUMRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_FUELECOINSTRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_FUELECOCUMRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIME_ENGINEIDLE):
                case static_cast<int32_t>(Literal::OVERALLTRIP_IDLETIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_IDLETIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALFUELIDLE):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIME_RPMEFFINFO):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDIST):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMTIMEAMBER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMTIMEAMBERPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMTIMEGREEN):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMTIMEGREENPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMTIMERED):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMTIMEREDPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMDISTAMBER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMDISTAMBERPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMDISTGREEN):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMDISTGREENPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMDISTRED):
                case static_cast<int32_t>(Literal::OVERALLTRIP_EFF_RPMDISTREDPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGENG_RPM):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIME_ACON):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AC_ONTIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AC_ONTIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIME_CLT_ACC):
                case static_cast<int32_t>(Literal::OVERALLTRIP_CLT_ACCTIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_CLT_ACCTIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_BRKINSTRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCLN):
                case static_cast<int32_t>(Literal::OVERALLTRIP_NOOFBRKCYCLE):
                case static_cast<int32_t>(Literal::OVERALLTRIP_BRKCUMRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALBRK):
                case static_cast<int32_t>(Literal::OVERALLTRIP_NORMALBRK):
                case static_cast<int32_t>(Literal::OVERALLTRIP_NORMALBRKPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_MODERATEBRK):
                case static_cast<int32_t>(Literal::OVERALLTRIP_MODERATEBRKPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_HEAVYBRK):
                case static_cast<int32_t>(Literal::OVERALLTRIP_HEAVYBRKPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_PANICBRK):
                case static_cast<int32_t>(Literal::OVERALLTRIP_PANICBRKPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_HARSHBRK):
                case static_cast<int32_t>(Literal::OVERALLTRIP_HARSHBRKPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGBRKCOUNT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ODODISTPERTRIP_BRAKING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCINSTRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCCUMRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTRAVELTIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALACCPEDALPRESSTIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSRANGE1):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSRANGE1PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSRANGE2):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSRANGE2PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSRANGE3):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSRANGE3PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSRANGE4):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSRANGE4PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESSNO):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCPEDALPRESNOPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGACCPEDALPOS):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ACCHARSHCOUNT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_VEHICLE_TXMNVARIANT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_GSINSTRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_GSCUMRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDISTVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR1):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR1):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR1PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR1PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR2):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR2):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR2PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR2PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR3):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR3):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR3PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR3PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR4):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR4):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR4PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR4PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR5):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR5):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR5PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR5PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR6):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR6):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEGEAR6PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DISTGEAR6PER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_MOSTTIMEGEAR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDISTVALIDGEAR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDISTWRONGGEAR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDISTDOWNINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDISTUPINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGDISTWRONGINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGDISTDOWNINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGDISTUPINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDISTWRONGGEARPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDISTDOWNINDIPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALDISTUPINDIPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEVALIDGEAR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEWRONGGEAR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEDOWNINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEUPINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEWRONGGEARPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEDOWNINDIPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEUPINDIPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALCOUNTWRONGGEAR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALCOUNTUPINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALCOUNTDOWNINDIPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALCOUNTUPINDIPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGCOUNTUPINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMECORRECTGEARPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGGEARSHIFT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_NOOFGEARSHIFT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_ODODISTPERTRIP):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOPSPEED):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DRIVEINSTRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DRIVECUMURATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SPEEDBAND1TIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SPEEDBAND1TIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SPEEDBAND2TIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SPEEDBAND2TIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SPEEDBAND3TIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SPEEDBAND3TIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SPEEDBAND4TIME):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SPEEDBAND4TIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TRIPDIST):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TRIPDURATION):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGSPEED):
                case static_cast<int32_t>(Literal::OVERALLTRIP_AVGFUELECO):
                case static_cast<int32_t>(Literal::OVERALLTRIP_OVERALLINSTRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_OVERALLCUMURATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_PERTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_PERTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SEATBELTFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_NOOFTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_NOOFTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::OVERALLTRIP_NOOFTIMEWITHOUTSEATBELTPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DOORCLOSETIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_DOOROPENTIMEPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TIMEHIGHSPEEDCLTBRKPRESSEDPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TOTALTIMEHIGHSPEEDPER):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SRSFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TEABREAKFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TRLFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TLLFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TBLFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TFLFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TPLFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_TRVLFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_BRKFLDFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_OILPRFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_WIFFACTOR):
                case static_cast<int32_t>(Literal::OVERALLTRIP_VEHICLEHEALTH):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SAFETYINSTRATING):
                case static_cast<int32_t>(Literal::OVERALLTRIP_SAFETYCUMRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_FUELECOINSTRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_FUELECOCUMRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIME_ENGINEIDLE):
                case static_cast<int32_t>(Literal::BESTTRIP_IDLETIME):
                case static_cast<int32_t>(Literal::BESTTRIP_IDLETIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALFUELIDLE):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIME_RPMEFFINFO):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDIST):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMTIMEAMBER):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMTIMEAMBERPER):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMTIMEGREEN):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMTIMEGREENPER):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMTIMERED):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMTIMEREDPER):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMDISTAMBER):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMDISTAMBERPER):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMDISTGREEN):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMDISTGREENPER):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMDISTRED):
                case static_cast<int32_t>(Literal::BESTTRIP_EFF_RPMDISTREDPER):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGENG_RPM):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIME_ACON):
                case static_cast<int32_t>(Literal::BESTTRIP_AC_ONTIME):
                case static_cast<int32_t>(Literal::BESTTRIP_AC_ONTIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIME_CLT_ACC):
                case static_cast<int32_t>(Literal::BESTTRIP_CLT_ACCTIME):
                case static_cast<int32_t>(Literal::BESTTRIP_CLT_ACCTIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_BRKINSTRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCLN):
                case static_cast<int32_t>(Literal::BESTTRIP_NOOFBRKCYCLE):
                case static_cast<int32_t>(Literal::BESTTRIP_BRKCUMRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALBRK):
                case static_cast<int32_t>(Literal::BESTTRIP_NORMALBRK):
                case static_cast<int32_t>(Literal::BESTTRIP_NORMALBRKPER):
                case static_cast<int32_t>(Literal::BESTTRIP_MODERATEBRK):
                case static_cast<int32_t>(Literal::BESTTRIP_MODERATEBRKPER):
                case static_cast<int32_t>(Literal::BESTTRIP_HEAVYBRK):
                case static_cast<int32_t>(Literal::BESTTRIP_HEAVYBRKPER):
                case static_cast<int32_t>(Literal::BESTTRIP_PANICBRK):
                case static_cast<int32_t>(Literal::BESTTRIP_PANICBRKPER):
                case static_cast<int32_t>(Literal::BESTTRIP_HARSHBRK):
                case static_cast<int32_t>(Literal::BESTTRIP_HARSHBRKPER):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGBRKCOUNT):
                case static_cast<int32_t>(Literal::BESTTRIP_ODODISTPERTRIP_BRAKING):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCINSTRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCCUMRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTRAVELTIME):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALACCPEDALPRESSTIME):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSRANGE1):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSRANGE1PER):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSRANGE2):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSRANGE2PER):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSRANGE3):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSRANGE3PER):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSRANGE4):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSRANGE4PER):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESSNO):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCPEDALPRESNOPER):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGACCPEDALPOS):
                case static_cast<int32_t>(Literal::BESTTRIP_ACCHARSHCOUNT):
                case static_cast<int32_t>(Literal::BESTTRIP_VEHICLE_TXMNVARIANT):
                case static_cast<int32_t>(Literal::BESTTRIP_GSINSTRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_GSCUMRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDISTVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR1):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR1):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR1PER):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR1PER):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR2):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR2):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR2PER):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR2PER):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR3):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR3):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR3PER):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR3PER):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR4):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR4):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR4PER):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR4PER):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR5):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR5):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR5PER):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR5PER):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR6):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR6):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEGEAR6PER):
                case static_cast<int32_t>(Literal::BESTTRIP_DISTGEAR6PER):
                case static_cast<int32_t>(Literal::BESTTRIP_MOSTTIMEGEAR):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDISTVALIDGEAR):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDISTWRONGGEAR):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDISTDOWNINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDISTUPINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGDISTWRONGINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGDISTDOWNINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGDISTUPINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDISTWRONGGEARPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDISTDOWNINDIPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALDISTUPINDIPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEVALIDGEAR):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEWRONGGEAR):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEDOWNINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEUPINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEWRONGGEARPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEDOWNINDIPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEUPINDIPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALCOUNTWRONGGEAR):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALCOUNTUPINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALCOUNTDOWNINDIPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALCOUNTUPINDIPER):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGCOUNTUPINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMECORRECTGEARPER):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGGEARSHIFT):
                case static_cast<int32_t>(Literal::BESTTRIP_NOOFGEARSHIFT):
                case static_cast<int32_t>(Literal::BESTTRIP_ODODISTPERTRIP):
                case static_cast<int32_t>(Literal::BESTTRIP_TOPSPEED):
                case static_cast<int32_t>(Literal::BESTTRIP_DRIVEINSTRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_DRIVECUMURATING):
                case static_cast<int32_t>(Literal::BESTTRIP_SPEEDBAND1TIME):
                case static_cast<int32_t>(Literal::BESTTRIP_SPEEDBAND1TIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_SPEEDBAND2TIME):
                case static_cast<int32_t>(Literal::BESTTRIP_SPEEDBAND2TIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_SPEEDBAND3TIME):
                case static_cast<int32_t>(Literal::BESTTRIP_SPEEDBAND3TIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_SPEEDBAND4TIME):
                case static_cast<int32_t>(Literal::BESTTRIP_SPEEDBAND4TIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TRIPDIST):
                case static_cast<int32_t>(Literal::BESTTRIP_TRIPDURATION):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGSPEED):
                case static_cast<int32_t>(Literal::BESTTRIP_AVGFUELECO):
                case static_cast<int32_t>(Literal::BESTTRIP_OVERALLINSTRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_OVERALLCUMURATING):
                case static_cast<int32_t>(Literal::BESTTRIP_PERTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::BESTTRIP_PERTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::BESTTRIP_SEATBELTFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_NOOFTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::BESTTRIP_NOOFTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::BESTTRIP_NOOFTIMEWITHOUTSEATBELTPER):
                case static_cast<int32_t>(Literal::BESTTRIP_DOORCLOSETIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_DOOROPENTIMEPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TIMEHIGHSPEEDCLTBRKPRESSEDPER):
                case static_cast<int32_t>(Literal::BESTTRIP_TOTALTIMEHIGHSPEEDPER):
                case static_cast<int32_t>(Literal::BESTTRIP_SRSFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_TEABREAKFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_TRLFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_TLLFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_TBLFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_TFLFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_TPLFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_TRVLFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_BRKFLDFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_OILPRFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_WIFFACTOR):
                case static_cast<int32_t>(Literal::BESTTRIP_VEHICLEHEALTH):
                case static_cast<int32_t>(Literal::BESTTRIP_SAFETYINSTRATING):
                case static_cast<int32_t>(Literal::BESTTRIP_SAFETYCUMRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_FUELECOINSTRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_FUELECOCUMRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIME_ENGINEIDLE):
                case static_cast<int32_t>(Literal::LASTTRIP_IDLETIME):
                case static_cast<int32_t>(Literal::LASTTRIP_IDLETIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALFUELIDLE):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIME_RPMEFFINFO):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDIST):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMTIMEAMBER):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMTIMEAMBERPER):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMTIMEGREEN):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMTIMEGREENPER):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMTIMERED):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMTIMEREDPER):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMDISTAMBER):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMDISTAMBERPER):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMDISTGREEN):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMDISTGREENPER):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMDISTRED):
                case static_cast<int32_t>(Literal::LASTTRIP_EFF_RPMDISTREDPER):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGENG_RPM):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIME_ACON):
                case static_cast<int32_t>(Literal::LASTTRIP_AC_ONTIME):
                case static_cast<int32_t>(Literal::LASTTRIP_AC_ONTIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIME_CLT_ACC):
                case static_cast<int32_t>(Literal::LASTTRIP_CLT_ACCTIME):
                case static_cast<int32_t>(Literal::LASTTRIP_CLT_ACCTIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_BRKINSTRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCLN):
                case static_cast<int32_t>(Literal::LASTTRIP_NOOFBRKCYCLE):
                case static_cast<int32_t>(Literal::LASTTRIP_BRKCUMRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALBRK):
                case static_cast<int32_t>(Literal::LASTTRIP_NORMALBRK):
                case static_cast<int32_t>(Literal::LASTTRIP_NORMALBRKPER):
                case static_cast<int32_t>(Literal::LASTTRIP_MODERATEBRK):
                case static_cast<int32_t>(Literal::LASTTRIP_MODERATEBRKPER):
                case static_cast<int32_t>(Literal::LASTTRIP_HEAVYBRK):
                case static_cast<int32_t>(Literal::LASTTRIP_HEAVYBRKPER):
                case static_cast<int32_t>(Literal::LASTTRIP_PANICBRK):
                case static_cast<int32_t>(Literal::LASTTRIP_PANICBRKPER):
                case static_cast<int32_t>(Literal::LASTTRIP_HARSHBRK):
                case static_cast<int32_t>(Literal::LASTTRIP_HARSHBRKPER):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGBRKCOUNT):
                case static_cast<int32_t>(Literal::LASTTRIP_ODODISTPERTRIP_BRAKING):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCINSTRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCCUMRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTRAVELTIME):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALACCPEDALPRESSTIME):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSRANGE1):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSRANGE1PER):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSRANGE2):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSRANGE2PER):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSRANGE3):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSRANGE3PER):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSRANGE4):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSRANGE4PER):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESSNO):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCPEDALPRESNOPER):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGACCPEDALPOS):
                case static_cast<int32_t>(Literal::LASTTRIP_ACCHARSHCOUNT):
                case static_cast<int32_t>(Literal::LASTTRIP_VEHICLE_TXMNVARIANT):
                case static_cast<int32_t>(Literal::LASTTRIP_GSINSTRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_GSCUMRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDISTVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEVALIDGEAR_GEARSHIFT):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR1):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR1):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR1PER):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR1PER):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR2):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR2):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR2PER):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR2PER):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR3):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR3):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR3PER):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR3PER):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR4):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR4):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR4PER):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR4PER):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR5):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR5):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR5PER):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR5PER):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR6):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR6):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEGEAR6PER):
                case static_cast<int32_t>(Literal::LASTTRIP_DISTGEAR6PER):
                case static_cast<int32_t>(Literal::LASTTRIP_MOSTTIMEGEAR):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDISTVALIDGEAR):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDISTWRONGGEAR):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDISTDOWNINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDISTUPINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGDISTWRONGINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGDISTDOWNINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGDISTUPINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDISTWRONGGEARPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDISTDOWNINDIPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALDISTUPINDIPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEVALIDGEAR):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEWRONGGEAR):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEDOWNINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEUPINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEWRONGGEARPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEDOWNINDIPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEUPINDIPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALCOUNTWRONGGEAR):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALCOUNTUPINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALCOUNTDOWNINDIPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALCOUNTUPINDIPER):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGCOUNTUPINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGCOUNTDOWNINDI):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMECORRECTGEARPER):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGGEARSHIFT):
                case static_cast<int32_t>(Literal::LASTTRIP_NOOFGEARSHIFT):
                case static_cast<int32_t>(Literal::LASTTRIP_ODODISTPERTRIP):
                case static_cast<int32_t>(Literal::LASTTRIP_TOPSPEED):
                case static_cast<int32_t>(Literal::LASTTRIP_DRIVEINSTRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_DRIVECUMURATING):
                case static_cast<int32_t>(Literal::LASTTRIP_SPEEDBAND1TIME):
                case static_cast<int32_t>(Literal::LASTTRIP_SPEEDBAND1TIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_SPEEDBAND2TIME):
                case static_cast<int32_t>(Literal::LASTTRIP_SPEEDBAND2TIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_SPEEDBAND3TIME):
                case static_cast<int32_t>(Literal::LASTTRIP_SPEEDBAND3TIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_SPEEDBAND4TIME):
                case static_cast<int32_t>(Literal::LASTTRIP_SPEEDBAND4TIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TRIPDIST):
                case static_cast<int32_t>(Literal::LASTTRIP_TRIPDURATION):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGSPEED):
                case static_cast<int32_t>(Literal::LASTTRIP_AVGFUELECO):
                case static_cast<int32_t>(Literal::LASTTRIP_OVERALLINSTRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_OVERALLCUMURATING):
                case static_cast<int32_t>(Literal::LASTTRIP_PERTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::LASTTRIP_PERTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::LASTTRIP_SEATBELTFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_NOOFTIMEWITHOUTSEATBELT):
                case static_cast<int32_t>(Literal::LASTTRIP_NOOFTIMEWITHSEATBELT):
                case static_cast<int32_t>(Literal::LASTTRIP_NOOFTIMEWITHOUTSEATBELTPER):
                case static_cast<int32_t>(Literal::LASTTRIP_DOORCLOSETIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_DOOROPENTIMEPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TIMEHIGHSPEEDCLTBRKPRESSEDPER):
                case static_cast<int32_t>(Literal::LASTTRIP_TOTALTIMEHIGHSPEEDPER):
                case static_cast<int32_t>(Literal::LASTTRIP_SRSFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_TEABREAKFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_TRLFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_TLLFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_TBLFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_TFLFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_TPLFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_TRVLFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_BRKFLDFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_OILPRFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_WIFFACTOR):
                case static_cast<int32_t>(Literal::LASTTRIP_VEHICLEHEALTH):
                case static_cast<int32_t>(Literal::LASTTRIP_SAFETYINSTRATING):
                case static_cast<int32_t>(Literal::LASTTRIP_SAFETYCUMRATING):
                case static_cast<int32_t>(Literal::TOTAL_COUNT):
                case static_cast<int32_t>(Literal::UNKONWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSignalNames &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSignalNames &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSignalNames &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSignalNames &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSignalNames &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSignalNames &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    typedef std::vector<driveProTypeCollection::eSignalNames> signalArray;
    struct sDpVersionInfo : CommonAPI::Struct<std::string, double> {
    	
    	sDpVersionInfo() {
    	}
    	sDpVersionInfo(const std::string &_libraryVersion, const double &_configVersion)
    	{
    		std::get<0>(values_) = _libraryVersion;
    		std::get<1>(values_) = _configVersion;
    	}
    	inline const std::string &getLibraryVersion() const { return std::get<0>(values_); }
    	inline void setLibraryVersion(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const double &getConfigVersion() const { return std::get<1>(values_); }
    	inline void setConfigVersion(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sDpVersionInfo& _other) const {
                return (getLibraryVersion() == _other.getLibraryVersion() && getConfigVersion() == _other.getConfigVersion());
        }
    	inline bool operator!=(const sDpVersionInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eDpErrorCode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            ERROR_CONFIGURATION_FILE_PATH_NOT_FOUND = 8001,
            ERROR_TRIP_HISTORY_FILE_PATHIN_VALID = 8002,
            ERROR_CONFIGURATION_FILE_INVALID = 8003,
            ERROR_TRIP_HISTORY_FILE_INVALID = 8004,
            ERROR_VALUE_NOT_IN_RANGE = 8200,
            ERROR_VALUE_ABOVE_RANGE = 8201,
            ERROR_VALUE_BELOW_RANGE = 8202,
            ERROR_SIGNAL_VALUE_NOT_SET = 8203,
            ERROR_SIGNAL_VALUE_NOT_AVAILABLE = 8204,
            ERROR_DIVIDEBYZERO = 8301,
            ERROR_OVERFLOW = 8302,
            ERROR_JSON_INVALID = 8501,
            ERROR_DATA_INCOMPLETE = 8801,
            ERROR_OTHER = 8601,
            ERROR_TRIPID_NOT_FOUND = 8602,
            ERROR_STATE_PERMISSION_DENIED = 8700,
            ERROR_CANNOT_CREATE_USER_DIRECTORY = 8701,
            ERROR_EXCEPTION = 8000,
            ERROR_TRIP_NOT_RUNNING = 9001,
            ERROR_TRIP_DISTANCE_THRESH = 9002,
            ERROR_LIBRARY_NOT_INITIALIZED = 10001,
            ERROR_AMT_VEHICLE = 11001,
            SUCCESS = 0,
            UNKNOWN = -1
        };
        
        eDpErrorCode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::ERROR_CONFIGURATION_FILE_PATH_NOT_FOUND)) {}
        eDpErrorCode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::ERROR_CONFIGURATION_FILE_PATH_NOT_FOUND):
                case static_cast<int32_t>(Literal::ERROR_TRIP_HISTORY_FILE_PATHIN_VALID):
                case static_cast<int32_t>(Literal::ERROR_CONFIGURATION_FILE_INVALID):
                case static_cast<int32_t>(Literal::ERROR_TRIP_HISTORY_FILE_INVALID):
                case static_cast<int32_t>(Literal::ERROR_VALUE_NOT_IN_RANGE):
                case static_cast<int32_t>(Literal::ERROR_VALUE_ABOVE_RANGE):
                case static_cast<int32_t>(Literal::ERROR_VALUE_BELOW_RANGE):
                case static_cast<int32_t>(Literal::ERROR_SIGNAL_VALUE_NOT_SET):
                case static_cast<int32_t>(Literal::ERROR_SIGNAL_VALUE_NOT_AVAILABLE):
                case static_cast<int32_t>(Literal::ERROR_DIVIDEBYZERO):
                case static_cast<int32_t>(Literal::ERROR_OVERFLOW):
                case static_cast<int32_t>(Literal::ERROR_JSON_INVALID):
                case static_cast<int32_t>(Literal::ERROR_DATA_INCOMPLETE):
                case static_cast<int32_t>(Literal::ERROR_OTHER):
                case static_cast<int32_t>(Literal::ERROR_TRIPID_NOT_FOUND):
                case static_cast<int32_t>(Literal::ERROR_STATE_PERMISSION_DENIED):
                case static_cast<int32_t>(Literal::ERROR_CANNOT_CREATE_USER_DIRECTORY):
                case static_cast<int32_t>(Literal::ERROR_EXCEPTION):
                case static_cast<int32_t>(Literal::ERROR_TRIP_NOT_RUNNING):
                case static_cast<int32_t>(Literal::ERROR_TRIP_DISTANCE_THRESH):
                case static_cast<int32_t>(Literal::ERROR_LIBRARY_NOT_INITIALIZED):
                case static_cast<int32_t>(Literal::ERROR_AMT_VEHICLE):
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDpErrorCode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDpErrorCode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDpErrorCode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDpErrorCode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDpErrorCode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDpErrorCode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct sValuesMap : CommonAPI::Struct<double, eDpErrorCode> {
    	
    	sValuesMap() {
    	}
    	sValuesMap(const double &_SigValue, const eDpErrorCode &_errorcode)
    	{
    		std::get<0>(values_) = _SigValue;
    		std::get<1>(values_) = _errorcode;
    	}
    	inline const double &getSigValue() const { return std::get<0>(values_); }
    	inline void setSigValue(const double &_value) { std::get<0>(values_) = _value; }
    	inline const eDpErrorCode &getErrorcode() const { return std::get<1>(values_); }
    	inline void setErrorcode(const eDpErrorCode &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sValuesMap& _other) const {
                return (getSigValue() == _other.getSigValue() && getErrorcode() == _other.getErrorcode());
        }
    	inline bool operator!=(const sValuesMap &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::unordered_map<::v0::com::harman::drivepro::driveProTypeCollection::eSignalNames, ::v0::com::harman::drivepro::driveProTypeCollection::sValuesMap, CommonAPI::EnumHasher<::v0::com::harman::drivepro::driveProTypeCollection::eSignalNames>> signalListValueMap;
    struct sRpmBandInfo : CommonAPI::Struct<double, double, double, double, double, double, double, double, double, double, double, double, double, double> {
    	
    	sRpmBandInfo() {
    	}
    	sRpmBandInfo(const double &_totalTime, const double &_totalDistance, const double &_effRpmTimeAmber, const double &_effRpmTimeAmberPer, const double &_effRpmTimeGreen, const double &_effRpmTimeGreenPer, const double &_effRpmTimeRed, const double &_effRpmTimeRedPer, const double &_effRpmDistAmber, const double &_effRpmDistAmberPer, const double &_effRpmDistGreen, const double &_effRpmDistGreenPer, const double &_effRpmDistRed, const double &_effRpmDistRedPer)
    	{
    		std::get<0>(values_) = _totalTime;
    		std::get<1>(values_) = _totalDistance;
    		std::get<2>(values_) = _effRpmTimeAmber;
    		std::get<3>(values_) = _effRpmTimeAmberPer;
    		std::get<4>(values_) = _effRpmTimeGreen;
    		std::get<5>(values_) = _effRpmTimeGreenPer;
    		std::get<6>(values_) = _effRpmTimeRed;
    		std::get<7>(values_) = _effRpmTimeRedPer;
    		std::get<8>(values_) = _effRpmDistAmber;
    		std::get<9>(values_) = _effRpmDistAmberPer;
    		std::get<10>(values_) = _effRpmDistGreen;
    		std::get<11>(values_) = _effRpmDistGreenPer;
    		std::get<12>(values_) = _effRpmDistRed;
    		std::get<13>(values_) = _effRpmDistRedPer;
    	}
    	inline const double &getTotalTime() const { return std::get<0>(values_); }
    	inline void setTotalTime(const double &_value) { std::get<0>(values_) = _value; }
    	inline const double &getTotalDistance() const { return std::get<1>(values_); }
    	inline void setTotalDistance(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getEffRpmTimeAmber() const { return std::get<2>(values_); }
    	inline void setEffRpmTimeAmber(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getEffRpmTimeAmberPer() const { return std::get<3>(values_); }
    	inline void setEffRpmTimeAmberPer(const double &_value) { std::get<3>(values_) = _value; }
    	inline const double &getEffRpmTimeGreen() const { return std::get<4>(values_); }
    	inline void setEffRpmTimeGreen(const double &_value) { std::get<4>(values_) = _value; }
    	inline const double &getEffRpmTimeGreenPer() const { return std::get<5>(values_); }
    	inline void setEffRpmTimeGreenPer(const double &_value) { std::get<5>(values_) = _value; }
    	inline const double &getEffRpmTimeRed() const { return std::get<6>(values_); }
    	inline void setEffRpmTimeRed(const double &_value) { std::get<6>(values_) = _value; }
    	inline const double &getEffRpmTimeRedPer() const { return std::get<7>(values_); }
    	inline void setEffRpmTimeRedPer(const double &_value) { std::get<7>(values_) = _value; }
    	inline const double &getEffRpmDistAmber() const { return std::get<8>(values_); }
    	inline void setEffRpmDistAmber(const double &_value) { std::get<8>(values_) = _value; }
    	inline const double &getEffRpmDistAmberPer() const { return std::get<9>(values_); }
    	inline void setEffRpmDistAmberPer(const double &_value) { std::get<9>(values_) = _value; }
    	inline const double &getEffRpmDistGreen() const { return std::get<10>(values_); }
    	inline void setEffRpmDistGreen(const double &_value) { std::get<10>(values_) = _value; }
    	inline const double &getEffRpmDistGreenPer() const { return std::get<11>(values_); }
    	inline void setEffRpmDistGreenPer(const double &_value) { std::get<11>(values_) = _value; }
    	inline const double &getEffRpmDistRed() const { return std::get<12>(values_); }
    	inline void setEffRpmDistRed(const double &_value) { std::get<12>(values_) = _value; }
    	inline const double &getEffRpmDistRedPer() const { return std::get<13>(values_); }
    	inline void setEffRpmDistRedPer(const double &_value) { std::get<13>(values_) = _value; }
    	inline bool operator==(const sRpmBandInfo& _other) const {
                return (getTotalTime() == _other.getTotalTime() && getTotalDistance() == _other.getTotalDistance() && getEffRpmTimeAmber() == _other.getEffRpmTimeAmber() && getEffRpmTimeAmberPer() == _other.getEffRpmTimeAmberPer() && getEffRpmTimeGreen() == _other.getEffRpmTimeGreen() && getEffRpmTimeGreenPer() == _other.getEffRpmTimeGreenPer() && getEffRpmTimeRed() == _other.getEffRpmTimeRed() && getEffRpmTimeRedPer() == _other.getEffRpmTimeRedPer() && getEffRpmDistAmber() == _other.getEffRpmDistAmber() && getEffRpmDistAmberPer() == _other.getEffRpmDistAmberPer() && getEffRpmDistGreen() == _other.getEffRpmDistGreen() && getEffRpmDistGreenPer() == _other.getEffRpmDistGreenPer() && getEffRpmDistRed() == _other.getEffRpmDistRed() && getEffRpmDistRedPer() == _other.getEffRpmDistRedPer());
        }
    	inline bool operator!=(const sRpmBandInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    
    struct eDistUnit : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            KILO_METER = 0,
            MILES = 1,
            TOTAL_COUNT = 2,
            UNKNOWN = -1
        };
        
        eDistUnit() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::KILO_METER)) {}
        eDistUnit(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::KILO_METER):
                case static_cast<int32_t>(Literal::MILES):
                case static_cast<int32_t>(Literal::TOTAL_COUNT):
                case static_cast<int32_t>(Literal::UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eDistUnit &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eDistUnit &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eDistUnit &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eDistUnit &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eDistUnit &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eDistUnit &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eFuelUnit : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            KM_PER_LITRE = 0,
            LITRE_PER_HUNDRED_KM = 1,
            MPG = 2,
            SNA = 3,
            TOTAL_COUNT = 4,
            UNKNOWN = -1
        };
        
        eFuelUnit() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::KM_PER_LITRE)) {}
        eFuelUnit(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::KM_PER_LITRE):
                case static_cast<int32_t>(Literal::LITRE_PER_HUNDRED_KM):
                case static_cast<int32_t>(Literal::MPG):
                case static_cast<int32_t>(Literal::SNA):
                case static_cast<int32_t>(Literal::TOTAL_COUNT):
                case static_cast<int32_t>(Literal::UNKNOWN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eFuelUnit &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eFuelUnit &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eFuelUnit &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eFuelUnit &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eFuelUnit &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eFuelUnit &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct sAverageFuelEconomy : CommonAPI::Struct<eTripType, double> {
    	
    	sAverageFuelEconomy() {
    	}
    	sAverageFuelEconomy(const eTripType &_tripType, const double &_averageFuelEconomy)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _averageFuelEconomy;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getAverageFuelEconomy() const { return std::get<1>(values_); }
    	inline void setAverageFuelEconomy(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sAverageFuelEconomy& _other) const {
                return (getTripType() == _other.getTripType() && getAverageFuelEconomy() == _other.getAverageFuelEconomy());
        }
    	inline bool operator!=(const sAverageFuelEconomy &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sEffciencyInfo : CommonAPI::Struct<eTripType, double, double, sAverageFuelEconomy, sRpmBandInfo, double, double> {
    	
    	sEffciencyInfo() {
    	}
    	sEffciencyInfo(const eTripType &_tripType, const double &_fuelEcoInstRating, const double &_fuelEcoCumulativeRating, const sAverageFuelEconomy &_s_averageFuelEconomy, const sRpmBandInfo &_s_rpmBandInfo, const double &_engineIdleTime, const double &_averageSpeed)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _fuelEcoInstRating;
    		std::get<2>(values_) = _fuelEcoCumulativeRating;
    		std::get<3>(values_) = _s_averageFuelEconomy;
    		std::get<4>(values_) = _s_rpmBandInfo;
    		std::get<5>(values_) = _engineIdleTime;
    		std::get<6>(values_) = _averageSpeed;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getFuelEcoInstRating() const { return std::get<1>(values_); }
    	inline void setFuelEcoInstRating(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getFuelEcoCumulativeRating() const { return std::get<2>(values_); }
    	inline void setFuelEcoCumulativeRating(const double &_value) { std::get<2>(values_) = _value; }
    	inline const sAverageFuelEconomy &getS_averageFuelEconomy() const { return std::get<3>(values_); }
    	inline void setS_averageFuelEconomy(const sAverageFuelEconomy &_value) { std::get<3>(values_) = _value; }
    	inline const sRpmBandInfo &getS_rpmBandInfo() const { return std::get<4>(values_); }
    	inline void setS_rpmBandInfo(const sRpmBandInfo &_value) { std::get<4>(values_) = _value; }
    	inline const double &getEngineIdleTime() const { return std::get<5>(values_); }
    	inline void setEngineIdleTime(const double &_value) { std::get<5>(values_) = _value; }
    	inline const double &getAverageSpeed() const { return std::get<6>(values_); }
    	inline void setAverageSpeed(const double &_value) { std::get<6>(values_) = _value; }
    	inline bool operator==(const sEffciencyInfo& _other) const {
                return (getTripType() == _other.getTripType() && getFuelEcoInstRating() == _other.getFuelEcoInstRating() && getFuelEcoCumulativeRating() == _other.getFuelEcoCumulativeRating() && getS_averageFuelEconomy() == _other.getS_averageFuelEconomy() && getS_rpmBandInfo() == _other.getS_rpmBandInfo() && getEngineIdleTime() == _other.getEngineIdleTime() && getAverageSpeed() == _other.getAverageSpeed());
        }
    	inline bool operator!=(const sEffciencyInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sTimeinDifferentSpeedBands : CommonAPI::Struct<eTripType, double, double, double, double, double, double, double, double> {
    	
    	sTimeinDifferentSpeedBands() {
    	}
    	sTimeinDifferentSpeedBands(const eTripType &_tripType, const double &_speedBand1TimePer, const double &_speedBand2TimePer, const double &_speedBand3TimePer, const double &_speedBand4TimePer, const double &_speedBand1Time, const double &_speedBand2Time, const double &_speedBand3Time, const double &_speedBand4Time)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _speedBand1TimePer;
    		std::get<2>(values_) = _speedBand2TimePer;
    		std::get<3>(values_) = _speedBand3TimePer;
    		std::get<4>(values_) = _speedBand4TimePer;
    		std::get<5>(values_) = _speedBand1Time;
    		std::get<6>(values_) = _speedBand2Time;
    		std::get<7>(values_) = _speedBand3Time;
    		std::get<8>(values_) = _speedBand4Time;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getSpeedBand1TimePer() const { return std::get<1>(values_); }
    	inline void setSpeedBand1TimePer(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getSpeedBand2TimePer() const { return std::get<2>(values_); }
    	inline void setSpeedBand2TimePer(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getSpeedBand3TimePer() const { return std::get<3>(values_); }
    	inline void setSpeedBand3TimePer(const double &_value) { std::get<3>(values_) = _value; }
    	inline const double &getSpeedBand4TimePer() const { return std::get<4>(values_); }
    	inline void setSpeedBand4TimePer(const double &_value) { std::get<4>(values_) = _value; }
    	inline const double &getSpeedBand1Time() const { return std::get<5>(values_); }
    	inline void setSpeedBand1Time(const double &_value) { std::get<5>(values_) = _value; }
    	inline const double &getSpeedBand2Time() const { return std::get<6>(values_); }
    	inline void setSpeedBand2Time(const double &_value) { std::get<6>(values_) = _value; }
    	inline const double &getSpeedBand3Time() const { return std::get<7>(values_); }
    	inline void setSpeedBand3Time(const double &_value) { std::get<7>(values_) = _value; }
    	inline const double &getSpeedBand4Time() const { return std::get<8>(values_); }
    	inline void setSpeedBand4Time(const double &_value) { std::get<8>(values_) = _value; }
    	inline bool operator==(const sTimeinDifferentSpeedBands& _other) const {
                return (getTripType() == _other.getTripType() && getSpeedBand1TimePer() == _other.getSpeedBand1TimePer() && getSpeedBand2TimePer() == _other.getSpeedBand2TimePer() && getSpeedBand3TimePer() == _other.getSpeedBand3TimePer() && getSpeedBand4TimePer() == _other.getSpeedBand4TimePer() && getSpeedBand1Time() == _other.getSpeedBand1Time() && getSpeedBand2Time() == _other.getSpeedBand2Time() && getSpeedBand3Time() == _other.getSpeedBand3Time() && getSpeedBand4Time() == _other.getSpeedBand4Time());
        }
    	inline bool operator!=(const sTimeinDifferentSpeedBands &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sDrivingInfo : CommonAPI::Struct<eTripType, double, double, double, double, double, double, double, double, double, double, sTimeinDifferentSpeedBands, double> {
    	
    	sDrivingInfo() {
    	}
    	sDrivingInfo(const eTripType &_tripType, const double &_topSpeed, const double &_correctGearPerTime, const double &_averageAccPedalTravelPosition, const double &_mostUsedGear, const double &_cumulativeRatingofAvgAcc, const double &_cumulativeRatingofAvgBrake, const double &_cumulativeRatingofAvgGear, const double &_instRatingofAvgAcc, const double &_instRatingofAvgBrake, const double &_instRatingofAvgGear, const sTimeinDifferentSpeedBands &_diffSpeedBandsPerTime, const double &_brakingCountPer10Km)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _topSpeed;
    		std::get<2>(values_) = _correctGearPerTime;
    		std::get<3>(values_) = _averageAccPedalTravelPosition;
    		std::get<4>(values_) = _mostUsedGear;
    		std::get<5>(values_) = _cumulativeRatingofAvgAcc;
    		std::get<6>(values_) = _cumulativeRatingofAvgBrake;
    		std::get<7>(values_) = _cumulativeRatingofAvgGear;
    		std::get<8>(values_) = _instRatingofAvgAcc;
    		std::get<9>(values_) = _instRatingofAvgBrake;
    		std::get<10>(values_) = _instRatingofAvgGear;
    		std::get<11>(values_) = _diffSpeedBandsPerTime;
    		std::get<12>(values_) = _brakingCountPer10Km;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getTopSpeed() const { return std::get<1>(values_); }
    	inline void setTopSpeed(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getCorrectGearPerTime() const { return std::get<2>(values_); }
    	inline void setCorrectGearPerTime(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getAverageAccPedalTravelPosition() const { return std::get<3>(values_); }
    	inline void setAverageAccPedalTravelPosition(const double &_value) { std::get<3>(values_) = _value; }
    	inline const double &getMostUsedGear() const { return std::get<4>(values_); }
    	inline void setMostUsedGear(const double &_value) { std::get<4>(values_) = _value; }
    	inline const double &getCumulativeRatingofAvgAcc() const { return std::get<5>(values_); }
    	inline void setCumulativeRatingofAvgAcc(const double &_value) { std::get<5>(values_) = _value; }
    	inline const double &getCumulativeRatingofAvgBrake() const { return std::get<6>(values_); }
    	inline void setCumulativeRatingofAvgBrake(const double &_value) { std::get<6>(values_) = _value; }
    	inline const double &getCumulativeRatingofAvgGear() const { return std::get<7>(values_); }
    	inline void setCumulativeRatingofAvgGear(const double &_value) { std::get<7>(values_) = _value; }
    	inline const double &getInstRatingofAvgAcc() const { return std::get<8>(values_); }
    	inline void setInstRatingofAvgAcc(const double &_value) { std::get<8>(values_) = _value; }
    	inline const double &getInstRatingofAvgBrake() const { return std::get<9>(values_); }
    	inline void setInstRatingofAvgBrake(const double &_value) { std::get<9>(values_) = _value; }
    	inline const double &getInstRatingofAvgGear() const { return std::get<10>(values_); }
    	inline void setInstRatingofAvgGear(const double &_value) { std::get<10>(values_) = _value; }
    	inline const sTimeinDifferentSpeedBands &getDiffSpeedBandsPerTime() const { return std::get<11>(values_); }
    	inline void setDiffSpeedBandsPerTime(const sTimeinDifferentSpeedBands &_value) { std::get<11>(values_) = _value; }
    	inline const double &getBrakingCountPer10Km() const { return std::get<12>(values_); }
    	inline void setBrakingCountPer10Km(const double &_value) { std::get<12>(values_) = _value; }
    	inline bool operator==(const sDrivingInfo& _other) const {
                return (getTripType() == _other.getTripType() && getTopSpeed() == _other.getTopSpeed() && getCorrectGearPerTime() == _other.getCorrectGearPerTime() && getAverageAccPedalTravelPosition() == _other.getAverageAccPedalTravelPosition() && getMostUsedGear() == _other.getMostUsedGear() && getCumulativeRatingofAvgAcc() == _other.getCumulativeRatingofAvgAcc() && getCumulativeRatingofAvgBrake() == _other.getCumulativeRatingofAvgBrake() && getCumulativeRatingofAvgGear() == _other.getCumulativeRatingofAvgGear() && getInstRatingofAvgAcc() == _other.getInstRatingofAvgAcc() && getInstRatingofAvgBrake() == _other.getInstRatingofAvgBrake() && getInstRatingofAvgGear() == _other.getInstRatingofAvgGear() && getDiffSpeedBandsPerTime() == _other.getDiffSpeedBandsPerTime() && getBrakingCountPer10Km() == _other.getBrakingCountPer10Km());
        }
    	inline bool operator!=(const sDrivingInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sSeatBeltPerTime : CommonAPI::Struct<eTripType, double, double, double> {
    	
    	sSeatBeltPerTime() {
    	}
    	sSeatBeltPerTime(const eTripType &_tripType, const double &_perTimeWithoutSeatbelt, const double &_perTimeWithSeatbelt, const double &_seatBeltFactor)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _perTimeWithoutSeatbelt;
    		std::get<2>(values_) = _perTimeWithSeatbelt;
    		std::get<3>(values_) = _seatBeltFactor;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getPerTimeWithoutSeatbelt() const { return std::get<1>(values_); }
    	inline void setPerTimeWithoutSeatbelt(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getPerTimeWithSeatbelt() const { return std::get<2>(values_); }
    	inline void setPerTimeWithSeatbelt(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getSeatBeltFactor() const { return std::get<3>(values_); }
    	inline void setSeatBeltFactor(const double &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sSeatBeltPerTime& _other) const {
                return (getTripType() == _other.getTripType() && getPerTimeWithoutSeatbelt() == _other.getPerTimeWithoutSeatbelt() && getPerTimeWithSeatbelt() == _other.getPerTimeWithSeatbelt() && getSeatBeltFactor() == _other.getSeatBeltFactor());
        }
    	inline bool operator!=(const sSeatBeltPerTime &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sBrakingTypeInfo : CommonAPI::Struct<eTripType, double, double, double, double, double, double, double, double, double, double, double> {
    	
    	sBrakingTypeInfo() {
    	}
    	sBrakingTypeInfo(const eTripType &_tripType, const double &_totalBrk, const double &_normalBrk, const double &_normalBrkPer, const double &_moderateBrk, const double &_moderateBrkPer, const double &_heavyBrk, const double &_heavyBrkPer, const double &_panicBrk, const double &_panicBrkPer, const double &_harshBrk, const double &_harshBrkPer)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _totalBrk;
    		std::get<2>(values_) = _normalBrk;
    		std::get<3>(values_) = _normalBrkPer;
    		std::get<4>(values_) = _moderateBrk;
    		std::get<5>(values_) = _moderateBrkPer;
    		std::get<6>(values_) = _heavyBrk;
    		std::get<7>(values_) = _heavyBrkPer;
    		std::get<8>(values_) = _panicBrk;
    		std::get<9>(values_) = _panicBrkPer;
    		std::get<10>(values_) = _harshBrk;
    		std::get<11>(values_) = _harshBrkPer;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getTotalBrk() const { return std::get<1>(values_); }
    	inline void setTotalBrk(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getNormalBrk() const { return std::get<2>(values_); }
    	inline void setNormalBrk(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getNormalBrkPer() const { return std::get<3>(values_); }
    	inline void setNormalBrkPer(const double &_value) { std::get<3>(values_) = _value; }
    	inline const double &getModerateBrk() const { return std::get<4>(values_); }
    	inline void setModerateBrk(const double &_value) { std::get<4>(values_) = _value; }
    	inline const double &getModerateBrkPer() const { return std::get<5>(values_); }
    	inline void setModerateBrkPer(const double &_value) { std::get<5>(values_) = _value; }
    	inline const double &getHeavyBrk() const { return std::get<6>(values_); }
    	inline void setHeavyBrk(const double &_value) { std::get<6>(values_) = _value; }
    	inline const double &getHeavyBrkPer() const { return std::get<7>(values_); }
    	inline void setHeavyBrkPer(const double &_value) { std::get<7>(values_) = _value; }
    	inline const double &getPanicBrk() const { return std::get<8>(values_); }
    	inline void setPanicBrk(const double &_value) { std::get<8>(values_) = _value; }
    	inline const double &getPanicBrkPer() const { return std::get<9>(values_); }
    	inline void setPanicBrkPer(const double &_value) { std::get<9>(values_) = _value; }
    	inline const double &getHarshBrk() const { return std::get<10>(values_); }
    	inline void setHarshBrk(const double &_value) { std::get<10>(values_) = _value; }
    	inline const double &getHarshBrkPer() const { return std::get<11>(values_); }
    	inline void setHarshBrkPer(const double &_value) { std::get<11>(values_) = _value; }
    	inline bool operator==(const sBrakingTypeInfo& _other) const {
                return (getTripType() == _other.getTripType() && getTotalBrk() == _other.getTotalBrk() && getNormalBrk() == _other.getNormalBrk() && getNormalBrkPer() == _other.getNormalBrkPer() && getModerateBrk() == _other.getModerateBrk() && getModerateBrkPer() == _other.getModerateBrkPer() && getHeavyBrk() == _other.getHeavyBrk() && getHeavyBrkPer() == _other.getHeavyBrkPer() && getPanicBrk() == _other.getPanicBrk() && getPanicBrkPer() == _other.getPanicBrkPer() && getHarshBrk() == _other.getHarshBrk() && getHarshBrkPer() == _other.getHarshBrkPer());
        }
    	inline bool operator!=(const sBrakingTypeInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sSafetyInfo : CommonAPI::Struct<double, sSeatBeltPerTime, double, sBrakingTypeInfo> {
    	
    	sSafetyInfo() {
    	}
    	sSafetyInfo(const double &_safetyInstRating, const sSeatBeltPerTime &_s_seatBeltPerTime, const double &_averageSpeed, const sBrakingTypeInfo &_s_breakingtypeInfo)
    	{
    		std::get<0>(values_) = _safetyInstRating;
    		std::get<1>(values_) = _s_seatBeltPerTime;
    		std::get<2>(values_) = _averageSpeed;
    		std::get<3>(values_) = _s_breakingtypeInfo;
    	}
    	inline const double &getSafetyInstRating() const { return std::get<0>(values_); }
    	inline void setSafetyInstRating(const double &_value) { std::get<0>(values_) = _value; }
    	inline const sSeatBeltPerTime &getS_seatBeltPerTime() const { return std::get<1>(values_); }
    	inline void setS_seatBeltPerTime(const sSeatBeltPerTime &_value) { std::get<1>(values_) = _value; }
    	inline const double &getAverageSpeed() const { return std::get<2>(values_); }
    	inline void setAverageSpeed(const double &_value) { std::get<2>(values_) = _value; }
    	inline const sBrakingTypeInfo &getS_breakingtypeInfo() const { return std::get<3>(values_); }
    	inline void setS_breakingtypeInfo(const sBrakingTypeInfo &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sSafetyInfo& _other) const {
                return (getSafetyInstRating() == _other.getSafetyInstRating() && getS_seatBeltPerTime() == _other.getS_seatBeltPerTime() && getAverageSpeed() == _other.getAverageSpeed() && getS_breakingtypeInfo() == _other.getS_breakingtypeInfo());
        }
    	inline bool operator!=(const sSafetyInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sUserInfo : CommonAPI::Struct<std::string, std::string, std::string> {
    	
    	sUserInfo() {
    	}
    	sUserInfo(const std::string &_userName, const std::string &_userImage, const std::string &_userLevel)
    	{
    		std::get<0>(values_) = _userName;
    		std::get<1>(values_) = _userImage;
    		std::get<2>(values_) = _userLevel;
    	}
    	inline const std::string &getUserName() const { return std::get<0>(values_); }
    	inline void setUserName(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getUserImage() const { return std::get<1>(values_); }
    	inline void setUserImage(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getUserLevel() const { return std::get<2>(values_); }
    	inline void setUserLevel(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const sUserInfo& _other) const {
                return (getUserName() == _other.getUserName() && getUserImage() == _other.getUserImage() && getUserLevel() == _other.getUserLevel());
        }
    	inline bool operator!=(const sUserInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sEngineRPMInfo : CommonAPI::Struct<eTripType, double> {
    	
    	sEngineRPMInfo() {
    	}
    	sEngineRPMInfo(const eTripType &_tripType, const double &_avgEngineRPM)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _avgEngineRPM;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getAvgEngineRPM() const { return std::get<1>(values_); }
    	inline void setAvgEngineRPM(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sEngineRPMInfo& _other) const {
                return (getTripType() == _other.getTripType() && getAvgEngineRPM() == _other.getAvgEngineRPM());
        }
    	inline bool operator!=(const sEngineRPMInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sAcOnOffDrivingTimeInfo : CommonAPI::Struct<eTripType, uint32_t, double, uint32_t> {
    	
    	sAcOnOffDrivingTimeInfo() {
    	}
    	sAcOnOffDrivingTimeInfo(const eTripType &_tripType, const uint32_t &_acOnTime, const double &_acOnPercentage, const uint32_t &_totalTime)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _acOnTime;
    		std::get<2>(values_) = _acOnPercentage;
    		std::get<3>(values_) = _totalTime;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getAcOnTime() const { return std::get<1>(values_); }
    	inline void setAcOnTime(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const double &getAcOnPercentage() const { return std::get<2>(values_); }
    	inline void setAcOnPercentage(const double &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getTotalTime() const { return std::get<3>(values_); }
    	inline void setTotalTime(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sAcOnOffDrivingTimeInfo& _other) const {
                return (getTripType() == _other.getTripType() && getAcOnTime() == _other.getAcOnTime() && getAcOnPercentage() == _other.getAcOnPercentage() && getTotalTime() == _other.getTotalTime());
        }
    	inline bool operator!=(const sAcOnOffDrivingTimeInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sClutchAccPedalUsageInfo : CommonAPI::Struct<eTripType, uint32_t, double> {
    	
    	sClutchAccPedalUsageInfo() {
    	}
    	sClutchAccPedalUsageInfo(const eTripType &_tripType, const uint32_t &_cltAccTime, const double &_cltAccTimePer)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _cltAccTime;
    		std::get<2>(values_) = _cltAccTimePer;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getCltAccTime() const { return std::get<1>(values_); }
    	inline void setCltAccTime(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const double &getCltAccTimePer() const { return std::get<2>(values_); }
    	inline void setCltAccTimePer(const double &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const sClutchAccPedalUsageInfo& _other) const {
                return (getTripType() == _other.getTripType() && getCltAccTime() == _other.getCltAccTime() && getCltAccTimePer() == _other.getCltAccTimePer());
        }
    	inline bool operator!=(const sClutchAccPedalUsageInfo &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sBrakingInstRating : CommonAPI::Struct<eTripType, double, double, uint32_t> {
    	
    	sBrakingInstRating() {
    	}
    	sBrakingInstRating(const eTripType &_tripType, const double &_brkInstRating, const double &_accln, const uint32_t &_noOfBrkCycle)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _brkInstRating;
    		std::get<2>(values_) = _accln;
    		std::get<3>(values_) = _noOfBrkCycle;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getBrkInstRating() const { return std::get<1>(values_); }
    	inline void setBrkInstRating(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getAccln() const { return std::get<2>(values_); }
    	inline void setAccln(const double &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getNoOfBrkCycle() const { return std::get<3>(values_); }
    	inline void setNoOfBrkCycle(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sBrakingInstRating& _other) const {
                return (getTripType() == _other.getTripType() && getBrkInstRating() == _other.getBrkInstRating() && getAccln() == _other.getAccln() && getNoOfBrkCycle() == _other.getNoOfBrkCycle());
        }
    	inline bool operator!=(const sBrakingInstRating &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sBreakingCountPerReqKM : CommonAPI::Struct<eTripType, double, double> {
    	
    	sBreakingCountPerReqKM() {
    	}
    	sBreakingCountPerReqKM(const eTripType &_tripType, const double &_avgBrkCount, const double &_odoDistPerTrip)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _avgBrkCount;
    		std::get<2>(values_) = _odoDistPerTrip;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getAvgBrkCount() const { return std::get<1>(values_); }
    	inline void setAvgBrkCount(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getOdoDistPerTrip() const { return std::get<2>(values_); }
    	inline void setOdoDistPerTrip(const double &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const sBreakingCountPerReqKM& _other) const {
                return (getTripType() == _other.getTripType() && getAvgBrkCount() == _other.getAvgBrkCount() && getOdoDistPerTrip() == _other.getOdoDistPerTrip());
        }
    	inline bool operator!=(const sBreakingCountPerReqKM &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sAccPedalPosAnalytics : CommonAPI::Struct<eTripType, uint32_t, uint32_t, uint32_t, double, uint32_t, double, uint32_t, double, uint32_t, double, uint32_t, double> {
    	
    	sAccPedalPosAnalytics() {
    	}
    	sAccPedalPosAnalytics(const eTripType &_tripType, const uint32_t &_TotalTravelTime, const uint32_t &_TotalAccPedalPressTime, const uint32_t &_AccPedalPressRange1, const double &_AccPedalPressRange1Per, const uint32_t &_AccPedalPressRange2, const double &_AccPedalPressRange2Per, const uint32_t &_AccPedalPressRange3, const double &_AccPedalPressRange3Per, const uint32_t &_AccPedalPressRange4, const double &_AccPedalPressRange4Per, const uint32_t &_AccPedalPressNo, const double &_AccPedalPresNoPer)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _TotalTravelTime;
    		std::get<2>(values_) = _TotalAccPedalPressTime;
    		std::get<3>(values_) = _AccPedalPressRange1;
    		std::get<4>(values_) = _AccPedalPressRange1Per;
    		std::get<5>(values_) = _AccPedalPressRange2;
    		std::get<6>(values_) = _AccPedalPressRange2Per;
    		std::get<7>(values_) = _AccPedalPressRange3;
    		std::get<8>(values_) = _AccPedalPressRange3Per;
    		std::get<9>(values_) = _AccPedalPressRange4;
    		std::get<10>(values_) = _AccPedalPressRange4Per;
    		std::get<11>(values_) = _AccPedalPressNo;
    		std::get<12>(values_) = _AccPedalPresNoPer;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getTotalTravelTime() const { return std::get<1>(values_); }
    	inline void setTotalTravelTime(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline const uint32_t &getTotalAccPedalPressTime() const { return std::get<2>(values_); }
    	inline void setTotalAccPedalPressTime(const uint32_t &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getAccPedalPressRange1() const { return std::get<3>(values_); }
    	inline void setAccPedalPressRange1(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline const double &getAccPedalPressRange1Per() const { return std::get<4>(values_); }
    	inline void setAccPedalPressRange1Per(const double &_value) { std::get<4>(values_) = _value; }
    	inline const uint32_t &getAccPedalPressRange2() const { return std::get<5>(values_); }
    	inline void setAccPedalPressRange2(const uint32_t &_value) { std::get<5>(values_) = _value; }
    	inline const double &getAccPedalPressRange2Per() const { return std::get<6>(values_); }
    	inline void setAccPedalPressRange2Per(const double &_value) { std::get<6>(values_) = _value; }
    	inline const uint32_t &getAccPedalPressRange3() const { return std::get<7>(values_); }
    	inline void setAccPedalPressRange3(const uint32_t &_value) { std::get<7>(values_) = _value; }
    	inline const double &getAccPedalPressRange3Per() const { return std::get<8>(values_); }
    	inline void setAccPedalPressRange3Per(const double &_value) { std::get<8>(values_) = _value; }
    	inline const uint32_t &getAccPedalPressRange4() const { return std::get<9>(values_); }
    	inline void setAccPedalPressRange4(const uint32_t &_value) { std::get<9>(values_) = _value; }
    	inline const double &getAccPedalPressRange4Per() const { return std::get<10>(values_); }
    	inline void setAccPedalPressRange4Per(const double &_value) { std::get<10>(values_) = _value; }
    	inline const uint32_t &getAccPedalPressNo() const { return std::get<11>(values_); }
    	inline void setAccPedalPressNo(const uint32_t &_value) { std::get<11>(values_) = _value; }
    	inline const double &getAccPedalPresNoPer() const { return std::get<12>(values_); }
    	inline void setAccPedalPresNoPer(const double &_value) { std::get<12>(values_) = _value; }
    	inline bool operator==(const sAccPedalPosAnalytics& _other) const {
                return (getTripType() == _other.getTripType() && getTotalTravelTime() == _other.getTotalTravelTime() && getTotalAccPedalPressTime() == _other.getTotalAccPedalPressTime() && getAccPedalPressRange1() == _other.getAccPedalPressRange1() && getAccPedalPressRange1Per() == _other.getAccPedalPressRange1Per() && getAccPedalPressRange2() == _other.getAccPedalPressRange2() && getAccPedalPressRange2Per() == _other.getAccPedalPressRange2Per() && getAccPedalPressRange3() == _other.getAccPedalPressRange3() && getAccPedalPressRange3Per() == _other.getAccPedalPressRange3Per() && getAccPedalPressRange4() == _other.getAccPedalPressRange4() && getAccPedalPressRange4Per() == _other.getAccPedalPressRange4Per() && getAccPedalPressNo() == _other.getAccPedalPressNo() && getAccPedalPresNoPer() == _other.getAccPedalPresNoPer());
        }
    	inline bool operator!=(const sAccPedalPosAnalytics &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sAccInstRating : CommonAPI::Struct<eTripType, double> {
    	
    	sAccInstRating() {
    	}
    	sAccInstRating(const eTripType &_tripType, const double &_accInstRating)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _accInstRating;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getAccInstRating() const { return std::get<1>(values_); }
    	inline void setAccInstRating(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sAccInstRating& _other) const {
                return (getTripType() == _other.getTripType() && getAccInstRating() == _other.getAccInstRating());
        }
    	inline bool operator!=(const sAccInstRating &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sAccCumulativeRating : CommonAPI::Struct<eTripType, double> {
    	
    	sAccCumulativeRating() {
    	}
    	sAccCumulativeRating(const eTripType &_tripType, const double &_accCumulativeRating)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _accCumulativeRating;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getAccCumulativeRating() const { return std::get<1>(values_); }
    	inline void setAccCumulativeRating(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sAccCumulativeRating& _other) const {
                return (getTripType() == _other.getTripType() && getAccCumulativeRating() == _other.getAccCumulativeRating());
        }
    	inline bool operator!=(const sAccCumulativeRating &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sAccHarshCount : CommonAPI::Struct<eTripType, double> {
    	
    	sAccHarshCount() {
    	}
    	sAccHarshCount(const eTripType &_tripType, const double &_accHarshCount)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _accHarshCount;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getAccHarshCount() const { return std::get<1>(values_); }
    	inline void setAccHarshCount(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sAccHarshCount& _other) const {
                return (getTripType() == _other.getTripType() && getAccHarshCount() == _other.getAccHarshCount());
        }
    	inline bool operator!=(const sAccHarshCount &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sAvgAccPedalPos : CommonAPI::Struct<eTripType, double> {
    	
    	sAvgAccPedalPos() {
    	}
    	sAvgAccPedalPos(const eTripType &_tripType, const double &_avgAccPedalPos)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _avgAccPedalPos;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getAvgAccPedalPos() const { return std::get<1>(values_); }
    	inline void setAvgAccPedalPos(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sAvgAccPedalPos& _other) const {
                return (getTripType() == _other.getTripType() && getAvgAccPedalPos() == _other.getAvgAccPedalPos());
        }
    	inline bool operator!=(const sAvgAccPedalPos &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sGSCumRating : CommonAPI::Struct<eTripType, double> {
    	
    	sGSCumRating() {
    	}
    	sGSCumRating(const eTripType &_tripType, const double &_gSCumRating)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _gSCumRating;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getGSCumRating() const { return std::get<1>(values_); }
    	inline void setGSCumRating(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sGSCumRating& _other) const {
                return (getTripType() == _other.getTripType() && getGSCumRating() == _other.getGSCumRating());
        }
    	inline bool operator!=(const sGSCumRating &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sDriveKmTimeVsGearNumberRating : CommonAPI::Struct<eTripType, std::vector<double>, double, std::vector<double>, std::vector<double>, double, std::vector<double>, uint32_t> {
    	
    	sDriveKmTimeVsGearNumberRating() {
    	}
    	sDriveKmTimeVsGearNumberRating(const eTripType &_tripType, const std::vector<double> &_gearDistance, const double &_totalDistanceValidGear, const std::vector<double> &_gearDistancePercentage, const std::vector<double> &_gearTime, const double &_totalTimeValidGear, const std::vector<double> &_gearTimePercentage, const uint32_t &_mostTimeGear)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _gearDistance;
    		std::get<2>(values_) = _totalDistanceValidGear;
    		std::get<3>(values_) = _gearDistancePercentage;
    		std::get<4>(values_) = _gearTime;
    		std::get<5>(values_) = _totalTimeValidGear;
    		std::get<6>(values_) = _gearTimePercentage;
    		std::get<7>(values_) = _mostTimeGear;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const std::vector<double> &getGearDistance() const { return std::get<1>(values_); }
    	inline void setGearDistance(const std::vector<double> &_value) { std::get<1>(values_) = _value; }
    	inline const double &getTotalDistanceValidGear() const { return std::get<2>(values_); }
    	inline void setTotalDistanceValidGear(const double &_value) { std::get<2>(values_) = _value; }
    	inline const std::vector<double> &getGearDistancePercentage() const { return std::get<3>(values_); }
    	inline void setGearDistancePercentage(const std::vector<double> &_value) { std::get<3>(values_) = _value; }
    	inline const std::vector<double> &getGearTime() const { return std::get<4>(values_); }
    	inline void setGearTime(const std::vector<double> &_value) { std::get<4>(values_) = _value; }
    	inline const double &getTotalTimeValidGear() const { return std::get<5>(values_); }
    	inline void setTotalTimeValidGear(const double &_value) { std::get<5>(values_) = _value; }
    	inline const std::vector<double> &getGearTimePercentage() const { return std::get<6>(values_); }
    	inline void setGearTimePercentage(const std::vector<double> &_value) { std::get<6>(values_) = _value; }
    	inline const uint32_t &getMostTimeGear() const { return std::get<7>(values_); }
    	inline void setMostTimeGear(const uint32_t &_value) { std::get<7>(values_) = _value; }
    	inline bool operator==(const sDriveKmTimeVsGearNumberRating& _other) const {
                return (getTripType() == _other.getTripType() && getGearDistance() == _other.getGearDistance() && getTotalDistanceValidGear() == _other.getTotalDistanceValidGear() && getGearDistancePercentage() == _other.getGearDistancePercentage() && getGearTime() == _other.getGearTime() && getTotalTimeValidGear() == _other.getTotalTimeValidGear() && getGearTimePercentage() == _other.getGearTimePercentage() && getMostTimeGear() == _other.getMostTimeGear());
        }
    	inline bool operator!=(const sDriveKmTimeVsGearNumberRating &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sDriveKmTimeInIncorrectGear : CommonAPI::Struct<eTripType, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, uint32_t, uint32_t, uint32_t, double, double, double, double, double> {
    	
    	sDriveKmTimeInIncorrectGear() {
    	}
    	sDriveKmTimeInIncorrectGear(const eTripType &_tripType, const double &_TotalDistValidGear, const double &_TotalDistWrongGear, const double &_TotalDistDownIndi, const double &_TotalDistUpIndi, const double &_AvgDistWrongIndi, const double &_AvgDistDownIndi, const double &_AvgDistUpIndi, const double &_TotalDistWrongGearPer, const double &_TotalDistDownIndiPer, const double &_TotalDistUpIndiPer, const double &_TotalTimeValidGear, const double &_TotalTimeWrongGear, const double &_TotalTimeDownIndi, const double &_TotalTimeUpIndi, const double &_TotalTimeWrongGearPer, const double &_TotalTimeDownIndiPer, const double &_TotalTimeUpIndiPer, const uint32_t &_TotalCountWrongGear, const uint32_t &_TotalCountDownIndi, const uint32_t &_TotalCountUpIndi, const double &_TotalCountDownIndiPer, const double &_TotalCountUpIndiPer, const double &_AvgCountUpIndi, const double &_AvgCountDownIndi, const double &_TotalTimeCorrectGearPer)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _TotalDistValidGear;
    		std::get<2>(values_) = _TotalDistWrongGear;
    		std::get<3>(values_) = _TotalDistDownIndi;
    		std::get<4>(values_) = _TotalDistUpIndi;
    		std::get<5>(values_) = _AvgDistWrongIndi;
    		std::get<6>(values_) = _AvgDistDownIndi;
    		std::get<7>(values_) = _AvgDistUpIndi;
    		std::get<8>(values_) = _TotalDistWrongGearPer;
    		std::get<9>(values_) = _TotalDistDownIndiPer;
    		std::get<10>(values_) = _TotalDistUpIndiPer;
    		std::get<11>(values_) = _TotalTimeValidGear;
    		std::get<12>(values_) = _TotalTimeWrongGear;
    		std::get<13>(values_) = _TotalTimeDownIndi;
    		std::get<14>(values_) = _TotalTimeUpIndi;
    		std::get<15>(values_) = _TotalTimeWrongGearPer;
    		std::get<16>(values_) = _TotalTimeDownIndiPer;
    		std::get<17>(values_) = _TotalTimeUpIndiPer;
    		std::get<18>(values_) = _TotalCountWrongGear;
    		std::get<19>(values_) = _TotalCountDownIndi;
    		std::get<20>(values_) = _TotalCountUpIndi;
    		std::get<21>(values_) = _TotalCountDownIndiPer;
    		std::get<22>(values_) = _TotalCountUpIndiPer;
    		std::get<23>(values_) = _AvgCountUpIndi;
    		std::get<24>(values_) = _AvgCountDownIndi;
    		std::get<25>(values_) = _TotalTimeCorrectGearPer;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getTotalDistValidGear() const { return std::get<1>(values_); }
    	inline void setTotalDistValidGear(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getTotalDistWrongGear() const { return std::get<2>(values_); }
    	inline void setTotalDistWrongGear(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getTotalDistDownIndi() const { return std::get<3>(values_); }
    	inline void setTotalDistDownIndi(const double &_value) { std::get<3>(values_) = _value; }
    	inline const double &getTotalDistUpIndi() const { return std::get<4>(values_); }
    	inline void setTotalDistUpIndi(const double &_value) { std::get<4>(values_) = _value; }
    	inline const double &getAvgDistWrongIndi() const { return std::get<5>(values_); }
    	inline void setAvgDistWrongIndi(const double &_value) { std::get<5>(values_) = _value; }
    	inline const double &getAvgDistDownIndi() const { return std::get<6>(values_); }
    	inline void setAvgDistDownIndi(const double &_value) { std::get<6>(values_) = _value; }
    	inline const double &getAvgDistUpIndi() const { return std::get<7>(values_); }
    	inline void setAvgDistUpIndi(const double &_value) { std::get<7>(values_) = _value; }
    	inline const double &getTotalDistWrongGearPer() const { return std::get<8>(values_); }
    	inline void setTotalDistWrongGearPer(const double &_value) { std::get<8>(values_) = _value; }
    	inline const double &getTotalDistDownIndiPer() const { return std::get<9>(values_); }
    	inline void setTotalDistDownIndiPer(const double &_value) { std::get<9>(values_) = _value; }
    	inline const double &getTotalDistUpIndiPer() const { return std::get<10>(values_); }
    	inline void setTotalDistUpIndiPer(const double &_value) { std::get<10>(values_) = _value; }
    	inline const double &getTotalTimeValidGear() const { return std::get<11>(values_); }
    	inline void setTotalTimeValidGear(const double &_value) { std::get<11>(values_) = _value; }
    	inline const double &getTotalTimeWrongGear() const { return std::get<12>(values_); }
    	inline void setTotalTimeWrongGear(const double &_value) { std::get<12>(values_) = _value; }
    	inline const double &getTotalTimeDownIndi() const { return std::get<13>(values_); }
    	inline void setTotalTimeDownIndi(const double &_value) { std::get<13>(values_) = _value; }
    	inline const double &getTotalTimeUpIndi() const { return std::get<14>(values_); }
    	inline void setTotalTimeUpIndi(const double &_value) { std::get<14>(values_) = _value; }
    	inline const double &getTotalTimeWrongGearPer() const { return std::get<15>(values_); }
    	inline void setTotalTimeWrongGearPer(const double &_value) { std::get<15>(values_) = _value; }
    	inline const double &getTotalTimeDownIndiPer() const { return std::get<16>(values_); }
    	inline void setTotalTimeDownIndiPer(const double &_value) { std::get<16>(values_) = _value; }
    	inline const double &getTotalTimeUpIndiPer() const { return std::get<17>(values_); }
    	inline void setTotalTimeUpIndiPer(const double &_value) { std::get<17>(values_) = _value; }
    	inline const uint32_t &getTotalCountWrongGear() const { return std::get<18>(values_); }
    	inline void setTotalCountWrongGear(const uint32_t &_value) { std::get<18>(values_) = _value; }
    	inline const uint32_t &getTotalCountDownIndi() const { return std::get<19>(values_); }
    	inline void setTotalCountDownIndi(const uint32_t &_value) { std::get<19>(values_) = _value; }
    	inline const uint32_t &getTotalCountUpIndi() const { return std::get<20>(values_); }
    	inline void setTotalCountUpIndi(const uint32_t &_value) { std::get<20>(values_) = _value; }
    	inline const double &getTotalCountDownIndiPer() const { return std::get<21>(values_); }
    	inline void setTotalCountDownIndiPer(const double &_value) { std::get<21>(values_) = _value; }
    	inline const double &getTotalCountUpIndiPer() const { return std::get<22>(values_); }
    	inline void setTotalCountUpIndiPer(const double &_value) { std::get<22>(values_) = _value; }
    	inline const double &getAvgCountUpIndi() const { return std::get<23>(values_); }
    	inline void setAvgCountUpIndi(const double &_value) { std::get<23>(values_) = _value; }
    	inline const double &getAvgCountDownIndi() const { return std::get<24>(values_); }
    	inline void setAvgCountDownIndi(const double &_value) { std::get<24>(values_) = _value; }
    	inline const double &getTotalTimeCorrectGearPer() const { return std::get<25>(values_); }
    	inline void setTotalTimeCorrectGearPer(const double &_value) { std::get<25>(values_) = _value; }
    	inline bool operator==(const sDriveKmTimeInIncorrectGear& _other) const {
                return (getTripType() == _other.getTripType() && getTotalDistValidGear() == _other.getTotalDistValidGear() && getTotalDistWrongGear() == _other.getTotalDistWrongGear() && getTotalDistDownIndi() == _other.getTotalDistDownIndi() && getTotalDistUpIndi() == _other.getTotalDistUpIndi() && getAvgDistWrongIndi() == _other.getAvgDistWrongIndi() && getAvgDistDownIndi() == _other.getAvgDistDownIndi() && getAvgDistUpIndi() == _other.getAvgDistUpIndi() && getTotalDistWrongGearPer() == _other.getTotalDistWrongGearPer() && getTotalDistDownIndiPer() == _other.getTotalDistDownIndiPer() && getTotalDistUpIndiPer() == _other.getTotalDistUpIndiPer() && getTotalTimeValidGear() == _other.getTotalTimeValidGear() && getTotalTimeWrongGear() == _other.getTotalTimeWrongGear() && getTotalTimeDownIndi() == _other.getTotalTimeDownIndi() && getTotalTimeUpIndi() == _other.getTotalTimeUpIndi() && getTotalTimeWrongGearPer() == _other.getTotalTimeWrongGearPer() && getTotalTimeDownIndiPer() == _other.getTotalTimeDownIndiPer() && getTotalTimeUpIndiPer() == _other.getTotalTimeUpIndiPer() && getTotalCountWrongGear() == _other.getTotalCountWrongGear() && getTotalCountDownIndi() == _other.getTotalCountDownIndi() && getTotalCountUpIndi() == _other.getTotalCountUpIndi() && getTotalCountDownIndiPer() == _other.getTotalCountDownIndiPer() && getTotalCountUpIndiPer() == _other.getTotalCountUpIndiPer() && getAvgCountUpIndi() == _other.getAvgCountUpIndi() && getAvgCountDownIndi() == _other.getAvgCountDownIndi() && getTotalTimeCorrectGearPer() == _other.getTotalTimeCorrectGearPer());
        }
    	inline bool operator!=(const sDriveKmTimeInIncorrectGear &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sNumberGearShiftsPerRequiredkms : CommonAPI::Struct<eTripType, double, double, uint32_t> {
    	
    	sNumberGearShiftsPerRequiredkms() {
    	}
    	sNumberGearShiftsPerRequiredkms(const eTripType &_tripType, const double &_odoDistancePerTrip, const double &_averageGearShifts, const uint32_t &_numberOfGearShifts)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _odoDistancePerTrip;
    		std::get<2>(values_) = _averageGearShifts;
    		std::get<3>(values_) = _numberOfGearShifts;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getOdoDistancePerTrip() const { return std::get<1>(values_); }
    	inline void setOdoDistancePerTrip(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getAverageGearShifts() const { return std::get<2>(values_); }
    	inline void setAverageGearShifts(const double &_value) { std::get<2>(values_) = _value; }
    	inline const uint32_t &getNumberOfGearShifts() const { return std::get<3>(values_); }
    	inline void setNumberOfGearShifts(const uint32_t &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sNumberGearShiftsPerRequiredkms& _other) const {
                return (getTripType() == _other.getTripType() && getOdoDistancePerTrip() == _other.getOdoDistancePerTrip() && getAverageGearShifts() == _other.getAverageGearShifts() && getNumberOfGearShifts() == _other.getNumberOfGearShifts());
        }
    	inline bool operator!=(const sNumberGearShiftsPerRequiredkms &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sTopSpeed : CommonAPI::Struct<eTripType, double> {
    	
    	sTopSpeed() {
    	}
    	sTopSpeed(const eTripType &_tripType, const double &_topSpeed)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _topSpeed;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getTopSpeed() const { return std::get<1>(values_); }
    	inline void setTopSpeed(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sTopSpeed& _other) const {
                return (getTripType() == _other.getTripType() && getTopSpeed() == _other.getTopSpeed());
        }
    	inline bool operator!=(const sTopSpeed &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sDriveCumuRating : CommonAPI::Struct<eTripType, double> {
    	
    	sDriveCumuRating() {
    	}
    	sDriveCumuRating(const eTripType &_tripType, const double &_driveCumuRating)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _driveCumuRating;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getDriveCumuRating() const { return std::get<1>(values_); }
    	inline void setDriveCumuRating(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sDriveCumuRating& _other) const {
                return (getTripType() == _other.getTripType() && getDriveCumuRating() == _other.getDriveCumuRating());
        }
    	inline bool operator!=(const sDriveCumuRating &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sTripDistance : CommonAPI::Struct<eTripType, double> {
    	
    	sTripDistance() {
    	}
    	sTripDistance(const eTripType &_tripType, const double &_tripDistance)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _tripDistance;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getTripDistance() const { return std::get<1>(values_); }
    	inline void setTripDistance(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sTripDistance& _other) const {
                return (getTripType() == _other.getTripType() && getTripDistance() == _other.getTripDistance());
        }
    	inline bool operator!=(const sTripDistance &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sTripDuration : CommonAPI::Struct<eTripType, uint32_t> {
    	
    	sTripDuration() {
    	}
    	sTripDuration(const eTripType &_tripType, const uint32_t &_tripDuration)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _tripDuration;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const uint32_t &getTripDuration() const { return std::get<1>(values_); }
    	inline void setTripDuration(const uint32_t &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sTripDuration& _other) const {
                return (getTripType() == _other.getTripType() && getTripDuration() == _other.getTripDuration());
        }
    	inline bool operator!=(const sTripDuration &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sAverageSpeed : CommonAPI::Struct<eTripType, double> {
    	
    	sAverageSpeed() {
    	}
    	sAverageSpeed(const eTripType &_tripType, const double &_averageSpeed)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _averageSpeed;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getAverageSpeed() const { return std::get<1>(values_); }
    	inline void setAverageSpeed(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sAverageSpeed& _other) const {
                return (getTripType() == _other.getTripType() && getAverageSpeed() == _other.getAverageSpeed());
        }
    	inline bool operator!=(const sAverageSpeed &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sOverallScoreCumRating : CommonAPI::Struct<eTripType, double> {
    	
    	sOverallScoreCumRating() {
    	}
    	sOverallScoreCumRating(const eTripType &_tripType, const double &_overallScoreCumRating)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _overallScoreCumRating;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getOverallScoreCumRating() const { return std::get<1>(values_); }
    	inline void setOverallScoreCumRating(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sOverallScoreCumRating& _other) const {
                return (getTripType() == _other.getTripType() && getOverallScoreCumRating() == _other.getOverallScoreCumRating());
        }
    	inline bool operator!=(const sOverallScoreCumRating &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sPerTimeWithoutSeatBelt : CommonAPI::Struct<eTripType, double, double, double> {
    	
    	sPerTimeWithoutSeatBelt() {
    	}
    	sPerTimeWithoutSeatBelt(const eTripType &_tripType, const double &_noOfTimeWithoutSeatbelt, const double &_noOfTimeWithSeatbelt, const double &_noOfTimeWithoutSeatbeltPer)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _noOfTimeWithoutSeatbelt;
    		std::get<2>(values_) = _noOfTimeWithSeatbelt;
    		std::get<3>(values_) = _noOfTimeWithoutSeatbeltPer;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getNoOfTimeWithoutSeatbelt() const { return std::get<1>(values_); }
    	inline void setNoOfTimeWithoutSeatbelt(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getNoOfTimeWithSeatbelt() const { return std::get<2>(values_); }
    	inline void setNoOfTimeWithSeatbelt(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getNoOfTimeWithoutSeatbeltPer() const { return std::get<3>(values_); }
    	inline void setNoOfTimeWithoutSeatbeltPer(const double &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sPerTimeWithoutSeatBelt& _other) const {
                return (getTripType() == _other.getTripType() && getNoOfTimeWithoutSeatbelt() == _other.getNoOfTimeWithoutSeatbelt() && getNoOfTimeWithSeatbelt() == _other.getNoOfTimeWithSeatbelt() && getNoOfTimeWithoutSeatbeltPer() == _other.getNoOfTimeWithoutSeatbeltPer());
        }
    	inline bool operator!=(const sPerTimeWithoutSeatBelt &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sTimeDoorUnlocked : CommonAPI::Struct<eTripType, double, double, double> {
    	
    	sTimeDoorUnlocked() {
    	}
    	sTimeDoorUnlocked(const eTripType &_tripType, const double &_doorCloseTimePer, const double &_doorOpenTimePer, const double &_doorOpenTime)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _doorCloseTimePer;
    		std::get<2>(values_) = _doorOpenTimePer;
    		std::get<3>(values_) = _doorOpenTime;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getDoorCloseTimePer() const { return std::get<1>(values_); }
    	inline void setDoorCloseTimePer(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getDoorOpenTimePer() const { return std::get<2>(values_); }
    	inline void setDoorOpenTimePer(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getDoorOpenTime() const { return std::get<3>(values_); }
    	inline void setDoorOpenTime(const double &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const sTimeDoorUnlocked& _other) const {
                return (getTripType() == _other.getTripType() && getDoorCloseTimePer() == _other.getDoorCloseTimePer() && getDoorOpenTimePer() == _other.getDoorOpenTimePer() && getDoorOpenTime() == _other.getDoorOpenTime());
        }
    	inline bool operator!=(const sTimeDoorUnlocked &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sClutchBrakingAtHighSpeed : CommonAPI::Struct<eTripType, double, double> {
    	
    	sClutchBrakingAtHighSpeed() {
    	}
    	sClutchBrakingAtHighSpeed(const eTripType &_tripType, const double &_timeHighSpdCltBrkPressedPer, const double &_totalTimeHighSpdPer)
    	{
    		std::get<0>(values_) = _tripType;
    		std::get<1>(values_) = _timeHighSpdCltBrkPressedPer;
    		std::get<2>(values_) = _totalTimeHighSpdPer;
    	}
    	inline const eTripType &getTripType() const { return std::get<0>(values_); }
    	inline void setTripType(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getTimeHighSpdCltBrkPressedPer() const { return std::get<1>(values_); }
    	inline void setTimeHighSpdCltBrkPressedPer(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getTotalTimeHighSpdPer() const { return std::get<2>(values_); }
    	inline void setTotalTimeHighSpdPer(const double &_value) { std::get<2>(values_) = _value; }
    	inline bool operator==(const sClutchBrakingAtHighSpeed& _other) const {
                return (getTripType() == _other.getTripType() && getTimeHighSpdCltBrkPressedPer() == _other.getTimeHighSpdCltBrkPressedPer() && getTotalTimeHighSpdPer() == _other.getTotalTimeHighSpdPer());
        }
    	inline bool operator!=(const sClutchBrakingAtHighSpeed &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sSafetyWarning : CommonAPI::Struct<eTripType, double, double, double, double, double, double, double, double, double, double, double, double> {
    	
    	sSafetyWarning() {
    	}
    	sSafetyWarning(const eTripType &_triptype, const double &_sRSFactor, const double &_teaBreakFactor, const double &_tRLFactor, const double &_tLLFactor, const double &_tBLFactor, const double &_tFLFactor, const double &_tPLFactor, const double &_tRvLFactor, const double &_brkFldFactor, const double &_oilPrFactor, const double &_wIFFactor, const double &_vehicleHealth)
    	{
    		std::get<0>(values_) = _triptype;
    		std::get<1>(values_) = _sRSFactor;
    		std::get<2>(values_) = _teaBreakFactor;
    		std::get<3>(values_) = _tRLFactor;
    		std::get<4>(values_) = _tLLFactor;
    		std::get<5>(values_) = _tBLFactor;
    		std::get<6>(values_) = _tFLFactor;
    		std::get<7>(values_) = _tPLFactor;
    		std::get<8>(values_) = _tRvLFactor;
    		std::get<9>(values_) = _brkFldFactor;
    		std::get<10>(values_) = _oilPrFactor;
    		std::get<11>(values_) = _wIFFactor;
    		std::get<12>(values_) = _vehicleHealth;
    	}
    	inline const eTripType &getTriptype() const { return std::get<0>(values_); }
    	inline void setTriptype(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const double &getSRSFactor() const { return std::get<1>(values_); }
    	inline void setSRSFactor(const double &_value) { std::get<1>(values_) = _value; }
    	inline const double &getTeaBreakFactor() const { return std::get<2>(values_); }
    	inline void setTeaBreakFactor(const double &_value) { std::get<2>(values_) = _value; }
    	inline const double &getTRLFactor() const { return std::get<3>(values_); }
    	inline void setTRLFactor(const double &_value) { std::get<3>(values_) = _value; }
    	inline const double &getTLLFactor() const { return std::get<4>(values_); }
    	inline void setTLLFactor(const double &_value) { std::get<4>(values_) = _value; }
    	inline const double &getTBLFactor() const { return std::get<5>(values_); }
    	inline void setTBLFactor(const double &_value) { std::get<5>(values_) = _value; }
    	inline const double &getTFLFactor() const { return std::get<6>(values_); }
    	inline void setTFLFactor(const double &_value) { std::get<6>(values_) = _value; }
    	inline const double &getTPLFactor() const { return std::get<7>(values_); }
    	inline void setTPLFactor(const double &_value) { std::get<7>(values_) = _value; }
    	inline const double &getTRvLFactor() const { return std::get<8>(values_); }
    	inline void setTRvLFactor(const double &_value) { std::get<8>(values_) = _value; }
    	inline const double &getBrkFldFactor() const { return std::get<9>(values_); }
    	inline void setBrkFldFactor(const double &_value) { std::get<9>(values_) = _value; }
    	inline const double &getOilPrFactor() const { return std::get<10>(values_); }
    	inline void setOilPrFactor(const double &_value) { std::get<10>(values_) = _value; }
    	inline const double &getWIFFactor() const { return std::get<11>(values_); }
    	inline void setWIFFactor(const double &_value) { std::get<11>(values_) = _value; }
    	inline const double &getVehicleHealth() const { return std::get<12>(values_); }
    	inline void setVehicleHealth(const double &_value) { std::get<12>(values_) = _value; }
    	inline bool operator==(const sSafetyWarning& _other) const {
                return (getTriptype() == _other.getTriptype() && getSRSFactor() == _other.getSRSFactor() && getTeaBreakFactor() == _other.getTeaBreakFactor() && getTRLFactor() == _other.getTRLFactor() && getTLLFactor() == _other.getTLLFactor() && getTBLFactor() == _other.getTBLFactor() && getTFLFactor() == _other.getTFLFactor() && getTPLFactor() == _other.getTPLFactor() && getTRvLFactor() == _other.getTRvLFactor() && getBrkFldFactor() == _other.getBrkFldFactor() && getOilPrFactor() == _other.getOilPrFactor() && getWIFFactor() == _other.getWIFFactor() && getVehicleHealth() == _other.getVehicleHealth());
        }
    	inline bool operator!=(const sSafetyWarning &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sTripResetStatus : CommonAPI::Struct<eTripType, eReturnStatus> {
    	
    	sTripResetStatus() {
    	}
    	sTripResetStatus(const eTripType &_triptype, const eReturnStatus &_tripResetStatus)
    	{
    		std::get<0>(values_) = _triptype;
    		std::get<1>(values_) = _tripResetStatus;
    	}
    	inline const eTripType &getTriptype() const { return std::get<0>(values_); }
    	inline void setTriptype(const eTripType &_value) { std::get<0>(values_) = _value; }
    	inline const eReturnStatus &getTripResetStatus() const { return std::get<1>(values_); }
    	inline void setTripResetStatus(const eReturnStatus &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sTripResetStatus& _other) const {
                return (getTriptype() == _other.getTriptype() && getTripResetStatus() == _other.getTripResetStatus());
        }
    	inline bool operator!=(const sTripResetStatus &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sDistUnit : CommonAPI::Struct<eDistUnit, double> {
    	
    	sDistUnit() {
    	}
    	sDistUnit(const eDistUnit &_enumDistUnit, const double &_scalingFactor)
    	{
    		std::get<0>(values_) = _enumDistUnit;
    		std::get<1>(values_) = _scalingFactor;
    	}
    	inline const eDistUnit &getEnumDistUnit() const { return std::get<0>(values_); }
    	inline void setEnumDistUnit(const eDistUnit &_value) { std::get<0>(values_) = _value; }
    	inline const double &getScalingFactor() const { return std::get<1>(values_); }
    	inline void setScalingFactor(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sDistUnit& _other) const {
                return (getEnumDistUnit() == _other.getEnumDistUnit() && getScalingFactor() == _other.getScalingFactor());
        }
    	inline bool operator!=(const sDistUnit &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    struct sFuelUnit : CommonAPI::Struct<eFuelUnit, double> {
    	
    	sFuelUnit() {
    	}
    	sFuelUnit(const eFuelUnit &_enumFuelUnit, const double &_scalingFactor)
    	{
    		std::get<0>(values_) = _enumFuelUnit;
    		std::get<1>(values_) = _scalingFactor;
    	}
    	inline const eFuelUnit &getEnumFuelUnit() const { return std::get<0>(values_); }
    	inline void setEnumFuelUnit(const eFuelUnit &_value) { std::get<0>(values_) = _value; }
    	inline const double &getScalingFactor() const { return std::get<1>(values_); }
    	inline void setScalingFactor(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const sFuelUnit& _other) const {
                return (getEnumFuelUnit() == _other.getEnumFuelUnit() && getScalingFactor() == _other.getScalingFactor());
        }
    	inline bool operator!=(const sFuelUnit &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.drivepro.driveProTypeCollection";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct driveProTypeCollection

} // namespace drivepro
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for eReturnStatus
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eReturnStatus& eReturnStatus) const {
            return static_cast<int32_t>(eReturnStatus);
        }
    };
    //Hash for eTripType
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eTripType> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eTripType& eTripType) const {
            return static_cast<int32_t>(eTripType);
        }
    };
    //Hash for eRequestType
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eRequestType> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eRequestType& eRequestType) const {
            return static_cast<int32_t>(eRequestType);
        }
    };
    //Hash for eLoggingType
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eLoggingType& eLoggingType) const {
            return static_cast<int32_t>(eLoggingType);
        }
    };
    //Hash for eDbugLevel
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eDbugLevel> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eDbugLevel& eDbugLevel) const {
            return static_cast<int32_t>(eDbugLevel);
        }
    };
    //Hash for eTxmnVariant
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eTxmnVariant> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eTxmnVariant& eTxmnVariant) const {
            return static_cast<int32_t>(eTxmnVariant);
        }
    };
    //Hash for eSignalNames
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eSignalNames> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eSignalNames& eSignalNames) const {
            return static_cast<int32_t>(eSignalNames);
        }
    };
    //Hash for eDpErrorCode
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eDpErrorCode> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eDpErrorCode& eDpErrorCode) const {
            return static_cast<int32_t>(eDpErrorCode);
        }
    };
    //Hash for eDistUnit
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eDistUnit> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eDistUnit& eDistUnit) const {
            return static_cast<int32_t>(eDistUnit);
        }
    };
    //Hash for eFuelUnit
    template<>
    struct hash<::v0::com::harman::drivepro::driveProTypeCollection::eFuelUnit> {
        inline size_t operator()(const ::v0::com::harman::drivepro::driveProTypeCollection::eFuelUnit& eFuelUnit) const {
            return static_cast<int32_t>(eFuelUnit);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DRIVEPRO_drive_Pro_Type_Collection_HPP_
