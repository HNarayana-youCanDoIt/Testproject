/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_KEYPRES_KEY_PRES_PLUGIN_HPP_
#define V0_COM_HARMAN_KEYPRES_KEY_PRES_PLUGIN_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace keypres {

class KeyPresPlugin {
public:
    virtual ~KeyPresPlugin() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct eKeyCodeId : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            KEYCODEHMI_MEDIAOFF = 80,
            KEYCODEHMI_VOLUMEUP = 81,
            KEYCODEHMI_VOLUMEDOWN = 82,
            KEYCODEHMI_MUTE = 83,
            KEYCODEHMI_VOLUME_SLIDER = 84
        };
        
        eKeyCodeId() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::KEYCODEHMI_MEDIAOFF)) {}
        eKeyCodeId(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::KEYCODEHMI_MEDIAOFF):
                case static_cast<int32_t>(Literal::KEYCODEHMI_VOLUMEUP):
                case static_cast<int32_t>(Literal::KEYCODEHMI_VOLUMEDOWN):
                case static_cast<int32_t>(Literal::KEYCODEHMI_MUTE):
                case static_cast<int32_t>(Literal::KEYCODEHMI_VOLUME_SLIDER):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eKeyCodeId &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eKeyCodeId &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eKeyCodeId &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eKeyCodeId &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eKeyCodeId &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eKeyCodeId &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eKeyState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            KEYSTATEHMI_RELEASE = 0,
            KEYSTATEHMI_PRESS = 1,
            KEYSTATEHMI_LONGPRESS = 2,
            KEYSTATEHMI_LEFT = 3,
            KEYSTATEHMI_RIGHT = 4
        };
        
        eKeyState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::KEYSTATEHMI_RELEASE)) {}
        eKeyState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::KEYSTATEHMI_RELEASE):
                case static_cast<int32_t>(Literal::KEYSTATEHMI_PRESS):
                case static_cast<int32_t>(Literal::KEYSTATEHMI_LONGPRESS):
                case static_cast<int32_t>(Literal::KEYSTATEHMI_LEFT):
                case static_cast<int32_t>(Literal::KEYSTATEHMI_RIGHT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eKeyState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eKeyState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eKeyState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eKeyState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eKeyState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eKeyState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eCallResult : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CALLRESULT_OK = 0,
            CALLRESULT_FAILED_INTERNALERROR = 1
        };
        
        eCallResult() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CALLRESULT_OK)) {}
        eCallResult(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CALLRESULT_OK):
                case static_cast<int32_t>(Literal::CALLRESULT_FAILED_INTERNALERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eCallResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eCallResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eCallResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eCallResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eCallResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eCallResult &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* KeyPresPlugin::getInterface() {
    return ("com.harman.keypres.KeyPresPlugin");
}

CommonAPI::Version KeyPresPlugin::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace keypres
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_KEYPRES_KEY_PRES_PLUGIN_HPP_
