/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_PROXY_HPP_

#include <v0/com/harman/dcif/CDisplayMgrPresCtrlProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

template <typename ... _AttributeExtensions>
class CDisplayMgrPresCtrlProxy
    : virtual public CDisplayMgrPresCtrl, 
      virtual public CDisplayMgrPresCtrlProxyBase,
      virtual public _AttributeExtensions... {
public:
    CDisplayMgrPresCtrlProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CDisplayMgrPresCtrlProxy();

    typedef CDisplayMgrPresCtrl InterfaceType;


    /**
     * description: lvdsConnectionStatus: To emit the connection status of LVDS cable
     */
    /**
     * Returns the wrapper class that provides access to the attribute lvdsConnectionStatus.
     */
    virtual LvdsConnectionStatusAttribute& getLvdsConnectionStatusAttribute() {
        return delegate_->getLvdsConnectionStatusAttribute();
    }
    /**
     * description: DisplayOnOffStatus: To get the display ON-OFF feature status 0 - disabled , 1 -
     *   enabled
     */
    /**
     * Returns the wrapper class that provides access to the attribute DisplayOnOffStatus.
     */
    virtual DisplayOnOffStatusAttribute& getDisplayOnOffStatusAttribute() {
        return delegate_->getDisplayOnOffStatusAttribute();
    }
    /**
     * description: DayNightModeStatus: To get the display Day/night mode status 0 - disabled , 1 -
     *   enabled
     */
    /**
     * Returns the wrapper class that provides access to the attribute DayNightModeStatus.
     */
    virtual DayNightModeStatusAttribute& getDayNightModeStatusAttribute() {
        return delegate_->getDayNightModeStatusAttribute();
    }


    /**
     * description: setDisplayOnOffFeature: To set the display ON-OFF status false - Display off ,
     *   true - Display on
     * Calls setDisplayOnOffFeature with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setDisplayOnOffFeature(const bool &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setDisplayOnOffFeature with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setDisplayOnOffFeatureAsync(const bool &_value, SetDisplayOnOffFeatureAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setDisplayBrightnessLevel: To set the display brightness level
     * Calls setDisplayBrightnessLevel with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setDisplayBrightnessLevel(const int16_t &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setDisplayBrightnessLevel with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setDisplayBrightnessLevelAsync(const int16_t &_value, SetDisplayBrightnessLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: displayOnEvent: To send events for which HMI has to turn on the display
     * Calls displayOnEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void displayOnEvent(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls displayOnEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> displayOnEventAsync(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, DisplayOnEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getDisplayBrightnessLevel: To get the display brightness level
     * Calls getDisplayBrightnessLevel with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDisplayBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDisplayBrightnessLevel with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDisplayBrightnessLevelAsync(GetDisplayBrightnessLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getHardwareVersion: To get the display Hardware Version
     * Calls getHardwareVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getHardwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getHardwareVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getHardwareVersionAsync(GetHardwareVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getSoftwareVersion: To get the display Software Version
     * Calls getSoftwareVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getSoftwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getSoftwareVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getSoftwareVersionAsync(GetSoftwareVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getDisplay16RSparePartNumber: To get the display 16R spare part number
     * Calls getDisplay16RSparePartNumber with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDisplay16RSparePartNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDisplay16RSparePartNumber with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDisplay16RSparePartNumberAsync(GetDisplay16RSparePartNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getDisplay16REcuHwNumber: To get the display 16R ECU number
     * Calls getDisplay16REcuHwNumber with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDisplay16REcuHwNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDisplay16REcuHwNumber with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDisplay16REcuHwNumberAsync(GetDisplay16REcuHwNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: setButtonPanelBrightness: To set the button panel brightness level
     * Calls setButtonPanelBrightness with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setButtonPanelBrightness(const int16_t &_status, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setButtonPanelBrightness with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setButtonPanelBrightnessAsync(const int16_t &_status, SetButtonPanelBrightnessAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getButtonPanelBrightnessLevel: To get the button panel brightness level
     * Calls getButtonPanelBrightnessLevel with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getButtonPanelBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getButtonPanelBrightnessLevel with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getButtonPanelBrightnessLevelAsync(GetButtonPanelBrightnessLevelAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: getDisplayTemperature: To get the Display temerature information
     * Calls getDisplayTemperature with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDisplayTemperature(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDisplayTemperature with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDisplayTemperatureAsync(GetDisplayTemperatureAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<CDisplayMgrPresCtrlProxyBase> delegate_;
};

typedef CDisplayMgrPresCtrlProxy<> CDisplayMgrPresCtrlProxyDefault;

namespace CDisplayMgrPresCtrlExtensions {
    /**
     * description: lvdsConnectionStatus: To emit the connection status of LVDS cable
     */
    template <template <typename > class _ExtensionType>
    class LvdsConnectionStatusAttributeExtension {
     public:
        typedef _ExtensionType<CDisplayMgrPresCtrlProxyBase::LvdsConnectionStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CDisplayMgrPresCtrlProxyBase::LvdsConnectionStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        LvdsConnectionStatusAttributeExtension() {}
    #endif
    
        LvdsConnectionStatusAttributeExtension(CDisplayMgrPresCtrlProxyBase& proxy): attributeExtension_(proxy.getLvdsConnectionStatusAttribute()) {
        }
    
        inline extension_type& getLvdsConnectionStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: DisplayOnOffStatus: To get the display ON-OFF feature status 0 - disabled , 1 -
     *   enabled
     */
    template <template <typename > class _ExtensionType>
    class DisplayOnOffStatusAttributeExtension {
     public:
        typedef _ExtensionType<CDisplayMgrPresCtrlProxyBase::DisplayOnOffStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CDisplayMgrPresCtrlProxyBase::DisplayOnOffStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DisplayOnOffStatusAttributeExtension() {}
    #endif
    
        DisplayOnOffStatusAttributeExtension(CDisplayMgrPresCtrlProxyBase& proxy): attributeExtension_(proxy.getDisplayOnOffStatusAttribute()) {
        }
    
        inline extension_type& getDisplayOnOffStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: DayNightModeStatus: To get the display Day/night mode status 0 - disabled , 1 -
     *   enabled
     */
    template <template <typename > class _ExtensionType>
    class DayNightModeStatusAttributeExtension {
     public:
        typedef _ExtensionType<CDisplayMgrPresCtrlProxyBase::DayNightModeStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CDisplayMgrPresCtrlProxyBase::DayNightModeStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DayNightModeStatusAttributeExtension() {}
    #endif
    
        DayNightModeStatusAttributeExtension(CDisplayMgrPresCtrlProxyBase& proxy): attributeExtension_(proxy.getDayNightModeStatusAttribute()) {
        }
    
        inline extension_type& getDayNightModeStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace CDisplayMgrPresCtrlExtensions

//
// CDisplayMgrPresCtrlProxy Implementation
//
template <typename ... _AttributeExtensions>
CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::CDisplayMgrPresCtrlProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<CDisplayMgrPresCtrlProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<CDisplayMgrPresCtrlProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::~CDisplayMgrPresCtrlProxy() {
}

/**
 * description: setDisplayOnOffFeature: To set the display ON-OFF status false - Display off ,
 *   true - Display on
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::setDisplayOnOffFeature(const bool &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setDisplayOnOffFeature(_value, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::setDisplayOnOffFeatureAsync(const bool &_value, SetDisplayOnOffFeatureAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setDisplayOnOffFeatureAsync(_value, _callback, _info);
}
/**
 * description: setDisplayBrightnessLevel: To set the display brightness level
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::setDisplayBrightnessLevel(const int16_t &_value, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setDisplayBrightnessLevel(_value, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::setDisplayBrightnessLevelAsync(const int16_t &_value, SetDisplayBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setDisplayBrightnessLevelAsync(_value, _callback, _info);
}
/**
 * description: displayOnEvent: To send events for which HMI has to turn on the display
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::displayOnEvent(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    if (!_onEvent.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->displayOnEvent(_onEvent, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::displayOnEventAsync(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent &_onEvent, DisplayOnEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_onEvent.validate()) {
        ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus ErrorCode = ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus::DmErrorStatus_NotSet;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, ErrorCode);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->displayOnEventAsync(_onEvent, _callback, _info);
}
/**
 * description: getDisplayBrightnessLevel: To get the display brightness level
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getDisplayBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getDisplayBrightnessLevel(_internalCallStatus, _value, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getDisplayBrightnessLevelAsync(GetDisplayBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDisplayBrightnessLevelAsync(_callback, _info);
}
/**
 * description: getHardwareVersion: To get the display Hardware Version
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getHardwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getHardwareVersion(_internalCallStatus, _value, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getHardwareVersionAsync(GetHardwareVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getHardwareVersionAsync(_callback, _info);
}
/**
 * description: getSoftwareVersion: To get the display Software Version
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getSoftwareVersion(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getSoftwareVersion(_internalCallStatus, _value, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getSoftwareVersionAsync(GetSoftwareVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getSoftwareVersionAsync(_callback, _info);
}
/**
 * description: getDisplay16RSparePartNumber: To get the display 16R spare part number
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getDisplay16RSparePartNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getDisplay16RSparePartNumber(_internalCallStatus, _value, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getDisplay16RSparePartNumberAsync(GetDisplay16RSparePartNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDisplay16RSparePartNumberAsync(_callback, _info);
}
/**
 * description: getDisplay16REcuHwNumber: To get the display 16R ECU number
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getDisplay16REcuHwNumber(CommonAPI::CallStatus &_internalCallStatus, std::string &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getDisplay16REcuHwNumber(_internalCallStatus, _value, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getDisplay16REcuHwNumberAsync(GetDisplay16REcuHwNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDisplay16REcuHwNumberAsync(_callback, _info);
}
/**
 * description: setButtonPanelBrightness: To set the button panel brightness level
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::setButtonPanelBrightness(const int16_t &_status, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->setButtonPanelBrightness(_status, _internalCallStatus, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::setButtonPanelBrightnessAsync(const int16_t &_status, SetButtonPanelBrightnessAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setButtonPanelBrightnessAsync(_status, _callback, _info);
}
/**
 * description: getButtonPanelBrightnessLevel: To get the button panel brightness level
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getButtonPanelBrightnessLevel(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getButtonPanelBrightnessLevel(_internalCallStatus, _value, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getButtonPanelBrightnessLevelAsync(GetButtonPanelBrightnessLevelAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getButtonPanelBrightnessLevelAsync(_callback, _info);
}
/**
 * description: getDisplayTemperature: To get the Display temerature information
 */
template <typename ... _AttributeExtensions>
void CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getDisplayTemperature(CommonAPI::CallStatus &_internalCallStatus, int16_t &_value, ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus &_ErrorCode, const CommonAPI::CallInfo *_info) {
    delegate_->getDisplayTemperature(_internalCallStatus, _value, _ErrorCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getDisplayTemperatureAsync(GetDisplayTemperatureAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDisplayTemperatureAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CDisplayMgrPresCtrlProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::dcif::CDisplayMgrPresCtrlProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::dcif::CDisplayMgrPresCtrlProxy<
            ::v0::com::harman::dcif::CDisplayMgrPresCtrlExtensions::LvdsConnectionStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::dcif::CDisplayMgrPresCtrlExtensions::DisplayOnOffStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::dcif::CDisplayMgrPresCtrlExtensions::DayNightModeStatusAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_C_Display_Mgr_Pres_Ctrl_PROXY_HPP_
