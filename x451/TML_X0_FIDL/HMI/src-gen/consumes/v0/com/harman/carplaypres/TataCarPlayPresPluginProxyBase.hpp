/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_PROXY_BASE_HPP_
#define V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_PROXY_BASE_HPP_

#include <v0/com/harman/carplaypres/TataCarPlayPresPlugin.hpp>


#include <v1/com/harman/pres/pprestypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace carplaypres {

class TataCarPlayPresPluginProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::carplaypres::TataCarPlayPresPlugin::sPluginNowPlayingInfo> NowPlayingDataAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::carplaypres::TataCarPlayPresPlugin::sCarplayModeOwner> CarplayModeOwnerAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::carplaypres::TataCarPlayPresPlugin::OwnerType> MainaudioOwnerAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::carplaypres::TataCarPlayPresPlugin::OwnerType> ScreenOwnerAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::carplaypres::TataCarPlayPresPlugin::OwnerType> PhoneOwnerAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::carplaypres::TataCarPlayPresPlugin::OwnerType> NavigationOwnerAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::carplaypres::TataCarPlayPresPlugin::OwnerType> SpeechOwnerAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::carplaypres::TataCarPlayPresPlugin::SpeechType> CurrentSpeechModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::pres::pprestypes::ePlayState> CurrentPlayStateAttribute;
    typedef CommonAPI::Event<
        bool
    > FactoryResetSuccessEvent;
    typedef CommonAPI::Event<
        bool
    > SilentAbortVREvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> ReportKeyEventAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> CPFactoryResetAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> ReportHMIpopUpAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const bool&)> SetSmartFanstateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> PlayCarplayMediaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> PauseCarplayMediaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> ToggleCarplayMediaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> FwdSeekCarplayMediaAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> RevSeekCarplayMediaAsyncCallback;

    /**
     * description: nowPlayingData attribute provides metadata info
     */
    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute() = 0;
    virtual CarplayModeOwnerAttribute& getCarplayModeOwnerAttribute() = 0;
    virtual MainaudioOwnerAttribute& getMainaudioOwnerAttribute() = 0;
    virtual ScreenOwnerAttribute& getScreenOwnerAttribute() = 0;
    virtual PhoneOwnerAttribute& getPhoneOwnerAttribute() = 0;
    virtual NavigationOwnerAttribute& getNavigationOwnerAttribute() = 0;
    virtual SpeechOwnerAttribute& getSpeechOwnerAttribute() = 0;
    virtual CurrentSpeechModeAttribute& getCurrentSpeechModeAttribute() = 0;
    virtual CurrentPlayStateAttribute& getCurrentPlayStateAttribute() = 0;

    /**
     * description: This broadcast gets emitted, whenever FactoryReset finised. 	return: true -
     *   Success 		    false - Not successful
     */
    virtual FactoryResetSuccessEvent& getFactoryResetSuccessEvent() = 0;
    /**
     * description: This broadcast gets emitted, whenever Siri is activated. 	return: true -
     *   Success 	false - Not successful
     */
    virtual SilentAbortVREvent& getSilentAbortVREvent() = 0;

    /**
     * description: This method is called by HMI to send the SWC and button key detaills. 	return:
     *   true - Success 		    false - Not successful
     */
    virtual void reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by Engineering Menu service for factory reset. 	return:
     *   true - Success 		    false - Not successful
     */
    virtual void CPFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> CPFactoryResetAsync(CPFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to send the Native popUp status. 	return: true -
     *   Success 		    false - Not successful
     */
    virtual void reportHMIpopUp(const bool &_popUpState, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> reportHMIpopUpAsync(const bool &_popUpState, ReportHMIpopUpAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to send the smartHVAC selection. 	return: true -
     *   Success 		    false - Not successful
     */
    virtual void setSmartFanstate(const bool &_sfstatus, CommonAPI::CallStatus &_internalCallStatus, bool &_curr_sfstatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setSmartFanstateAsync(const bool &_sfstatus, SetSmartFanstateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to Play the Carplay media. 	input: keyPress status
     *   			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4 	return:
     *   true - Success 		    false - Not successful
     */
    virtual void playCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> playCarplayMediaAsync(const uint32_t &_KeyStatus, PlayCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to pause the Carplay media. 	input: keyPress
     *   status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4
     *   	return: true - Success 		    false - Not successful
     */
    virtual void pauseCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseCarplayMediaAsync(const uint32_t &_KeyStatus, PauseCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to toggle the current playstate of Carplay media.
     *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    virtual void toggleCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> toggleCarplayMediaAsync(const uint32_t &_KeyStatus, ToggleCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to changed the song to Next / Fastforward. 	input:
     *   keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    virtual void fwdSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> fwdSeekCarplayMediaAsync(const uint32_t &_KeyStatus, FwdSeekCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is called by HMI to changed the song to Previous/ fast backwar.
     *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     */
    virtual void revSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> revSeekCarplayMediaAsync(const uint32_t &_KeyStatus, RevSeekCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace carplaypres
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_2 = v0;

#endif // V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_PROXY_BASE_HPP_
