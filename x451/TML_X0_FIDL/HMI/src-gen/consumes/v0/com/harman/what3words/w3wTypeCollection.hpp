/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_WHAT3WORDS_w3w_Type_Collection_HPP_
#define V0_COM_HARMAN_WHAT3WORDS_w3w_Type_Collection_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace what3words {

struct w3wTypeCollection {
    
    struct retStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SUCCESS = 0,
            FAILURE = 1
        };
        
        retStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SUCCESS)) {}
        retStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::FAILURE):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const retStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const retStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const retStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const retStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const retStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const retStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    struct Suggestion : CommonAPI::Struct<std::string, std::string, std::string, std::string> {
    	
    	Suggestion() {
    	}
    	Suggestion(const std::string &_three_word_address, const std::string &_language_code, const std::string &_country_code, const std::string &_nearest_place)
    	{
    		std::get<0>(values_) = _three_word_address;
    		std::get<1>(values_) = _language_code;
    		std::get<2>(values_) = _country_code;
    		std::get<3>(values_) = _nearest_place;
    	}
    	inline const std::string &getThree_word_address() const { return std::get<0>(values_); }
    	inline void setThree_word_address(const std::string &_value) { std::get<0>(values_) = _value; }
    	inline const std::string &getLanguage_code() const { return std::get<1>(values_); }
    	inline void setLanguage_code(const std::string &_value) { std::get<1>(values_) = _value; }
    	inline const std::string &getCountry_code() const { return std::get<2>(values_); }
    	inline void setCountry_code(const std::string &_value) { std::get<2>(values_) = _value; }
    	inline const std::string &getNearest_place() const { return std::get<3>(values_); }
    	inline void setNearest_place(const std::string &_value) { std::get<3>(values_) = _value; }
    	inline bool operator==(const Suggestion& _other) const {
                return (getThree_word_address() == _other.getThree_word_address() && getLanguage_code() == _other.getLanguage_code() && getCountry_code() == _other.getCountry_code() && getNearest_place() == _other.getNearest_place());
        }
    	inline bool operator!=(const Suggestion &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<w3wTypeCollection::Suggestion> arSuggtion;
    struct Coordinates : CommonAPI::Struct<double, double> {
    	
    	Coordinates() {
    	}
    	Coordinates(const double &_lat, const double &_lng)
    	{
    		std::get<0>(values_) = _lat;
    		std::get<1>(values_) = _lng;
    	}
    	inline const double &getLat() const { return std::get<0>(values_); }
    	inline void setLat(const double &_value) { std::get<0>(values_) = _value; }
    	inline const double &getLng() const { return std::get<1>(values_); }
    	inline void setLng(const double &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const Coordinates& _other) const {
                return (getLat() == _other.getLat() && getLng() == _other.getLng());
        }
    	inline bool operator!=(const Coordinates &_other) const {
    		return !((*this) == _other);
    	}
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.what3words.w3wTypeCollection";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct w3wTypeCollection

} // namespace what3words
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for retStatus
    template<>
    struct hash<::v0::com::harman::what3words::w3wTypeCollection::retStatus> {
        inline size_t operator()(const ::v0::com::harman::what3words::w3wTypeCollection::retStatus& retStatus) const {
            return static_cast<int32_t>(retStatus);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_WHAT3WORDS_w3w_Type_Collection_HPP_
