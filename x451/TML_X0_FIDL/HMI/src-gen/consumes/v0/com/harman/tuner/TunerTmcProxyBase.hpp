/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Tuner TMC interface.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2017
 */
#ifndef V0_COM_HARMAN_TUNER_Tuner_Tmc_PROXY_BASE_HPP_
#define V0_COM_HARMAN_TUNER_Tuner_Tmc_PROXY_BASE_HPP_

#include <v0/com/harman/tuner/TunerTmc.hpp>


#include <v0/com/harman/tuner/TunerTmcTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace tuner {

class TunerTmcProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::tuner::TunerTmcTypes::Status> StatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::tuner::TunerTmcTypes::DetailedStatus> DetailedStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::tuner::TunerTmcTypes::Services> ServicesAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::tuner::TunerTmcTypes::Filters> FiltersAttribute;
    typedef CommonAPI::Event<
        ::v0::com::harman::tuner::TunerTmcTypes::DeviceType, uint32_t, uint16_t, uint8_t, CommonAPI::ByteBuffer
    > DataEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> SetUpdateRateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> SetFilterAsyncCallback;

    /**
     * description: Current device/TMC status, one vector entry per device type
     */
    virtual StatusAttribute& getStatusAttribute() = 0;
    /**
     * description: Detailed device/TMC status, one vector entry per device type
     */
    virtual DetailedStatusAttribute& getDetailedStatusAttribute() = 0;
    /**
     * description: All available services
     */
    virtual ServicesAttribute& getServicesAttribute() = 0;
    /**
     * description: Current active filters
     */
    virtual FiltersAttribute& getFiltersAttribute() = 0;

    /**
     * description: TMC data
     */
    virtual DataEvent& getDataEvent() = 0;

    /**
     * description: Disable/enable TMC and set update rate (SDARS counter and time)
     */
    virtual void setUpdateRate(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType &_device, const uint16_t &_maxDropCounter, const uint16_t &_maxDropTime, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setUpdateRateAsync(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType &_device, const uint16_t &_maxDropCounter, const uint16_t &_maxDropTime, SetUpdateRateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Set filter for TMC data selection.
     */
    virtual void setFilter(const ::v0::com::harman::tuner::TunerTmcTypes::Filter &_filter, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setFilterAsync(const ::v0::com::harman::tuner::TunerTmcTypes::Filter &_filter, SetFilterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace tuner
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_TUNER_Tuner_Tmc_PROXY_BASE_HPP_
