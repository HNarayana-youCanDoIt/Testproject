/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: The VersionManager component is responsible for gathering version information
 *   of the different modules as well as managing     a set of required version for
 *   a certain release, the release configuration that is defined at integration
 *   time.          Version: 1.0     Reason:         - Initial Version     Changes:
 *           1. readonly attributes: allVersionsDetails         2. methods:
 *   getVersionDetails, get16RPartNumber         3. signal : versionMismatch
 * author: Gaurav Garg
 */
#ifndef V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_PROXY_BASE_HPP_
#define V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_PROXY_BASE_HPP_

#include <v0/com/harman/dcif/VersionManagerService_TATA.hpp>


#include <v0/com/harman/dcif/versionmanagertypes_tata.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

class VersionManagerService_TATAProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::dcif::versionmanagertypes_tata::VersionMismatchDetails_e> VersionMismatchAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::dcif::versionmanagertypes_tata::a_VersionInfoList> A_allVersionsDetailsAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::dcif::versionmanagertypes_tata::a_16RInfoList> A_all16RPartDetailsAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::dcif::versionmanagertypes_tata::a_16RInfoList> A_all16RPartDetailsAsciiAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t&)> GetVersionDetailsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t&)> Get16RPartNumberAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t&)> Get16RPartNumberInAsciiAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t&)> GetPowerModeCfgTypeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t&)> GetWifiMacNumberAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t&)> GetBluetoothMACNumberAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t&)> GetBluetoothAlignmentValueAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t&)> GetLCDPanelHwVersionAsyncCallback;

    /**
     * description: signals mismatch of a version at initial boot up
     */
    virtual VersionMismatchAttribute& getVersionMismatchAttribute() = 0;
    /**
     * description: list of all known version informations at runtime
     */
    virtual A_allVersionsDetailsAttribute& getA_allVersionsDetailsAttribute() = 0;
    virtual A_all16RPartDetailsAttribute& getA_all16RPartDetailsAttribute() = 0;
    virtual A_all16RPartDetailsAsciiAttribute& getA_all16RPartDetailsAsciiAttribute() = 0;


    /**
     * description: a method to retrieve known version information of a specific component        
     *   to retrieve all versions "attribute VersionInfoList allVersions" can be used
     */
    virtual void getVersionDetails(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t &_t_versionInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getVersionDetailsAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, GetVersionDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void get16RPartNumber(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> get16RPartNumberAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void get16RPartNumberInAscii(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> get16RPartNumberInAsciiAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberInAsciiAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getPowerModeCfgType(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_PmodeCfgInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getPowerModeCfgTypeAsync(GetPowerModeCfgTypeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getWifiMacNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_wifiMACInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getWifiMacNumberAsync(GetWifiMacNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getBluetoothMACNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btMACInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBluetoothMACNumberAsync(GetBluetoothMACNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getBluetoothAlignmentValue(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btAlignmentInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getBluetoothAlignmentValueAsync(GetBluetoothAlignmentValueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void getLCDPanelHwVersion(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_lcdHwInfo, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getLCDPanelHwVersionAsync(GetLCDPanelHwVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_PROXY_BASE_HPP_
