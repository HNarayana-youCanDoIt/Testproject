/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_PROXY_BASE_HPP_
#define V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_PROXY_BASE_HPP_

#include <v0/com/harman/VoiceAlert/VoiceAlertService.hpp>


#include <v1/com/harman/VoiceAlert/VoiceAlertType.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace VoiceAlert {

class VoiceAlertServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::VoiceAlert::VoiceAlertType::CurDriveModeSig_enum> CurDriveModeSigAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertState_enum> HuAlertStateAttribute;
    typedef CommonAPI::ObservableAttribute<::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum> HuAlertHMISelectionAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::VoiceAlert::VoiceAlertType::HuInfoFeaturePresence_enum> HuInfoFeaturePresenceAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertStatus_enum> HuAlertStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<bool> VasStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v1::com::harman::VoiceAlert::VoiceAlertType::HuAlertStateMce_enum> HuAlertStateMceAttribute;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum&, const bool&)> SetHuHMISelectionAsyncCallback;

    /**
     * description: No Information Available
     */
    virtual CurDriveModeSigAttribute& getCurDriveModeSigAttribute() = 0;
    /**
     * description: No Information Available
     */
    virtual HuAlertStateAttribute& getHuAlertStateAttribute() = 0;
    /**
     * description: No Information Available
     */
    virtual HuAlertHMISelectionAttribute& getHuAlertHMISelectionAttribute() = 0;
    /**
     * description: No Information Available
     */
    virtual HuInfoFeaturePresenceAttribute& getHuInfoFeaturePresenceAttribute() = 0;
    /**
     * description: No Information Available
     */
    virtual HuAlertStatusAttribute& getHuAlertStatusAttribute() = 0;
    /**
     * description: No Information Available
     */
    virtual VasStatusAttribute& getVasStatusAttribute() = 0;
    /**
     * description: No Information Available
     */
    virtual HuAlertStateMceAttribute& getHuAlertStateMceAttribute() = 0;


    virtual void setHuHMISelection(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huTypeofAlert, const bool &_alertStatus, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huAlertType, bool &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> setHuHMISelectionAsync(const ::v1::com::harman::VoiceAlert::VoiceAlertType::HuHMISelection_enum &_huTypeofAlert, const bool &_alertStatus, SetHuHMISelectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace VoiceAlert
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_VOICEALERT_Voice_Alert_Service_PROXY_BASE_HPP_
