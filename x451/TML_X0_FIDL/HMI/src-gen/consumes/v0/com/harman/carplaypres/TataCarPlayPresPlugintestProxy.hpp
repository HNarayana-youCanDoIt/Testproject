/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugintest_PROXY_HPP_
#define V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugintest_PROXY_HPP_

#include <v0/com/harman/carplaypres/TataCarPlayPresPlugintestProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace carplaypres {

template <typename ... _AttributeExtensions>
class TataCarPlayPresPlugintestProxy
    : virtual public TataCarPlayPresPlugintest, 
      virtual public TataCarPlayPresPlugintestProxyBase,
      virtual public _AttributeExtensions... {
public:
    TataCarPlayPresPlugintestProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TataCarPlayPresPlugintestProxy();

    typedef TataCarPlayPresPlugintest InterfaceType;






    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<TataCarPlayPresPlugintestProxyBase> delegate_;
};

typedef TataCarPlayPresPlugintestProxy<> TataCarPlayPresPlugintestProxyDefault;


//
// TataCarPlayPresPlugintestProxy Implementation
//
template <typename ... _AttributeExtensions>
TataCarPlayPresPlugintestProxy<_AttributeExtensions...>::TataCarPlayPresPlugintestProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<TataCarPlayPresPlugintestProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<TataCarPlayPresPlugintestProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TataCarPlayPresPlugintestProxy<_AttributeExtensions...>::~TataCarPlayPresPlugintestProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &TataCarPlayPresPlugintestProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TataCarPlayPresPlugintestProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TataCarPlayPresPlugintestProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TataCarPlayPresPlugintestProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TataCarPlayPresPlugintestProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace carplaypres
} // namespace harman
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugintest_PROXY_HPP_
