/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_PROXY_HPP_
#define V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_PROXY_HPP_

#include <v0/com/harman/carplaypres/TataCarPlayPresPluginProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace carplaypres {

template <typename ... _AttributeExtensions>
class TataCarPlayPresPluginProxy
    : virtual public TataCarPlayPresPlugin, 
      virtual public TataCarPlayPresPluginProxyBase,
      virtual public _AttributeExtensions... {
public:
    TataCarPlayPresPluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TataCarPlayPresPluginProxy();

    typedef TataCarPlayPresPlugin InterfaceType;


    /**
     * description: nowPlayingData attribute provides metadata info
     */
    /**
     * Returns the wrapper class that provides access to the attribute nowPlayingData.
     */
    virtual NowPlayingDataAttribute& getNowPlayingDataAttribute() {
        return delegate_->getNowPlayingDataAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute carplayModeOwner.
     */
    virtual CarplayModeOwnerAttribute& getCarplayModeOwnerAttribute() {
        return delegate_->getCarplayModeOwnerAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute MainaudioOwner.
     */
    virtual MainaudioOwnerAttribute& getMainaudioOwnerAttribute() {
        return delegate_->getMainaudioOwnerAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ScreenOwner.
     */
    virtual ScreenOwnerAttribute& getScreenOwnerAttribute() {
        return delegate_->getScreenOwnerAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute PhoneOwner.
     */
    virtual PhoneOwnerAttribute& getPhoneOwnerAttribute() {
        return delegate_->getPhoneOwnerAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute NavigationOwner.
     */
    virtual NavigationOwnerAttribute& getNavigationOwnerAttribute() {
        return delegate_->getNavigationOwnerAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute SpeechOwner.
     */
    virtual SpeechOwnerAttribute& getSpeechOwnerAttribute() {
        return delegate_->getSpeechOwnerAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute CurrentSpeechMode.
     */
    virtual CurrentSpeechModeAttribute& getCurrentSpeechModeAttribute() {
        return delegate_->getCurrentSpeechModeAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute CurrentPlayState.
     */
    virtual CurrentPlayStateAttribute& getCurrentPlayStateAttribute() {
        return delegate_->getCurrentPlayStateAttribute();
    }

    /**
     * description: This broadcast gets emitted, whenever FactoryReset finised. 	return: true -
     *   Success 		    false - Not successful
     */
    /**
     * Returns the wrapper class that provides access to the broadcast FactoryResetSuccess.
     */
    virtual FactoryResetSuccessEvent& getFactoryResetSuccessEvent() {
        return delegate_->getFactoryResetSuccessEvent();
    }
    /**
     * description: This broadcast gets emitted, whenever Siri is activated. 	return: true -
     *   Success 	false - Not successful
     */
    /**
     * Returns the wrapper class that provides access to the broadcast SilentAbortVR.
     */
    virtual SilentAbortVREvent& getSilentAbortVREvent() {
        return delegate_->getSilentAbortVREvent();
    }

    /**
     * description: This method is called by HMI to send the SWC and button key detaills. 	return:
     *   true - Success 		    false - Not successful
     * Calls reportKeyEvent with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls reportKeyEvent with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by Engineering Menu service for factory reset. 	return:
     *   true - Success 		    false - Not successful
     * Calls CPFactoryReset with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void CPFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls CPFactoryReset with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> CPFactoryResetAsync(CPFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to send the Native popUp status. 	return: true -
     *   Success 		    false - Not successful
     * Calls reportHMIpopUp with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void reportHMIpopUp(const bool &_popUpState, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls reportHMIpopUp with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> reportHMIpopUpAsync(const bool &_popUpState, ReportHMIpopUpAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to send the smartHVAC selection. 	return: true -
     *   Success 		    false - Not successful
     * Calls setSmartFanstate with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSmartFanstate(const bool &_sfstatus, CommonAPI::CallStatus &_internalCallStatus, bool &_curr_sfstatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSmartFanstate with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSmartFanstateAsync(const bool &_sfstatus, SetSmartFanstateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to Play the Carplay media. 	input: keyPress status
     *   			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4 	return:
     *   true - Success 		    false - Not successful
     * Calls playCarplayMedia with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void playCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls playCarplayMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> playCarplayMediaAsync(const uint32_t &_KeyStatus, PlayCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to pause the Carplay media. 	input: keyPress
     *   status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4
     *   	return: true - Success 		    false - Not successful
     * Calls pauseCarplayMedia with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void pauseCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls pauseCarplayMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> pauseCarplayMediaAsync(const uint32_t &_KeyStatus, PauseCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to toggle the current playstate of Carplay media.
     *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     * Calls toggleCarplayMedia with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void toggleCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls toggleCarplayMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> toggleCarplayMediaAsync(const uint32_t &_KeyStatus, ToggleCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to changed the song to Next / Fastforward. 	input:
     *   keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     * Calls fwdSeekCarplayMedia with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void fwdSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls fwdSeekCarplayMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> fwdSeekCarplayMediaAsync(const uint32_t &_KeyStatus, FwdSeekCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method is called by HMI to changed the song to Previous/ fast backwar.
     *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
     *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
     * Calls revSeekCarplayMedia with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void revSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls revSeekCarplayMedia with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> revSeekCarplayMediaAsync(const uint32_t &_KeyStatus, RevSeekCarplayMediaAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<TataCarPlayPresPluginProxyBase> delegate_;
};

typedef TataCarPlayPresPluginProxy<> TataCarPlayPresPluginProxyDefault;

namespace TataCarPlayPresPluginExtensions {
    /**
     * description: nowPlayingData attribute provides metadata info
     */
    template <template <typename > class _ExtensionType>
    class NowPlayingDataAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::NowPlayingDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::NowPlayingDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NowPlayingDataAttributeExtension() {}
    #endif
    
        NowPlayingDataAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getNowPlayingDataAttribute()) {
        }
    
        inline extension_type& getNowPlayingDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CarplayModeOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::CarplayModeOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::CarplayModeOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CarplayModeOwnerAttributeExtension() {}
    #endif
    
        CarplayModeOwnerAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getCarplayModeOwnerAttribute()) {
        }
    
        inline extension_type& getCarplayModeOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class MainaudioOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::MainaudioOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::MainaudioOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MainaudioOwnerAttributeExtension() {}
    #endif
    
        MainaudioOwnerAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getMainaudioOwnerAttribute()) {
        }
    
        inline extension_type& getMainaudioOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class ScreenOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::ScreenOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::ScreenOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ScreenOwnerAttributeExtension() {}
    #endif
    
        ScreenOwnerAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getScreenOwnerAttribute()) {
        }
    
        inline extension_type& getScreenOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class PhoneOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::PhoneOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::PhoneOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        PhoneOwnerAttributeExtension() {}
    #endif
    
        PhoneOwnerAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getPhoneOwnerAttribute()) {
        }
    
        inline extension_type& getPhoneOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class NavigationOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::NavigationOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::NavigationOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        NavigationOwnerAttributeExtension() {}
    #endif
    
        NavigationOwnerAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getNavigationOwnerAttribute()) {
        }
    
        inline extension_type& getNavigationOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class SpeechOwnerAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::SpeechOwnerAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::SpeechOwnerAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        SpeechOwnerAttributeExtension() {}
    #endif
    
        SpeechOwnerAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getSpeechOwnerAttribute()) {
        }
    
        inline extension_type& getSpeechOwnerAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CurrentSpeechModeAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::CurrentSpeechModeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::CurrentSpeechModeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurrentSpeechModeAttributeExtension() {}
    #endif
    
        CurrentSpeechModeAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getCurrentSpeechModeAttribute()) {
        }
    
        inline extension_type& getCurrentSpeechModeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CurrentPlayStateAttributeExtension {
     public:
        typedef _ExtensionType<TataCarPlayPresPluginProxyBase::CurrentPlayStateAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TataCarPlayPresPluginProxyBase::CurrentPlayStateAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CurrentPlayStateAttributeExtension() {}
    #endif
    
        CurrentPlayStateAttributeExtension(TataCarPlayPresPluginProxyBase& proxy): attributeExtension_(proxy.getCurrentPlayStateAttribute()) {
        }
    
        inline extension_type& getCurrentPlayStateAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace TataCarPlayPresPluginExtensions

//
// TataCarPlayPresPluginProxy Implementation
//
template <typename ... _AttributeExtensions>
TataCarPlayPresPluginProxy<_AttributeExtensions...>::TataCarPlayPresPluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<TataCarPlayPresPluginProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<TataCarPlayPresPluginProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TataCarPlayPresPluginProxy<_AttributeExtensions...>::~TataCarPlayPresPluginProxy() {
}

/**
 * description: This method is called by HMI to send the SWC and button key detaills. 	return:
 *   true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::reportKeyEvent(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info) {
    delegate_->reportKeyEvent(_KeyCode, _KeyStatus, _internalCallStatus, _resultss, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::reportKeyEventAsync(const uint32_t &_KeyCode, const uint32_t &_KeyStatus, ReportKeyEventAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->reportKeyEventAsync(_KeyCode, _KeyStatus, _callback, _info);
}
/**
 * description: This method is called by Engineering Menu service for factory reset. 	return:
 *   true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::CPFactoryReset(CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->CPFactoryReset(_internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::CPFactoryResetAsync(CPFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->CPFactoryResetAsync(_callback, _info);
}
/**
 * description: This method is called by HMI to send the Native popUp status. 	return: true -
 *   Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::reportHMIpopUp(const bool &_popUpState, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_resultss, const CommonAPI::CallInfo *_info) {
    delegate_->reportHMIpopUp(_popUpState, _internalCallStatus, _resultss, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::reportHMIpopUpAsync(const bool &_popUpState, ReportHMIpopUpAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->reportHMIpopUpAsync(_popUpState, _callback, _info);
}
/**
 * description: This method is called by HMI to send the smartHVAC selection. 	return: true -
 *   Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::setSmartFanstate(const bool &_sfstatus, CommonAPI::CallStatus &_internalCallStatus, bool &_curr_sfstatus, const CommonAPI::CallInfo *_info) {
    delegate_->setSmartFanstate(_sfstatus, _internalCallStatus, _curr_sfstatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::setSmartFanstateAsync(const bool &_sfstatus, SetSmartFanstateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setSmartFanstateAsync(_sfstatus, _callback, _info);
}
/**
 * description: This method is called by HMI to Play the Carplay media. 	input: keyPress status
 *   			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4 	return:
 *   true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::playCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->playCarplayMedia(_KeyStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::playCarplayMediaAsync(const uint32_t &_KeyStatus, PlayCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->playCarplayMediaAsync(_KeyStatus, _callback, _info);
}
/**
 * description: This method is called by HMI to pause the Carplay media. 	input: keyPress
 *   status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3, 			LONGRELEASED=4
 *   	return: true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::pauseCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->pauseCarplayMedia(_KeyStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::pauseCarplayMediaAsync(const uint32_t &_KeyStatus, PauseCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->pauseCarplayMediaAsync(_KeyStatus, _callback, _info);
}
/**
 * description: This method is called by HMI to toggle the current playstate of Carplay media.
 *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
 *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::toggleCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->toggleCarplayMedia(_KeyStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::toggleCarplayMediaAsync(const uint32_t &_KeyStatus, ToggleCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->toggleCarplayMediaAsync(_KeyStatus, _callback, _info);
}
/**
 * description: This method is called by HMI to changed the song to Next / Fastforward. 	input:
 *   keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
 *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::fwdSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->fwdSeekCarplayMedia(_KeyStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::fwdSeekCarplayMediaAsync(const uint32_t &_KeyStatus, FwdSeekCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->fwdSeekCarplayMediaAsync(_KeyStatus, _callback, _info);
}
/**
 * description: This method is called by HMI to changed the song to Previous/ fast backwar.
 *   	input: keyPress status 			PRESSED =1, 			LONGPRESSED=2, 			RELEASED=3,
 *   			LONGRELEASED=4 	return: true - Success 		    false - Not successful
 */
template <typename ... _AttributeExtensions>
void TataCarPlayPresPluginProxy<_AttributeExtensions...>::revSeekCarplayMedia(const uint32_t &_KeyStatus, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->revSeekCarplayMedia(_KeyStatus, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TataCarPlayPresPluginProxy<_AttributeExtensions...>::revSeekCarplayMediaAsync(const uint32_t &_KeyStatus, RevSeekCarplayMediaAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->revSeekCarplayMediaAsync(_KeyStatus, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TataCarPlayPresPluginProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TataCarPlayPresPluginProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TataCarPlayPresPluginProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TataCarPlayPresPluginProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TataCarPlayPresPluginProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace carplaypres
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::carplaypres::TataCarPlayPresPluginProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::carplaypres::TataCarPlayPresPluginProxy<
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::NowPlayingDataAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::CarplayModeOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::MainaudioOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::ScreenOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::PhoneOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::NavigationOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::SpeechOwnerAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::CurrentSpeechModeAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::carplaypres::TataCarPlayPresPluginExtensions::CurrentPlayStateAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_2 = v0;

#endif // V0_COM_HARMAN_CARPLAYPRES_Tata_Car_Play_Pres_Plugin_PROXY_HPP_
