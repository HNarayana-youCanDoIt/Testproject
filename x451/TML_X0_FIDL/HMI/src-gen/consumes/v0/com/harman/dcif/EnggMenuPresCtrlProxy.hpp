/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_Engg_Menu_Pres_Ctrl_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_Engg_Menu_Pres_Ctrl_PROXY_HPP_

#include <v0/com/harman/dcif/EnggMenuPresCtrlProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

template <typename ... _AttributeExtensions>
class EnggMenuPresCtrlProxy
    : virtual public EnggMenuPresCtrl, 
      virtual public EnggMenuPresCtrlProxyBase,
      virtual public _AttributeExtensions... {
public:
    EnggMenuPresCtrlProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~EnggMenuPresCtrlProxy();

    typedef EnggMenuPresCtrl InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute logStatus.
     */
    virtual LogStatusAttribute& getLogStatusAttribute() {
        return delegate_->getLogStatusAttribute();
    }
    /**
     * description: signal to send the tuner data.
     */
    /**
     * Returns the wrapper class that provides access to the attribute tunerData.
     */
    virtual TunerDataAttribute& getTunerDataAttribute() {
        return delegate_->getTunerDataAttribute();
    }
    /**
     * description: signal to send the media data.
     */
    /**
     * Returns the wrapper class that provides access to the attribute mediaData.
     */
    virtual MediaDataAttribute& getMediaDataAttribute() {
        return delegate_->getMediaDataAttribute();
    }

    /**
     * description: signal to indicate whether factory Reset is Complete.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast factoryResetComplete.
     */
    virtual FactoryResetCompleteEvent& getFactoryResetCompleteEvent() {
        return delegate_->getFactoryResetCompleteEvent();
    }

    /**
     * description: method to start logging of DBUS,DLT RAM and CPU Measurement logs 		DBUS_LOGS =
     *   0 		DLT_LOGS = 1 		CPU_MEASUREMENT_LOGS = 2 		RAM_MEASUREMENT_LOGS = 3
     * Calls startLogging with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startLogging(const ::v0::com::harman::dcif::EnggMenuTypes::logType &_typeOfLogs, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::logType &_activeLogType, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startLogging with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startLoggingAsync(const ::v0::com::harman::dcif::EnggMenuTypes::logType &_typeOfLogs, StartLoggingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to start logging of DBUS,DLT RAM and CPU Measurement logs
     * Calls startSystemLogging with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void startSystemLogging(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls startSystemLogging with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> startSystemLoggingAsync(StartSystemLoggingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to stop logging of DBUS,DLT RAM and CPU Measurement logs
     * Calls stopSystemLogging with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stopSystemLogging(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stopSystemLogging with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopSystemLoggingAsync(StopSystemLoggingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls extractLogs with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void extractLogs(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::extractLogsError_enum &_logError, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls extractLogs with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> extractLogsAsync(ExtractLogsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to stop logging of DBUS,DLT RAM and CPU Measurement logs 		DBUS_LOGS = 0
     *   		DLT_LOGS = 1 		CPU_MEASUREMENT_LOGS = 2 		RAM_MEASUREMENT_LOGS = 3
     * Calls stopLogging with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stopLogging(const ::v0::com::harman::dcif::EnggMenuTypes::logType &_typeOfLogs, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::logType &_activeLogType, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls stopLogging with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stopLoggingAsync(const ::v0::com::harman::dcif::EnggMenuTypes::logType &_typeOfLogs, StopLoggingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to set Display Brightness
     * Calls setDisplayBrightness with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setDisplayBrightness(const uint16_t &_brightnessValue, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setDisplayBrightness with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setDisplayBrightnessAsync(const uint16_t &_brightnessValue, SetDisplayBrightnessAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to read Display Brightness
     * Calls getDisplayBrightness with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getDisplayBrightness(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_brightnessValue, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getDisplayBrightness with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getDisplayBrightnessAsync(GetDisplayBrightnessAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to set Button Panel Brightness
     * Calls setButtonPanelBrightness with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setButtonPanelBrightness(const uint16_t &_brightnessValue, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setButtonPanelBrightness with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setButtonPanelBrightnessAsync(const uint16_t &_brightnessValue, SetButtonPanelBrightnessAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to read Button Panel Brightness
     * Calls getButtonPanelBrightness with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getButtonPanelBrightness(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_brightnessValue, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getButtonPanelBrightness with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getButtonPanelBrightnessAsync(GetButtonPanelBrightnessAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to read media type
     * Calls getMediaType with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMediaType(CommonAPI::CallStatus &_internalCallStatus, std::string &_mediaType, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMediaType with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMediaTypeAsync(GetMediaTypeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to read track name
     * Calls getTrackName with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getTrackName(CommonAPI::CallStatus &_internalCallStatus, std::string &_trackName, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getTrackName with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getTrackNameAsync(GetTrackNameAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to launch/stop test automation service
     * Calls testAutomationLaunch with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void testAutomationLaunch(const bool &_isEnable, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls testAutomationLaunch with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> testAutomationLaunchAsync(const bool &_isEnable, TestAutomationLaunchAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to set the system IP- Static/Dynamic
     * Calls setSystemIP with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setSystemIP(const ::v0::com::harman::dcif::EnggMenuTypes::ipType_enum &_typeOfIP, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setSystemIP with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setSystemIPAsync(const ::v0::com::harman::dcif::EnggMenuTypes::ipType_enum &_typeOfIP, SetSystemIPAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to read the  		tuner data.
     * Calls getTunerData with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getTunerData(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::tunerInfo &_tunerData, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getTunerData with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getTunerDataAsync(GetTunerDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to read the media data.
     * Calls getMediaData with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getMediaData(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::mediaInfo &_mediaData, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getMediaData with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getMediaDataAsync(GetMediaDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Perform factory reset of peristent data, media,  	tuner and bluetooth data   
     *   	- Key Pres 	- Mute audio sources 	- clear media data 	- reset persistency
     *   data 	- Disconnect the bluetooth device and delete the paired device list 	-
     *   Vehicle Settings reset
     * Calls performFactoryReset with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void performFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls performFactoryReset with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> performFactoryResetAsync(PerformFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: method to turn on device mode.
     * Calls setDeviceMode with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setDeviceMode(const ::v0::com::harman::dcif::EnggMenuTypes::modeType &_typeOfMode, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::modeType &_activatedMode, ::v0::com::harman::dcif::EnggMenuTypes::deviceModeStatus &_dmStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setDeviceMode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setDeviceModeAsync(const ::v0::com::harman::dcif::EnggMenuTypes::modeType &_typeOfMode, SetDeviceModeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Method to update the Mihup configuration file from the USB
     * Calls updateMihupLib with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void updateMihupLib(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls updateMihupLib with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> updateMihupLibAsync(UpdateMihupLibAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<EnggMenuPresCtrlProxyBase> delegate_;
};

typedef EnggMenuPresCtrlProxy<> EnggMenuPresCtrlProxyDefault;

namespace EnggMenuPresCtrlExtensions {
    template <template <typename > class _ExtensionType>
    class LogStatusAttributeExtension {
     public:
        typedef _ExtensionType<EnggMenuPresCtrlProxyBase::LogStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<EnggMenuPresCtrlProxyBase::LogStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        LogStatusAttributeExtension() {}
    #endif
    
        LogStatusAttributeExtension(EnggMenuPresCtrlProxyBase& proxy): attributeExtension_(proxy.getLogStatusAttribute()) {
        }
    
        inline extension_type& getLogStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: signal to send the tuner data.
     */
    template <template <typename > class _ExtensionType>
    class TunerDataAttributeExtension {
     public:
        typedef _ExtensionType<EnggMenuPresCtrlProxyBase::TunerDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<EnggMenuPresCtrlProxyBase::TunerDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        TunerDataAttributeExtension() {}
    #endif
    
        TunerDataAttributeExtension(EnggMenuPresCtrlProxyBase& proxy): attributeExtension_(proxy.getTunerDataAttribute()) {
        }
    
        inline extension_type& getTunerDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: signal to send the media data.
     */
    template <template <typename > class _ExtensionType>
    class MediaDataAttributeExtension {
     public:
        typedef _ExtensionType<EnggMenuPresCtrlProxyBase::MediaDataAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<EnggMenuPresCtrlProxyBase::MediaDataAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        MediaDataAttributeExtension() {}
    #endif
    
        MediaDataAttributeExtension(EnggMenuPresCtrlProxyBase& proxy): attributeExtension_(proxy.getMediaDataAttribute()) {
        }
    
        inline extension_type& getMediaDataAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace EnggMenuPresCtrlExtensions

//
// EnggMenuPresCtrlProxy Implementation
//
template <typename ... _AttributeExtensions>
EnggMenuPresCtrlProxy<_AttributeExtensions...>::EnggMenuPresCtrlProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<EnggMenuPresCtrlProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<EnggMenuPresCtrlProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
EnggMenuPresCtrlProxy<_AttributeExtensions...>::~EnggMenuPresCtrlProxy() {
}

/**
 * description: method to start logging of DBUS,DLT RAM and CPU Measurement logs 		DBUS_LOGS =
 *   0 		DLT_LOGS = 1 		CPU_MEASUREMENT_LOGS = 2 		RAM_MEASUREMENT_LOGS = 3
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::startLogging(const ::v0::com::harman::dcif::EnggMenuTypes::logType &_typeOfLogs, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::logType &_activeLogType, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    if (!_typeOfLogs.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->startLogging(_typeOfLogs, _internalCallStatus, _activeLogType, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::startLoggingAsync(const ::v0::com::harman::dcif::EnggMenuTypes::logType &_typeOfLogs, StartLoggingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_typeOfLogs.validate()) {
        ::v0::com::harman::dcif::EnggMenuTypes::logType activeLogType = ::v0::com::harman::dcif::EnggMenuTypes::logType::INVALID_LOGS;
        ::v0::com::harman::dcif::EnggMenuTypes::retStatus status = ::v0::com::harman::dcif::EnggMenuTypes::retStatus::SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, activeLogType, status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->startLoggingAsync(_typeOfLogs, _callback, _info);
}
/**
 * description: method to start logging of DBUS,DLT RAM and CPU Measurement logs
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::startSystemLogging(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->startSystemLogging(_internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::startSystemLoggingAsync(StartSystemLoggingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->startSystemLoggingAsync(_callback, _info);
}
/**
 * description: method to stop logging of DBUS,DLT RAM and CPU Measurement logs
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::stopSystemLogging(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->stopSystemLogging(_internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::stopSystemLoggingAsync(StopSystemLoggingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->stopSystemLoggingAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::extractLogs(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::extractLogsError_enum &_logError, const CommonAPI::CallInfo *_info) {
    delegate_->extractLogs(_internalCallStatus, _logError, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::extractLogsAsync(ExtractLogsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->extractLogsAsync(_callback, _info);
}
/**
 * description: method to stop logging of DBUS,DLT RAM and CPU Measurement logs 		DBUS_LOGS = 0
 *   		DLT_LOGS = 1 		CPU_MEASUREMENT_LOGS = 2 		RAM_MEASUREMENT_LOGS = 3
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::stopLogging(const ::v0::com::harman::dcif::EnggMenuTypes::logType &_typeOfLogs, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::logType &_activeLogType, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    if (!_typeOfLogs.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->stopLogging(_typeOfLogs, _internalCallStatus, _activeLogType, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::stopLoggingAsync(const ::v0::com::harman::dcif::EnggMenuTypes::logType &_typeOfLogs, StopLoggingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_typeOfLogs.validate()) {
        ::v0::com::harman::dcif::EnggMenuTypes::logType activeLogType = ::v0::com::harman::dcif::EnggMenuTypes::logType::INVALID_LOGS;
        ::v0::com::harman::dcif::EnggMenuTypes::retStatus status = ::v0::com::harman::dcif::EnggMenuTypes::retStatus::SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, activeLogType, status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->stopLoggingAsync(_typeOfLogs, _callback, _info);
}
/**
 * description: method to set Display Brightness
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::setDisplayBrightness(const uint16_t &_brightnessValue, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->setDisplayBrightness(_brightnessValue, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::setDisplayBrightnessAsync(const uint16_t &_brightnessValue, SetDisplayBrightnessAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setDisplayBrightnessAsync(_brightnessValue, _callback, _info);
}
/**
 * description: method to read Display Brightness
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::getDisplayBrightness(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_brightnessValue, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->getDisplayBrightness(_internalCallStatus, _brightnessValue, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::getDisplayBrightnessAsync(GetDisplayBrightnessAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getDisplayBrightnessAsync(_callback, _info);
}
/**
 * description: method to set Button Panel Brightness
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::setButtonPanelBrightness(const uint16_t &_brightnessValue, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->setButtonPanelBrightness(_brightnessValue, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::setButtonPanelBrightnessAsync(const uint16_t &_brightnessValue, SetButtonPanelBrightnessAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setButtonPanelBrightnessAsync(_brightnessValue, _callback, _info);
}
/**
 * description: method to read Button Panel Brightness
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::getButtonPanelBrightness(CommonAPI::CallStatus &_internalCallStatus, uint16_t &_brightnessValue, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->getButtonPanelBrightness(_internalCallStatus, _brightnessValue, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::getButtonPanelBrightnessAsync(GetButtonPanelBrightnessAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getButtonPanelBrightnessAsync(_callback, _info);
}
/**
 * description: method to read media type
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::getMediaType(CommonAPI::CallStatus &_internalCallStatus, std::string &_mediaType, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->getMediaType(_internalCallStatus, _mediaType, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::getMediaTypeAsync(GetMediaTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMediaTypeAsync(_callback, _info);
}
/**
 * description: method to read track name
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::getTrackName(CommonAPI::CallStatus &_internalCallStatus, std::string &_trackName, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->getTrackName(_internalCallStatus, _trackName, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::getTrackNameAsync(GetTrackNameAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getTrackNameAsync(_callback, _info);
}
/**
 * description: method to launch/stop test automation service
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::testAutomationLaunch(const bool &_isEnable, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->testAutomationLaunch(_isEnable, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::testAutomationLaunchAsync(const bool &_isEnable, TestAutomationLaunchAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->testAutomationLaunchAsync(_isEnable, _callback, _info);
}
/**
 * description: method to set the system IP- Static/Dynamic
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::setSystemIP(const ::v0::com::harman::dcif::EnggMenuTypes::ipType_enum &_typeOfIP, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    if (!_typeOfIP.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setSystemIP(_typeOfIP, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::setSystemIPAsync(const ::v0::com::harman::dcif::EnggMenuTypes::ipType_enum &_typeOfIP, SetSystemIPAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_typeOfIP.validate()) {
        ::v0::com::harman::dcif::EnggMenuTypes::retStatus status = ::v0::com::harman::dcif::EnggMenuTypes::retStatus::SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setSystemIPAsync(_typeOfIP, _callback, _info);
}
/**
 * description: method to read the  		tuner data.
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::getTunerData(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::tunerInfo &_tunerData, const CommonAPI::CallInfo *_info) {
    delegate_->getTunerData(_internalCallStatus, _tunerData, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::getTunerDataAsync(GetTunerDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getTunerDataAsync(_callback, _info);
}
/**
 * description: method to read the media data.
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::getMediaData(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::mediaInfo &_mediaData, const CommonAPI::CallInfo *_info) {
    delegate_->getMediaData(_internalCallStatus, _mediaData, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::getMediaDataAsync(GetMediaDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getMediaDataAsync(_callback, _info);
}
/**
 * description: Perform factory reset of peristent data, media,  	tuner and bluetooth data   
 *   	- Key Pres 	- Mute audio sources 	- clear media data 	- reset persistency
 *   data 	- Disconnect the bluetooth device and delete the paired device list 	-
 *   Vehicle Settings reset
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::performFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->performFactoryReset(_internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::performFactoryResetAsync(PerformFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->performFactoryResetAsync(_callback, _info);
}
/**
 * description: method to turn on device mode.
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::setDeviceMode(const ::v0::com::harman::dcif::EnggMenuTypes::modeType &_typeOfMode, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::modeType &_activatedMode, ::v0::com::harman::dcif::EnggMenuTypes::deviceModeStatus &_dmStatus, const CommonAPI::CallInfo *_info) {
    if (!_typeOfMode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setDeviceMode(_typeOfMode, _internalCallStatus, _activatedMode, _dmStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::setDeviceModeAsync(const ::v0::com::harman::dcif::EnggMenuTypes::modeType &_typeOfMode, SetDeviceModeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_typeOfMode.validate()) {
        ::v0::com::harman::dcif::EnggMenuTypes::modeType activatedMode = ::v0::com::harman::dcif::EnggMenuTypes::modeType::DEVICE_MODE;
        ::v0::com::harman::dcif::EnggMenuTypes::deviceModeStatus dmStatus = ::v0::com::harman::dcif::EnggMenuTypes::deviceModeStatus::FAILURE;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, activatedMode, dmStatus);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setDeviceModeAsync(_typeOfMode, _callback, _info);
}
/**
 * description: Method to update the Mihup configuration file from the USB
 */
template <typename ... _AttributeExtensions>
void EnggMenuPresCtrlProxy<_AttributeExtensions...>::updateMihupLib(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::EnggMenuTypes::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->updateMihupLib(_internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> EnggMenuPresCtrlProxy<_AttributeExtensions...>::updateMihupLibAsync(UpdateMihupLibAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->updateMihupLibAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &EnggMenuPresCtrlProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool EnggMenuPresCtrlProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool EnggMenuPresCtrlProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& EnggMenuPresCtrlProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& EnggMenuPresCtrlProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::dcif::EnggMenuPresCtrlProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::dcif::EnggMenuPresCtrlProxy<
            ::v0::com::harman::dcif::EnggMenuPresCtrlExtensions::LogStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::dcif::EnggMenuPresCtrlExtensions::TunerDataAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::dcif::EnggMenuPresCtrlExtensions::MediaDataAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_Engg_Menu_Pres_Ctrl_PROXY_HPP_
