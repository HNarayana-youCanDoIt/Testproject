/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_Ccm_Hu_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_Ccm_Hu_PROXY_HPP_

#include <v0/com/harman/dcif/CcmHuProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

template <typename ... _AttributeExtensions>
class CcmHuProxy
    : virtual public CcmHu, 
      virtual public CcmHuProxyBase,
      virtual public _AttributeExtensions... {
public:
    CcmHuProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CcmHuProxy();

    typedef CcmHu InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute ccmHu.
     */
    virtual CcmHuAttribute& getCcmHuAttribute() {
        return delegate_->getCcmHuAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute ccmHuUserInterventionFlag.
     */
    virtual CcmHuUserInterventionFlagAttribute& getCcmHuUserInterventionFlagAttribute() {
        return delegate_->getCcmHuUserInterventionFlagAttribute();
    }


    /**
     * Calls huCcm_req with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void huCcm_req(const ::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam &_huCcm_enum, const uint16_t &_huCcm_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls huCcm_req with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> huCcm_reqAsync(const ::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam &_huCcm_enum, const uint16_t &_huCcm_value, HuCcm_reqAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCcmInfo with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCcmInfo(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::CcmPresTypes::CcmInfo &_ccmInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCcmInfo with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCcmInfoAsync(GetCcmInfoAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<CcmHuProxyBase> delegate_;
};

typedef CcmHuProxy<> CcmHuProxyDefault;

namespace CcmHuExtensions {
    template <template <typename > class _ExtensionType>
    class CcmHuAttributeExtension {
     public:
        typedef _ExtensionType<CcmHuProxyBase::CcmHuAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CcmHuProxyBase::CcmHuAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CcmHuAttributeExtension() {}
    #endif
    
        CcmHuAttributeExtension(CcmHuProxyBase& proxy): attributeExtension_(proxy.getCcmHuAttribute()) {
        }
    
        inline extension_type& getCcmHuAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class CcmHuUserInterventionFlagAttributeExtension {
     public:
        typedef _ExtensionType<CcmHuProxyBase::CcmHuUserInterventionFlagAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<CcmHuProxyBase::CcmHuUserInterventionFlagAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CcmHuUserInterventionFlagAttributeExtension() {}
    #endif
    
        CcmHuUserInterventionFlagAttributeExtension(CcmHuProxyBase& proxy): attributeExtension_(proxy.getCcmHuUserInterventionFlagAttribute()) {
        }
    
        inline extension_type& getCcmHuUserInterventionFlagAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace CcmHuExtensions

//
// CcmHuProxy Implementation
//
template <typename ... _AttributeExtensions>
CcmHuProxy<_AttributeExtensions...>::CcmHuProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<CcmHuProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<CcmHuProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CcmHuProxy<_AttributeExtensions...>::~CcmHuProxy() {
}

template <typename ... _AttributeExtensions>
void CcmHuProxy<_AttributeExtensions...>::huCcm_req(const ::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam &_huCcm_enum, const uint16_t &_huCcm_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_huCcm_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->huCcm_req(_huCcm_enum, _huCcm_value, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CcmHuProxy<_AttributeExtensions...>::huCcm_reqAsync(const ::v0::com::harman::dcif::CcmPresTypes::eHuCcmParam &_huCcm_enum, const uint16_t &_huCcm_value, HuCcm_reqAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_huCcm_enum.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->huCcm_reqAsync(_huCcm_enum, _huCcm_value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void CcmHuProxy<_AttributeExtensions...>::getCcmInfo(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::CcmPresTypes::CcmInfo &_ccmInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getCcmInfo(_internalCallStatus, _ccmInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CcmHuProxy<_AttributeExtensions...>::getCcmInfoAsync(GetCcmInfoAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCcmInfoAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CcmHuProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CcmHuProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CcmHuProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CcmHuProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CcmHuProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::dcif::CcmHuProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::dcif::CcmHuProxy<
            ::v0::com::harman::dcif::CcmHuExtensions::CcmHuAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::dcif::CcmHuExtensions::CcmHuUserInterventionFlagAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_Ccm_Hu_PROXY_HPP_
