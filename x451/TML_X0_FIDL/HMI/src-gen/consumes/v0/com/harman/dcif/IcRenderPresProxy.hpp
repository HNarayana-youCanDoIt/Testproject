/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_Ic_Render_Pres_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_Ic_Render_Pres_PROXY_HPP_

#include <v0/com/harman/dcif/IcRenderPresProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

template <typename ... _AttributeExtensions>
class IcRenderPresProxy
    : virtual public IcRenderPres, 
      virtual public IcRenderPresProxyBase,
      virtual public _AttributeExtensions... {
public:
    IcRenderPresProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~IcRenderPresProxy();

    typedef IcRenderPres InterfaceType;




    /**
     * Calls setIcRenderCast with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setIcRenderCast(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, const bool &_icRenderCast_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setIcRenderCast with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setIcRenderCastAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, const bool &_icRenderCast_value, SetIcRenderCastAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getIcRenderCast with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getIcRenderCast(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, CommonAPI::CallStatus &_internalCallStatus, bool &_icRenderCast_value, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getIcRenderCast with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getIcRenderCastAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, GetIcRenderCastAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setIcColorTheme with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setIcColorTheme(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum &_icColorTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setIcColorTheme with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setIcColorThemeAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum &_icColorTheme, SetIcColorThemeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setIcRenderPhoneCallState with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setIcRenderPhoneCallState(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState &_icCallState_enum, const std::string &_icContactNameNum, const int8_t &_icCallId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setIcRenderPhoneCallState with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setIcRenderPhoneCallStateAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState &_icCallState_enum, const std::string &_icContactNameNum, const int8_t &_icCallId, SetIcRenderPhoneCallStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setIcRenderSmsRxIndication with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setIcRenderSmsRxIndication(const bool &_icSmsIndicationFlag, const std::string &_icContactNameNum, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setIcRenderSmsRxIndication with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setIcRenderSmsRxIndicationAsync(const bool &_icSmsIndicationFlag, const std::string &_icContactNameNum, SetIcRenderSmsRxIndicationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<IcRenderPresProxyBase> delegate_;
};

typedef IcRenderPresProxy<> IcRenderPresProxyDefault;


//
// IcRenderPresProxy Implementation
//
template <typename ... _AttributeExtensions>
IcRenderPresProxy<_AttributeExtensions...>::IcRenderPresProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<IcRenderPresProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<IcRenderPresProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
IcRenderPresProxy<_AttributeExtensions...>::~IcRenderPresProxy() {
}

template <typename ... _AttributeExtensions>
void IcRenderPresProxy<_AttributeExtensions...>::setIcRenderCast(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, const bool &_icRenderCast_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_icRenderCast_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setIcRenderCast(_icRenderCast_enum, _icRenderCast_value, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IcRenderPresProxy<_AttributeExtensions...>::setIcRenderCastAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, const bool &_icRenderCast_value, SetIcRenderCastAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_icRenderCast_enum.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setIcRenderCastAsync(_icRenderCast_enum, _icRenderCast_value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void IcRenderPresProxy<_AttributeExtensions...>::getIcRenderCast(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, CommonAPI::CallStatus &_internalCallStatus, bool &_icRenderCast_value, const CommonAPI::CallInfo *_info) {
    if (!_icRenderCast_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->getIcRenderCast(_icRenderCast_enum, _internalCallStatus, _icRenderCast_value, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IcRenderPresProxy<_AttributeExtensions...>::getIcRenderCastAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCast &_icRenderCast_enum, GetIcRenderCastAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_icRenderCast_enum.validate()) {
        bool icRenderCast_value = false;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, icRenderCast_value);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->getIcRenderCastAsync(_icRenderCast_enum, _callback, _info);
}
template <typename ... _AttributeExtensions>
void IcRenderPresProxy<_AttributeExtensions...>::setIcColorTheme(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum &_icColorTheme, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_icColorTheme.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setIcColorTheme(_icColorTheme, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IcRenderPresProxy<_AttributeExtensions...>::setIcColorThemeAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcColorStatus_enum &_icColorTheme, SetIcColorThemeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_icColorTheme.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setIcColorThemeAsync(_icColorTheme, _callback, _info);
}
template <typename ... _AttributeExtensions>
void IcRenderPresProxy<_AttributeExtensions...>::setIcRenderPhoneCallState(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState &_icCallState_enum, const std::string &_icContactNameNum, const int8_t &_icCallId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_icCallState_enum.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setIcRenderPhoneCallState(_icCallState_enum, _icContactNameNum, _icCallId, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IcRenderPresProxy<_AttributeExtensions...>::setIcRenderPhoneCallStateAsync(const ::v0::com::harman::dcif::IcRenderPresTypes::eIcRenderCallState &_icCallState_enum, const std::string &_icContactNameNum, const int8_t &_icCallId, SetIcRenderPhoneCallStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_icCallState_enum.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setIcRenderPhoneCallStateAsync(_icCallState_enum, _icContactNameNum, _icCallId, _callback, _info);
}
template <typename ... _AttributeExtensions>
void IcRenderPresProxy<_AttributeExtensions...>::setIcRenderSmsRxIndication(const bool &_icSmsIndicationFlag, const std::string &_icContactNameNum, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setIcRenderSmsRxIndication(_icSmsIndicationFlag, _icContactNameNum, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IcRenderPresProxy<_AttributeExtensions...>::setIcRenderSmsRxIndicationAsync(const bool &_icSmsIndicationFlag, const std::string &_icContactNameNum, SetIcRenderSmsRxIndicationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setIcRenderSmsRxIndicationAsync(_icSmsIndicationFlag, _icContactNameNum, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &IcRenderPresProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool IcRenderPresProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool IcRenderPresProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& IcRenderPresProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& IcRenderPresProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_Ic_Render_Pres_PROXY_HPP_
