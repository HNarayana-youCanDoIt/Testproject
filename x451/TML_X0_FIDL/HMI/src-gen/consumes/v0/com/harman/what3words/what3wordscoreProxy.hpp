/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_WHAT3WORDS_what3wordscore_PROXY_HPP_
#define V0_COM_HARMAN_WHAT3WORDS_what3wordscore_PROXY_HPP_

#include <v0/com/harman/what3words/what3wordscoreProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace what3words {

template <typename ... _AttributeExtensions>
class what3wordscoreProxy
    : virtual public what3wordscore, 
      virtual public what3wordscoreProxyBase,
      virtual public _AttributeExtensions... {
public:
    what3wordscoreProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~what3wordscoreProxy();

    typedef what3wordscore InterfaceType;




    /**
     * description: This method will provide three autosuggestion of words for a string input in
     *   w3w format 		returns:      Vector for three word address, language code,
     *   nearest place, country code         status:       SUCCESS if no error, FAILURE
     *   on error.
     * param: w3waddress The three words address in W3W format
     * Calls getAutoSuggestions with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getAutoSuggestions(const std::string &_w3waddress, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wTypeCollection::arSuggtion &_wordSugg, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getAutoSuggestions with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getAutoSuggestionsAsync(const std::string &_w3waddress, GetAutoSuggestionsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method will provide latitude and longitiude details of last navigated W3W
     *   address 		returns:	  Latitude and longitude details of W3W address        
     *   status:       SUCCESS if no error, FAILURE on error.
     * param: w3waddress The three word address in W3W format
     * Calls getLatLong with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getLatLong(const std::string &_w3waddress, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getLatLong with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getLatLongAsync(const std::string &_w3waddress, GetLatLongAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method will W3W address for the latitude and longitude co-ordinates
     *   		returns:	  W3W address         status:       SUCCESS if no error, FAILURE on
     *   error.
     * param: coord latitude and Longitude
     * Calls getW3WAddress with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getW3WAddress(const ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, std::string &_w3waddress, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getW3WAddress with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getW3WAddressAsync(const ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, GetW3WAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<what3wordscoreProxyBase> delegate_;
};

typedef what3wordscoreProxy<> what3wordscoreProxyDefault;


//
// what3wordscoreProxy Implementation
//
template <typename ... _AttributeExtensions>
what3wordscoreProxy<_AttributeExtensions...>::what3wordscoreProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<what3wordscoreProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<what3wordscoreProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
what3wordscoreProxy<_AttributeExtensions...>::~what3wordscoreProxy() {
}

/**
 * description: This method will provide three autosuggestion of words for a string input in
 *   w3w format 		returns:      Vector for three word address, language code,
 *   nearest place, country code         status:       SUCCESS if no error, FAILURE
 *   on error.
 * param: w3waddress The three words address in W3W format
 */
template <typename ... _AttributeExtensions>
void what3wordscoreProxy<_AttributeExtensions...>::getAutoSuggestions(const std::string &_w3waddress, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wTypeCollection::arSuggtion &_wordSugg, const CommonAPI::CallInfo *_info) {
    delegate_->getAutoSuggestions(_w3waddress, _internalCallStatus, _status, _wordSugg, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordscoreProxy<_AttributeExtensions...>::getAutoSuggestionsAsync(const std::string &_w3waddress, GetAutoSuggestionsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getAutoSuggestionsAsync(_w3waddress, _callback, _info);
}
/**
 * description: This method will provide latitude and longitiude details of last navigated W3W
 *   address 		returns:	  Latitude and longitude details of W3W address        
 *   status:       SUCCESS if no error, FAILURE on error.
 * param: w3waddress The three word address in W3W format
 */
template <typename ... _AttributeExtensions>
void what3wordscoreProxy<_AttributeExtensions...>::getLatLong(const std::string &_w3waddress, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, const CommonAPI::CallInfo *_info) {
    delegate_->getLatLong(_w3waddress, _internalCallStatus, _status, _coord, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordscoreProxy<_AttributeExtensions...>::getLatLongAsync(const std::string &_w3waddress, GetLatLongAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getLatLongAsync(_w3waddress, _callback, _info);
}
/**
 * description: This method will W3W address for the latitude and longitude co-ordinates
 *   		returns:	  W3W address         status:       SUCCESS if no error, FAILURE on
 *   error.
 * param: coord latitude and Longitude
 */
template <typename ... _AttributeExtensions>
void what3wordscoreProxy<_AttributeExtensions...>::getW3WAddress(const ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wTypeCollection::retStatus &_status, std::string &_w3waddress, const CommonAPI::CallInfo *_info) {
    delegate_->getW3WAddress(_coord, _internalCallStatus, _status, _w3waddress, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordscoreProxy<_AttributeExtensions...>::getW3WAddressAsync(const ::v0::com::harman::what3words::w3wTypeCollection::Coordinates &_coord, GetW3WAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getW3WAddressAsync(_coord, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &what3wordscoreProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool what3wordscoreProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool what3wordscoreProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& what3wordscoreProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& what3wordscoreProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace what3words
} // namespace harman
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_WHAT3WORDS_what3wordscore_PROXY_HPP_
