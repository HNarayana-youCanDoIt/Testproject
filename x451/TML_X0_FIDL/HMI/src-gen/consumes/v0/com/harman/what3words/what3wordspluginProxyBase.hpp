/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_PROXY_BASE_HPP_
#define V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_PROXY_BASE_HPP_

#include <v0/com/harman/what3words/what3wordsplugin.hpp>


#include <v0/com/harman/what3words/w3wpluginTypeCollection.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace what3words {

class what3wordspluginProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute<std::string> CountryCodeAttribute;
    typedef CommonAPI::Event<
        ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus
    > MapsLaunchStatusEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus
    > ConnNextAppStatusEvent;
    typedef CommonAPI::Event<
        ::v0::com::harman::what3words::w3wpluginTypeCollection::listType
    > UpdateAddressListEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus&)> NavigateToAddressAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus&)> GetconnNextAppStatusAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus&, const std::string&)> GetCountryCodeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList&)> GetW3WAddressListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus&)> AddW3WAddressToListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus&)> DeleteW3WAddressfromListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus&)> EditW3WAddressfromListAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus&)> PerformW3WFactoryResetAsyncCallback;

    /**
     * description: This is an attribute to know the country code // Refer
     *   https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for entire list
     *   		For entire world, set the countryCode as empty
     */
    virtual CountryCodeAttribute& getCountryCodeAttribute() = 0;

    /**
     * description: This method will broadcast the launch status of maps sent from smartphone      
     *     status:       SUCCESS if maps launch is successful, FAILURE if not successful
     */
    virtual MapsLaunchStatusEvent& getMapsLaunchStatusEvent() = 0;
    /**
     * description: This method will broadcast the status of connectnext app         status:      
     *   SUCCESS if ConnNext link is established, FAILURE if not established
     */
    virtual ConnNextAppStatusEvent& getConnNextAppStatusEvent() = 0;
    /**
     * description: This method will broadcast the updation of the list         returns: enum value
     *   of listType
     */
    virtual UpdateAddressListEvent& getUpdateAddressListEvent() = 0;

    /**
     * description: This method will receive a three word address in W3W format as keyboard input  
     *         status:       SUCCESS if no error, FAILURE on error.
     * param: w3waddress The three word address in W3W format
     */
    virtual void navigateToAddress(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> navigateToAddressAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, NavigateToAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This is a getter method to know the status of connectnext app         status:  
     *       SUCCESS if ConnNext link is established, FAILURE if not established
     */
    virtual void getconnNextAppStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getconnNextAppStatusAsync(GetconnNextAppStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This is a getter method to know the country code set by user 		returns:	 
     *   Country code string (eg: For India "IN")         status:       SUCCESS if no
     *   error, FAILURE on error
     */
    virtual void getCountryCode(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, std::string &_countryCode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCountryCodeAsync(GetCountryCodeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will give the list of W3W addresses based upon listType input
     *   		args:		  enum value of listType 		returns:	  Vector list for uniqueID, three
     *   word address, language code, nearest place, country code, label         	     
     *       SUCCESS if no error, FAILURE on error
     */
    virtual void getW3WAddressList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getW3WAddressListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, GetW3WAddressListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will add the provided address in the list based upon listType
     *   		args:	  	  enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    virtual void addW3WAddressToList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addW3WAddressToListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, AddW3WAddressToListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will delete the provided address from the list based upon listType
     *   		args:	      enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    virtual void deleteW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> deleteW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, DeleteW3WAddressfromListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will edit the input address from the list based upon listType
     *   		args:	      enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     */
    virtual void editW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> editW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, EditW3WAddressfromListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will reset all the list to default on factory reset         status:
     *         SUCCESS if no error, FAILURE on error
     */
    virtual void performW3WFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> performW3WFactoryResetAsync(PerformW3WFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace what3words
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_PROXY_BASE_HPP_
