/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_PROXY_HPP_
#define V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_PROXY_HPP_

#include <v0/com/harman/what3words/what3wordspluginProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace what3words {

template <typename ... _AttributeExtensions>
class what3wordspluginProxy
    : virtual public what3wordsplugin, 
      virtual public what3wordspluginProxyBase,
      virtual public _AttributeExtensions... {
public:
    what3wordspluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~what3wordspluginProxy();

    typedef what3wordsplugin InterfaceType;


    /**
     * description: This is an attribute to know the country code // Refer
     *   https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for entire list
     *   		For entire world, set the countryCode as empty
     */
    /**
     * Returns the wrapper class that provides access to the attribute countryCode.
     */
    virtual CountryCodeAttribute& getCountryCodeAttribute() {
        return delegate_->getCountryCodeAttribute();
    }

    /**
     * description: This method will broadcast the launch status of maps sent from smartphone      
     *     status:       SUCCESS if maps launch is successful, FAILURE if not successful
     */
    /**
     * Returns the wrapper class that provides access to the broadcast mapsLaunchStatus.
     */
    virtual MapsLaunchStatusEvent& getMapsLaunchStatusEvent() {
        return delegate_->getMapsLaunchStatusEvent();
    }
    /**
     * description: This method will broadcast the status of connectnext app         status:      
     *   SUCCESS if ConnNext link is established, FAILURE if not established
     */
    /**
     * Returns the wrapper class that provides access to the broadcast connNextAppStatus.
     */
    virtual ConnNextAppStatusEvent& getConnNextAppStatusEvent() {
        return delegate_->getConnNextAppStatusEvent();
    }
    /**
     * description: This method will broadcast the updation of the list         returns: enum value
     *   of listType
     */
    /**
     * Returns the wrapper class that provides access to the broadcast updateAddressList.
     */
    virtual UpdateAddressListEvent& getUpdateAddressListEvent() {
        return delegate_->getUpdateAddressListEvent();
    }

    /**
     * description: This method will receive a three word address in W3W format as keyboard input  
     *         status:       SUCCESS if no error, FAILURE on error.
     * param: w3waddress The three word address in W3W format
     * Calls navigateToAddress with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void navigateToAddress(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls navigateToAddress with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> navigateToAddressAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, NavigateToAddressAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This is a getter method to know the status of connectnext app         status:  
     *       SUCCESS if ConnNext link is established, FAILURE if not established
     * Calls getconnNextAppStatus with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getconnNextAppStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getconnNextAppStatus with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getconnNextAppStatusAsync(GetconnNextAppStatusAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This is a getter method to know the country code set by user 		returns:	 
     *   Country code string (eg: For India "IN")         status:       SUCCESS if no
     *   error, FAILURE on error
     * Calls getCountryCode with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getCountryCode(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, std::string &_countryCode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getCountryCode with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getCountryCodeAsync(GetCountryCodeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method will give the list of W3W addresses based upon listType input
     *   		args:		  enum value of listType 		returns:	  Vector list for uniqueID, three
     *   word address, language code, nearest place, country code, label         	     
     *       SUCCESS if no error, FAILURE on error
     * Calls getW3WAddressList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getW3WAddressList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getW3WAddressList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getW3WAddressListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, GetW3WAddressListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method will add the provided address in the list based upon listType
     *   		args:	  	  enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     * Calls addW3WAddressToList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void addW3WAddressToList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls addW3WAddressToList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addW3WAddressToListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, AddW3WAddressToListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method will delete the provided address from the list based upon listType
     *   		args:	      enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     * Calls deleteW3WAddressfromList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void deleteW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls deleteW3WAddressfromList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> deleteW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, DeleteW3WAddressfromListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method will edit the input address from the list based upon listType
     *   		args:	      enum value of listType 					  Vector of uniqueID, three word
     *   address, language code, nearest place, country code, label         returns:   
     *     SUCCESS if no error, FAILURE on error
     * Calls editW3WAddressfromList with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void editW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls editW3WAddressfromList with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> editW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, EditW3WAddressfromListAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: This method will reset all the list to default on factory reset         status:
     *         SUCCESS if no error, FAILURE on error
     * Calls performW3WFactoryReset with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void performW3WFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls performW3WFactoryReset with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> performW3WFactoryResetAsync(PerformW3WFactoryResetAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<what3wordspluginProxyBase> delegate_;
};

typedef what3wordspluginProxy<> what3wordspluginProxyDefault;

namespace what3wordspluginExtensions {
    /**
     * description: This is an attribute to know the country code // Refer
     *   https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for entire list
     *   		For entire world, set the countryCode as empty
     */
    template <template <typename > class _ExtensionType>
    class CountryCodeAttributeExtension {
     public:
        typedef _ExtensionType<what3wordspluginProxyBase::CountryCodeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<what3wordspluginProxyBase::CountryCodeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        CountryCodeAttributeExtension() {}
    #endif
    
        CountryCodeAttributeExtension(what3wordspluginProxyBase& proxy): attributeExtension_(proxy.getCountryCodeAttribute()) {
        }
    
        inline extension_type& getCountryCodeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace what3wordspluginExtensions

//
// what3wordspluginProxy Implementation
//
template <typename ... _AttributeExtensions>
what3wordspluginProxy<_AttributeExtensions...>::what3wordspluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<what3wordspluginProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<what3wordspluginProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
what3wordspluginProxy<_AttributeExtensions...>::~what3wordspluginProxy() {
}

/**
 * description: This method will receive a three word address in W3W format as keyboard input  
 *         status:       SUCCESS if no error, FAILURE on error.
 * param: w3waddress The three word address in W3W format
 */
template <typename ... _AttributeExtensions>
void what3wordspluginProxy<_AttributeExtensions...>::navigateToAddress(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->navigateToAddress(_list, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordspluginProxy<_AttributeExtensions...>::navigateToAddressAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, NavigateToAddressAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->navigateToAddressAsync(_list, _callback, _info);
}
/**
 * description: This is a getter method to know the status of connectnext app         status:  
 *       SUCCESS if ConnNext link is established, FAILURE if not established
 */
template <typename ... _AttributeExtensions>
void what3wordspluginProxy<_AttributeExtensions...>::getconnNextAppStatus(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->getconnNextAppStatus(_internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordspluginProxy<_AttributeExtensions...>::getconnNextAppStatusAsync(GetconnNextAppStatusAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getconnNextAppStatusAsync(_callback, _info);
}
/**
 * description: This is a getter method to know the country code set by user 		returns:	 
 *   Country code string (eg: For India "IN")         status:       SUCCESS if no
 *   error, FAILURE on error
 */
template <typename ... _AttributeExtensions>
void what3wordspluginProxy<_AttributeExtensions...>::getCountryCode(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, std::string &_countryCode, const CommonAPI::CallInfo *_info) {
    delegate_->getCountryCode(_internalCallStatus, _status, _countryCode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordspluginProxy<_AttributeExtensions...>::getCountryCodeAsync(GetCountryCodeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getCountryCodeAsync(_callback, _info);
}
/**
 * description: This method will give the list of W3W addresses based upon listType input
 *   		args:		  enum value of listType 		returns:	  Vector list for uniqueID, three
 *   word address, language code, nearest place, country code, label         	     
 *       SUCCESS if no error, FAILURE on error
 */
template <typename ... _AttributeExtensions>
void what3wordspluginProxy<_AttributeExtensions...>::getW3WAddressList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->getW3WAddressList(_type, _internalCallStatus, _status, _list, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordspluginProxy<_AttributeExtensions...>::getW3WAddressListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, GetW3WAddressListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus status = ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus::SUCCESS;
        ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList list = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, status, list);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->getW3WAddressListAsync(_type, _callback, _info);
}
/**
 * description: This method will add the provided address in the list based upon listType
 *   		args:	  	  enum value of listType 					  Vector of uniqueID, three word
 *   address, language code, nearest place, country code, label         returns:   
 *     SUCCESS if no error, FAILURE on error
 */
template <typename ... _AttributeExtensions>
void what3wordspluginProxy<_AttributeExtensions...>::addW3WAddressToList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->addW3WAddressToList(_type, _addr, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordspluginProxy<_AttributeExtensions...>::addW3WAddressToListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_addr, AddW3WAddressToListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus status = ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus::SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->addW3WAddressToListAsync(_type, _addr, _callback, _info);
}
/**
 * description: This method will delete the provided address from the list based upon listType
 *   		args:	      enum value of listType 					  Vector of uniqueID, three word
 *   address, language code, nearest place, country code, label         returns:   
 *     SUCCESS if no error, FAILURE on error
 */
template <typename ... _AttributeExtensions>
void what3wordspluginProxy<_AttributeExtensions...>::deleteW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->deleteW3WAddressfromList(_type, _list, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordspluginProxy<_AttributeExtensions...>::deleteW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, DeleteW3WAddressfromListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus status = ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus::SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->deleteW3WAddressfromListAsync(_type, _list, _callback, _info);
}
/**
 * description: This method will edit the input address from the list based upon listType
 *   		args:	      enum value of listType 					  Vector of uniqueID, three word
 *   address, language code, nearest place, country code, label         returns:   
 *     SUCCESS if no error, FAILURE on error
 */
template <typename ... _AttributeExtensions>
void what3wordspluginProxy<_AttributeExtensions...>::editW3WAddressfromList(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->editW3WAddressfromList(_type, _list, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordspluginProxy<_AttributeExtensions...>::editW3WAddressfromListAsync(const ::v0::com::harman::what3words::w3wpluginTypeCollection::listType &_type, const ::v0::com::harman::what3words::w3wpluginTypeCollection::arAddList &_list, EditW3WAddressfromListAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_type.validate()) {
        ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus status = ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus::SUCCESS;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, status);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->editW3WAddressfromListAsync(_type, _list, _callback, _info);
}
/**
 * description: This method will reset all the list to default on factory reset         status:
 *         SUCCESS if no error, FAILURE on error
 */
template <typename ... _AttributeExtensions>
void what3wordspluginProxy<_AttributeExtensions...>::performW3WFactoryReset(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::what3words::w3wpluginTypeCollection::retStatus &_status, const CommonAPI::CallInfo *_info) {
    delegate_->performW3WFactoryReset(_internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> what3wordspluginProxy<_AttributeExtensions...>::performW3WFactoryResetAsync(PerformW3WFactoryResetAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->performW3WFactoryResetAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &what3wordspluginProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool what3wordspluginProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool what3wordspluginProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& what3wordspluginProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& what3wordspluginProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace what3words
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::what3words::what3wordspluginProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::what3words::what3wordspluginProxy<
            ::v0::com::harman::what3words::what3wordspluginExtensions::CountryCodeAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_WHAT3WORDS_what3wordsplugin_PROXY_HPP_
