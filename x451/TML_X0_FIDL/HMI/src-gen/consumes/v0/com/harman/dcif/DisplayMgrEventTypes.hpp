/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_DCIF_Display_Mgr_Event_Types_HPP_
#define V0_COM_HARMAN_DCIF_Display_Mgr_Event_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

struct DisplayMgrEventTypes {
    
    struct DmErrorStatus : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            DmErrorStatus_NotSet = 0,
            DmErrorStatus_Ok = 1,
            DmErrorStatus_Error = 2,
            DmErrorStatus_Dbus = 3,
            DmErrorStatus_Internal = 4,
            DmErrorStatus_Parameter = 5,
            DmErrorStatus_WrongSession = 6,
            DmErrorStatus_ResponsePending = 7,
            DmErrorStatus_Last = 8
        };
        
        DmErrorStatus() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::DmErrorStatus_NotSet)) {}
        DmErrorStatus(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::DmErrorStatus_NotSet):
                case static_cast<int32_t>(Literal::DmErrorStatus_Ok):
                case static_cast<int32_t>(Literal::DmErrorStatus_Error):
                case static_cast<int32_t>(Literal::DmErrorStatus_Dbus):
                case static_cast<int32_t>(Literal::DmErrorStatus_Internal):
                case static_cast<int32_t>(Literal::DmErrorStatus_Parameter):
                case static_cast<int32_t>(Literal::DmErrorStatus_WrongSession):
                case static_cast<int32_t>(Literal::DmErrorStatus_ResponsePending):
                case static_cast<int32_t>(Literal::DmErrorStatus_Last):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DmErrorStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DmErrorStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DmErrorStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DmErrorStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DmErrorStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DmErrorStatus &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EDispPMEvent : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PM_SWITCH_OFF_EVENT = 0,
            PM_MEDIA_OFF_EVENT = 1,
            PM_EARLY_WAKEUP_EVENT = 2,
            PM_ACTIVE_EVENT = 3,
            PM_ONE_HOUR_EVENT = 4,
            DM_PHONE_CALL_SMS_PROGRESS_EVENT = 5,
            DM_PHONE_CALL_SMS_COMPLETE_EVENT = 6,
            DM_PDP_RVC_ACTIVATE_EVENT = 7,
            DM_PDP_RVC_COMPLETE_EVENT = 8,
            DM_AUX_INSERTED_EVENT = 9,
            DM_AUX_REMOVED_EVENT = 10,
            DM_BT_AUTO_PAIRED_CONN_EVENT = 11,
            DM_BT_AUTO_PAIRED_DISCONN_EVENT = 12,
            DM_REMOTE_APP_INTERRUPT_EVENT = 13,
            DM_REMOTE_APP_COMPLETE_EVENT = 14,
            DM_HMI_POPUP_EVENT = 15,
            DM_HMI_POPUP_COMPLETE_EVENT = 16,
            DM_TOUCH_PAD_EVENT = 17,
            DM_HMI_DISPLAY_OFF_EVENT = 18,
            DM_KEY_EVNET = 19,
            DM_HMI_NAV_ACTIVATE_EVENT = 20,
            DM_HMI_NAV_COMPLETE_EVENT = 21,
            DM_VIDEO_PLAYBCK_STARTED_EVENT = 22,
            DM_VIDEO_PLAYBCK_COMPLETED_EVENT = 23,
            DM_VOICE_ALERT_STARTED_EVENT = 24,
            DM_VOICE_ALERT_COMPLETED_EVENT = 25,
            DM_VR_STARTED_EVENT = 26,
            DM_VR_COMPLETED_EVENT = 27,
            DM_SWUP_AUTH_STARTED_EVENT = 28,
            DM_SWUP_AUTH_COMPLETED_EVENT = 29,
            DM_AAP_INTERRUPT_STARTED_EVENT = 30,
            DM_AAP_INTERRUPT_COMPLETED_EVENT = 31,
            DM_CP_INTERRUPT_STARTED_EVENT = 32,
            DM_CP_INTERRUPT_COMPLETED_EVENT = 33,
            DM_MAX_EVENT_COUNT = 34
        };
        
        EDispPMEvent() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PM_SWITCH_OFF_EVENT)) {}
        EDispPMEvent(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PM_SWITCH_OFF_EVENT):
                case static_cast<int32_t>(Literal::PM_MEDIA_OFF_EVENT):
                case static_cast<int32_t>(Literal::PM_EARLY_WAKEUP_EVENT):
                case static_cast<int32_t>(Literal::PM_ACTIVE_EVENT):
                case static_cast<int32_t>(Literal::PM_ONE_HOUR_EVENT):
                case static_cast<int32_t>(Literal::DM_PHONE_CALL_SMS_PROGRESS_EVENT):
                case static_cast<int32_t>(Literal::DM_PHONE_CALL_SMS_COMPLETE_EVENT):
                case static_cast<int32_t>(Literal::DM_PDP_RVC_ACTIVATE_EVENT):
                case static_cast<int32_t>(Literal::DM_PDP_RVC_COMPLETE_EVENT):
                case static_cast<int32_t>(Literal::DM_AUX_INSERTED_EVENT):
                case static_cast<int32_t>(Literal::DM_AUX_REMOVED_EVENT):
                case static_cast<int32_t>(Literal::DM_BT_AUTO_PAIRED_CONN_EVENT):
                case static_cast<int32_t>(Literal::DM_BT_AUTO_PAIRED_DISCONN_EVENT):
                case static_cast<int32_t>(Literal::DM_REMOTE_APP_INTERRUPT_EVENT):
                case static_cast<int32_t>(Literal::DM_REMOTE_APP_COMPLETE_EVENT):
                case static_cast<int32_t>(Literal::DM_HMI_POPUP_EVENT):
                case static_cast<int32_t>(Literal::DM_HMI_POPUP_COMPLETE_EVENT):
                case static_cast<int32_t>(Literal::DM_TOUCH_PAD_EVENT):
                case static_cast<int32_t>(Literal::DM_HMI_DISPLAY_OFF_EVENT):
                case static_cast<int32_t>(Literal::DM_KEY_EVNET):
                case static_cast<int32_t>(Literal::DM_HMI_NAV_ACTIVATE_EVENT):
                case static_cast<int32_t>(Literal::DM_HMI_NAV_COMPLETE_EVENT):
                case static_cast<int32_t>(Literal::DM_VIDEO_PLAYBCK_STARTED_EVENT):
                case static_cast<int32_t>(Literal::DM_VIDEO_PLAYBCK_COMPLETED_EVENT):
                case static_cast<int32_t>(Literal::DM_VOICE_ALERT_STARTED_EVENT):
                case static_cast<int32_t>(Literal::DM_VOICE_ALERT_COMPLETED_EVENT):
                case static_cast<int32_t>(Literal::DM_VR_STARTED_EVENT):
                case static_cast<int32_t>(Literal::DM_VR_COMPLETED_EVENT):
                case static_cast<int32_t>(Literal::DM_SWUP_AUTH_STARTED_EVENT):
                case static_cast<int32_t>(Literal::DM_SWUP_AUTH_COMPLETED_EVENT):
                case static_cast<int32_t>(Literal::DM_AAP_INTERRUPT_STARTED_EVENT):
                case static_cast<int32_t>(Literal::DM_AAP_INTERRUPT_COMPLETED_EVENT):
                case static_cast<int32_t>(Literal::DM_CP_INTERRUPT_STARTED_EVENT):
                case static_cast<int32_t>(Literal::DM_CP_INTERRUPT_COMPLETED_EVENT):
                case static_cast<int32_t>(Literal::DM_MAX_EVENT_COUNT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EDispPMEvent &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EDispPMEvent &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EDispPMEvent &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EDispPMEvent &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EDispPMEvent &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EDispPMEvent &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.dcif.DisplayMgrEventTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct DisplayMgrEventTypes

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for DmErrorStatus
    template<>
    struct hash<::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus> {
        inline size_t operator()(const ::v0::com::harman::dcif::DisplayMgrEventTypes::DmErrorStatus& dmErrorStatus) const {
            return static_cast<int32_t>(dmErrorStatus);
        }
    };
    //Hash for EDispPMEvent
    template<>
    struct hash<::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent> {
        inline size_t operator()(const ::v0::com::harman::dcif::DisplayMgrEventTypes::EDispPMEvent& eDispPMEvent) const {
            return static_cast<int32_t>(eDispPMEvent);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_Display_Mgr_Event_Types_HPP_
