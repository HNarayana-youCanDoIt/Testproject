/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_KEYPRES_Key_Pres_Plugin_PROXY_HPP_
#define V0_COM_HARMAN_KEYPRES_Key_Pres_Plugin_PROXY_HPP_

#include <v0/com/harman/keypres/KeyPresPluginProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace keypres {

template <typename ... _AttributeExtensions>
class KeyPresPluginProxy
    : virtual public KeyPresPlugin, 
      virtual public KeyPresPluginProxyBase,
      virtual public _AttributeExtensions... {
public:
    KeyPresPluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~KeyPresPluginProxy();

    typedef KeyPresPlugin InterfaceType;




    /**
     * description: This method will send the keycode received from HMI 	Input :  KeyCodeID,
     *   KeyState
     * Calls sendKeyCode with Fire&Forget semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void sendKeyCode(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * description: This method will send the the volume slider state 	Input :  KeyCodeID,
     *   KeyState, steps 	Output : result
     * Calls sendSliderState with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void sendSliderState(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, const int16_t &_steps, CommonAPI::CallStatus &_internalCallStatus, KeyPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls sendSliderState with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> sendSliderStateAsync(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, const int16_t &_steps, SendSliderStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<KeyPresPluginProxyBase> delegate_;
};

typedef KeyPresPluginProxy<> KeyPresPluginProxyDefault;


//
// KeyPresPluginProxy Implementation
//
template <typename ... _AttributeExtensions>
KeyPresPluginProxy<_AttributeExtensions...>::KeyPresPluginProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<KeyPresPluginProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<KeyPresPluginProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
KeyPresPluginProxy<_AttributeExtensions...>::~KeyPresPluginProxy() {
}

/**
 * description: This method will send the keycode received from HMI 	Input :  KeyCodeID,
 *   KeyState
 */
template <typename ... _AttributeExtensions>
void KeyPresPluginProxy<_AttributeExtensions...>::sendKeyCode(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, CommonAPI::CallStatus &_internalCallStatus) {
    if (!_keyCode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_keystate.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->sendKeyCode(_keyCode, _keystate, _internalCallStatus);
}
/**
 * description: This method will send the the volume slider state 	Input :  KeyCodeID,
 *   KeyState, steps 	Output : result
 */
template <typename ... _AttributeExtensions>
void KeyPresPluginProxy<_AttributeExtensions...>::sendSliderState(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, const int16_t &_steps, CommonAPI::CallStatus &_internalCallStatus, KeyPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info) {
    if (!_keyCode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    if (!_keystate.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->sendSliderState(_keyCode, _keystate, _steps, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> KeyPresPluginProxy<_AttributeExtensions...>::sendSliderStateAsync(const KeyPresPlugin::eKeyCodeId &_keyCode, const KeyPresPlugin::eKeyState &_keystate, const int16_t &_steps, SendSliderStateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_keyCode.validate()) {
        KeyPresPlugin::eCallResult result = KeyPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    if (!_keystate.validate()) {
        KeyPresPlugin::eCallResult result = KeyPresPlugin::eCallResult::CALLRESULT_OK;
        _callback(CommonAPI::CallStatus::INVALID_VALUE, result);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->sendSliderStateAsync(_keyCode, _keystate, _steps, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &KeyPresPluginProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool KeyPresPluginProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool KeyPresPluginProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& KeyPresPluginProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& KeyPresPluginProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace keypres
} // namespace harman
} // namespace com
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_KEYPRES_Key_Pres_Plugin_PROXY_HPP_
