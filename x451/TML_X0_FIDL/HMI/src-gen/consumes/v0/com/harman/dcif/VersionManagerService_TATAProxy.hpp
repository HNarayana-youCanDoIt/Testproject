/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: The VersionManager component is responsible for gathering version information
 *   of the different modules as well as managing     a set of required version for
 *   a certain release, the release configuration that is defined at integration
 *   time.          Version: 1.0     Reason:         - Initial Version     Changes:
 *           1. readonly attributes: allVersionsDetails         2. methods:
 *   getVersionDetails, get16RPartNumber         3. signal : versionMismatch
 * author: Gaurav Garg
 */
#ifndef V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_PROXY_HPP_
#define V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_PROXY_HPP_

#include <v0/com/harman/dcif/VersionManagerService_TATAProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

template <typename ... _AttributeExtensions>
class VersionManagerService_TATAProxy
    : virtual public VersionManagerService_TATA, 
      virtual public VersionManagerService_TATAProxyBase,
      virtual public _AttributeExtensions... {
public:
    VersionManagerService_TATAProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~VersionManagerService_TATAProxy();

    typedef VersionManagerService_TATA InterfaceType;


    /**
     * description: signals mismatch of a version at initial boot up
     */
    /**
     * Returns the wrapper class that provides access to the attribute versionMismatch.
     */
    virtual VersionMismatchAttribute& getVersionMismatchAttribute() {
        return delegate_->getVersionMismatchAttribute();
    }
    /**
     * description: list of all known version informations at runtime
     */
    /**
     * Returns the wrapper class that provides access to the attribute a_allVersionsDetails.
     */
    virtual A_allVersionsDetailsAttribute& getA_allVersionsDetailsAttribute() {
        return delegate_->getA_allVersionsDetailsAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute a_all16RPartDetails.
     */
    virtual A_all16RPartDetailsAttribute& getA_all16RPartDetailsAttribute() {
        return delegate_->getA_all16RPartDetailsAttribute();
    }
    /**
     * Returns the wrapper class that provides access to the attribute a_all16RPartDetailsAscii.
     */
    virtual A_all16RPartDetailsAsciiAttribute& getA_all16RPartDetailsAsciiAttribute() {
        return delegate_->getA_all16RPartDetailsAsciiAttribute();
    }


    /**
     * description: a method to retrieve known version information of a specific component        
     *   to retrieve all versions "attribute VersionInfoList allVersions" can be used
     * Calls getVersionDetails with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getVersionDetails(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t &_t_versionInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getVersionDetails with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getVersionDetailsAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, GetVersionDetailsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls get16RPartNumber with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void get16RPartNumber(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls get16RPartNumber with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> get16RPartNumberAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls get16RPartNumberInAscii with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void get16RPartNumberInAscii(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls get16RPartNumberInAscii with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> get16RPartNumberInAsciiAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberInAsciiAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getPowerModeCfgType with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getPowerModeCfgType(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_PmodeCfgInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getPowerModeCfgType with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getPowerModeCfgTypeAsync(GetPowerModeCfgTypeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getWifiMacNumber with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getWifiMacNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_wifiMACInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getWifiMacNumber with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getWifiMacNumberAsync(GetWifiMacNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getBluetoothMACNumber with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getBluetoothMACNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btMACInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getBluetoothMACNumber with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getBluetoothMACNumberAsync(GetBluetoothMACNumberAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getBluetoothAlignmentValue with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getBluetoothAlignmentValue(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btAlignmentInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getBluetoothAlignmentValue with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getBluetoothAlignmentValueAsync(GetBluetoothAlignmentValueAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getLCDPanelHwVersion with synchronous semantics.
     * 
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getLCDPanelHwVersion(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_lcdHwInfo, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getLCDPanelHwVersion with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getLCDPanelHwVersionAsync(GetLCDPanelHwVersionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<VersionManagerService_TATAProxyBase> delegate_;
};

typedef VersionManagerService_TATAProxy<> VersionManagerService_TATAProxyDefault;

namespace VersionManagerService_TATAExtensions {
    /**
     * description: signals mismatch of a version at initial boot up
     */
    template <template <typename > class _ExtensionType>
    class VersionMismatchAttributeExtension {
     public:
        typedef _ExtensionType<VersionManagerService_TATAProxyBase::VersionMismatchAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VersionManagerService_TATAProxyBase::VersionMismatchAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        VersionMismatchAttributeExtension() {}
    #endif
    
        VersionMismatchAttributeExtension(VersionManagerService_TATAProxyBase& proxy): attributeExtension_(proxy.getVersionMismatchAttribute()) {
        }
    
        inline extension_type& getVersionMismatchAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: list of all known version informations at runtime
     */
    template <template <typename > class _ExtensionType>
    class A_allVersionsDetailsAttributeExtension {
     public:
        typedef _ExtensionType<VersionManagerService_TATAProxyBase::A_allVersionsDetailsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VersionManagerService_TATAProxyBase::A_allVersionsDetailsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        A_allVersionsDetailsAttributeExtension() {}
    #endif
    
        A_allVersionsDetailsAttributeExtension(VersionManagerService_TATAProxyBase& proxy): attributeExtension_(proxy.getA_allVersionsDetailsAttribute()) {
        }
    
        inline extension_type& getA_allVersionsDetailsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class A_all16RPartDetailsAttributeExtension {
     public:
        typedef _ExtensionType<VersionManagerService_TATAProxyBase::A_all16RPartDetailsAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VersionManagerService_TATAProxyBase::A_all16RPartDetailsAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        A_all16RPartDetailsAttributeExtension() {}
    #endif
    
        A_all16RPartDetailsAttributeExtension(VersionManagerService_TATAProxyBase& proxy): attributeExtension_(proxy.getA_all16RPartDetailsAttribute()) {
        }
    
        inline extension_type& getA_all16RPartDetailsAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    template <template <typename > class _ExtensionType>
    class A_all16RPartDetailsAsciiAttributeExtension {
     public:
        typedef _ExtensionType<VersionManagerService_TATAProxyBase::A_all16RPartDetailsAsciiAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<VersionManagerService_TATAProxyBase::A_all16RPartDetailsAsciiAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        A_all16RPartDetailsAsciiAttributeExtension() {}
    #endif
    
        A_all16RPartDetailsAsciiAttributeExtension(VersionManagerService_TATAProxyBase& proxy): attributeExtension_(proxy.getA_all16RPartDetailsAsciiAttribute()) {
        }
    
        inline extension_type& getA_all16RPartDetailsAsciiAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace VersionManagerService_TATAExtensions

//
// VersionManagerService_TATAProxy Implementation
//
template <typename ... _AttributeExtensions>
VersionManagerService_TATAProxy<_AttributeExtensions...>::VersionManagerService_TATAProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<VersionManagerService_TATAProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<VersionManagerService_TATAProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
VersionManagerService_TATAProxy<_AttributeExtensions...>::~VersionManagerService_TATAProxy() {
}

/**
 * description: a method to retrieve known version information of a specific component        
 *   to retrieve all versions "attribute VersionInfoList allVersions" can be used
 */
template <typename ... _AttributeExtensions>
void VersionManagerService_TATAProxy<_AttributeExtensions...>::getVersionDetails(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t &_t_versionInfo, const CommonAPI::CallInfo *_info) {
    if (!_e_VersionName.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->getVersionDetails(_e_VersionName, _internalCallStatus, _t_versionInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VersionManagerService_TATAProxy<_AttributeExtensions...>::getVersionDetailsAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::VersionName_e &_e_VersionName, GetVersionDetailsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_e_VersionName.validate()) {
        ::v0::com::harman::dcif::versionmanagertypes_tata::versionInfo_t t_versionInfo = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, t_versionInfo);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->getVersionDetailsAsync(_e_VersionName, _callback, _info);
}
template <typename ... _AttributeExtensions>
void VersionManagerService_TATAProxy<_AttributeExtensions...>::get16RPartNumber(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info) {
    if (!_e_PartName.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->get16RPartNumber(_e_PartName, _internalCallStatus, _t_16RpartInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VersionManagerService_TATAProxy<_AttributeExtensions...>::get16RPartNumberAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_e_PartName.validate()) {
        ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t t_16RpartInfo = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, t_16RpartInfo);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->get16RPartNumberAsync(_e_PartName, _callback, _info);
}
template <typename ... _AttributeExtensions>
void VersionManagerService_TATAProxy<_AttributeExtensions...>::get16RPartNumberInAscii(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_t_16RpartInfo, const CommonAPI::CallInfo *_info) {
    if (!_e_PartName.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->get16RPartNumberInAscii(_e_PartName, _internalCallStatus, _t_16RpartInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VersionManagerService_TATAProxy<_AttributeExtensions...>::get16RPartNumberInAsciiAsync(const ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartName_e &_e_PartName, Get16RPartNumberInAsciiAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_e_PartName.validate()) {
        ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t t_16RpartInfo = {};
        _callback(CommonAPI::CallStatus::INVALID_VALUE, t_16RpartInfo);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->get16RPartNumberInAsciiAsync(_e_PartName, _callback, _info);
}
template <typename ... _AttributeExtensions>
void VersionManagerService_TATAProxy<_AttributeExtensions...>::getPowerModeCfgType(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_PmodeCfgInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getPowerModeCfgType(_internalCallStatus, _PmodeCfgInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VersionManagerService_TATAProxy<_AttributeExtensions...>::getPowerModeCfgTypeAsync(GetPowerModeCfgTypeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getPowerModeCfgTypeAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void VersionManagerService_TATAProxy<_AttributeExtensions...>::getWifiMacNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_wifiMACInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getWifiMacNumber(_internalCallStatus, _wifiMACInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VersionManagerService_TATAProxy<_AttributeExtensions...>::getWifiMacNumberAsync(GetWifiMacNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getWifiMacNumberAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void VersionManagerService_TATAProxy<_AttributeExtensions...>::getBluetoothMACNumber(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btMACInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getBluetoothMACNumber(_internalCallStatus, _btMACInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VersionManagerService_TATAProxy<_AttributeExtensions...>::getBluetoothMACNumberAsync(GetBluetoothMACNumberAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getBluetoothMACNumberAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void VersionManagerService_TATAProxy<_AttributeExtensions...>::getBluetoothAlignmentValue(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_btAlignmentInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getBluetoothAlignmentValue(_internalCallStatus, _btAlignmentInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VersionManagerService_TATAProxy<_AttributeExtensions...>::getBluetoothAlignmentValueAsync(GetBluetoothAlignmentValueAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getBluetoothAlignmentValueAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void VersionManagerService_TATAProxy<_AttributeExtensions...>::getLCDPanelHwVersion(CommonAPI::CallStatus &_internalCallStatus, ::v0::com::harman::dcif::versionmanagertypes_tata::_16RPartDetails_t &_lcdHwInfo, const CommonAPI::CallInfo *_info) {
    delegate_->getLCDPanelHwVersion(_internalCallStatus, _lcdHwInfo, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> VersionManagerService_TATAProxy<_AttributeExtensions...>::getLCDPanelHwVersionAsync(GetLCDPanelHwVersionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getLCDPanelHwVersionAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &VersionManagerService_TATAProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool VersionManagerService_TATAProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool VersionManagerService_TATAProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& VersionManagerService_TATAProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& VersionManagerService_TATAProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::dcif::VersionManagerService_TATAProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::dcif::VersionManagerService_TATAProxy<
            ::v0::com::harman::dcif::VersionManagerService_TATAExtensions::VersionMismatchAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::dcif::VersionManagerService_TATAExtensions::A_allVersionsDetailsAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::dcif::VersionManagerService_TATAExtensions::A_all16RPartDetailsAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::dcif::VersionManagerService_TATAExtensions::A_all16RPartDetailsAsciiAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_Version_Manager_Service__TATA_PROXY_HPP_
