/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Tuner TMC interface.
 * author: Harman, CoC Tuner, Dirk Engel (c) copyright 2017
 */
#ifndef V0_COM_HARMAN_TUNER_Tuner_Tmc_PROXY_HPP_
#define V0_COM_HARMAN_TUNER_Tuner_Tmc_PROXY_HPP_

#include <v0/com/harman/tuner/TunerTmcProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace tuner {

template <typename ... _AttributeExtensions>
class TunerTmcProxy
    : virtual public TunerTmc, 
      virtual public TunerTmcProxyBase,
      virtual public _AttributeExtensions... {
public:
    TunerTmcProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TunerTmcProxy();

    typedef TunerTmc InterfaceType;


    /**
     * description: Current device/TMC status, one vector entry per device type
     */
    /**
     * Returns the wrapper class that provides access to the attribute status.
     */
    virtual StatusAttribute& getStatusAttribute() {
        return delegate_->getStatusAttribute();
    }
    /**
     * description: Detailed device/TMC status, one vector entry per device type
     */
    /**
     * Returns the wrapper class that provides access to the attribute detailedStatus.
     */
    virtual DetailedStatusAttribute& getDetailedStatusAttribute() {
        return delegate_->getDetailedStatusAttribute();
    }
    /**
     * description: All available services
     */
    /**
     * Returns the wrapper class that provides access to the attribute services.
     */
    virtual ServicesAttribute& getServicesAttribute() {
        return delegate_->getServicesAttribute();
    }
    /**
     * description: Current active filters
     */
    /**
     * Returns the wrapper class that provides access to the attribute filters.
     */
    virtual FiltersAttribute& getFiltersAttribute() {
        return delegate_->getFiltersAttribute();
    }

    /**
     * description: TMC data
     */
    /**
     * Returns the wrapper class that provides access to the broadcast data.
     */
    virtual DataEvent& getDataEvent() {
        return delegate_->getDataEvent();
    }

    /**
     * description: Disable/enable TMC and set update rate (SDARS counter and time)
     * Calls setUpdateRate with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setUpdateRate(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType &_device, const uint16_t &_maxDropCounter, const uint16_t &_maxDropTime, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setUpdateRate with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setUpdateRateAsync(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType &_device, const uint16_t &_maxDropCounter, const uint16_t &_maxDropTime, SetUpdateRateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Set filter for TMC data selection.
     * Calls setFilter with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setFilter(const ::v0::com::harman::tuner::TunerTmcTypes::Filter &_filter, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setFilter with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setFilterAsync(const ::v0::com::harman::tuner::TunerTmcTypes::Filter &_filter, SetFilterAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<TunerTmcProxyBase> delegate_;
};

typedef TunerTmcProxy<> TunerTmcProxyDefault;

namespace TunerTmcExtensions {
    /**
     * description: Current device/TMC status, one vector entry per device type
     */
    template <template <typename > class _ExtensionType>
    class StatusAttributeExtension {
     public:
        typedef _ExtensionType<TunerTmcProxyBase::StatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TunerTmcProxyBase::StatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        StatusAttributeExtension() {}
    #endif
    
        StatusAttributeExtension(TunerTmcProxyBase& proxy): attributeExtension_(proxy.getStatusAttribute()) {
        }
    
        inline extension_type& getStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Detailed device/TMC status, one vector entry per device type
     */
    template <template <typename > class _ExtensionType>
    class DetailedStatusAttributeExtension {
     public:
        typedef _ExtensionType<TunerTmcProxyBase::DetailedStatusAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TunerTmcProxyBase::DetailedStatusAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        DetailedStatusAttributeExtension() {}
    #endif
    
        DetailedStatusAttributeExtension(TunerTmcProxyBase& proxy): attributeExtension_(proxy.getDetailedStatusAttribute()) {
        }
    
        inline extension_type& getDetailedStatusAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: All available services
     */
    template <template <typename > class _ExtensionType>
    class ServicesAttributeExtension {
     public:
        typedef _ExtensionType<TunerTmcProxyBase::ServicesAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TunerTmcProxyBase::ServicesAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        ServicesAttributeExtension() {}
    #endif
    
        ServicesAttributeExtension(TunerTmcProxyBase& proxy): attributeExtension_(proxy.getServicesAttribute()) {
        }
    
        inline extension_type& getServicesAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /**
     * description: Current active filters
     */
    template <template <typename > class _ExtensionType>
    class FiltersAttributeExtension {
     public:
        typedef _ExtensionType<TunerTmcProxyBase::FiltersAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension<TunerTmcProxyBase::FiltersAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    #ifdef WIN32
        FiltersAttributeExtension() {}
    #endif
    
        FiltersAttributeExtension(TunerTmcProxyBase& proxy): attributeExtension_(proxy.getFiltersAttribute()) {
        }
    
        inline extension_type& getFiltersAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace TunerTmcExtensions

//
// TunerTmcProxy Implementation
//
template <typename ... _AttributeExtensions>
TunerTmcProxy<_AttributeExtensions...>::TunerTmcProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<TunerTmcProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<TunerTmcProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TunerTmcProxy<_AttributeExtensions...>::~TunerTmcProxy() {
}

/**
 * description: Disable/enable TMC and set update rate (SDARS counter and time)
 */
template <typename ... _AttributeExtensions>
void TunerTmcProxy<_AttributeExtensions...>::setUpdateRate(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType &_device, const uint16_t &_maxDropCounter, const uint16_t &_maxDropTime, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_device.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->setUpdateRate(_device, _maxDropCounter, _maxDropTime, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TunerTmcProxy<_AttributeExtensions...>::setUpdateRateAsync(const ::v0::com::harman::tuner::TunerTmcTypes::DeviceType &_device, const uint16_t &_maxDropCounter, const uint16_t &_maxDropTime, SetUpdateRateAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_device.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->setUpdateRateAsync(_device, _maxDropCounter, _maxDropTime, _callback, _info);
}
/**
 * description: Set filter for TMC data selection.
 */
template <typename ... _AttributeExtensions>
void TunerTmcProxy<_AttributeExtensions...>::setFilter(const ::v0::com::harman::tuner::TunerTmcTypes::Filter &_filter, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setFilter(_filter, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TunerTmcProxy<_AttributeExtensions...>::setFilterAsync(const ::v0::com::harman::tuner::TunerTmcTypes::Filter &_filter, SetFilterAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setFilterAsync(_filter, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TunerTmcProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TunerTmcProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TunerTmcProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TunerTmcProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TunerTmcProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace tuner
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper<::v0::com::harman::tuner::TunerTmcProxy,
    _AttributeExtension> {
    typedef typename ::v0::com::harman::tuner::TunerTmcProxy<
            ::v0::com::harman::tuner::TunerTmcExtensions::StatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::tuner::TunerTmcExtensions::DetailedStatusAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::tuner::TunerTmcExtensions::ServicesAttributeExtension<_AttributeExtension>, 
            ::v0::com::harman::tuner::TunerTmcExtensions::FiltersAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_TUNER_Tuner_Tmc_PROXY_HPP_
