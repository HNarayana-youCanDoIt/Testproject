/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_AUDIOPRES_PLUGIN_audio_Pres_Plugin_Types_HPP_
#define V0_COM_HARMAN_AUDIOPRES_PLUGIN_audio_Pres_Plugin_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <vector>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace audiopres {
namespace plugin {

struct audioPresPluginTypes {
    
    struct eAudioPresPluginErrors : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SUCCESS = 0,
            FAILURE = 1,
            INVALID_REQUEST = 2,
            SOURCE_UNAVAILABLE = 3,
            SOURCE_ALREADY_ACTIVE = 4,
            SOURCE_SUSPENDED = 5,
            SOURCE_ACTIVATION_FAILED = 6
        };
        
        eAudioPresPluginErrors() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SUCCESS)) {}
        eAudioPresPluginErrors(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::FAILURE):
                case static_cast<int32_t>(Literal::INVALID_REQUEST):
                case static_cast<int32_t>(Literal::SOURCE_UNAVAILABLE):
                case static_cast<int32_t>(Literal::SOURCE_ALREADY_ACTIVE):
                case static_cast<int32_t>(Literal::SOURCE_SUSPENDED):
                case static_cast<int32_t>(Literal::SOURCE_ACTIVATION_FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eAudioPresPluginErrors &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eAudioPresPluginErrors &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eAudioPresPluginErrors &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eAudioPresPluginErrors &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eAudioPresPluginErrors &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eAudioPresPluginErrors &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eAuxInGains : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            AUXINGAIN_LOW = 0,
            AUXINGAIN_MID = 1,
            AUXINGAIN_HIGH = 2
        };
        
        eAuxInGains() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::AUXINGAIN_LOW)) {}
        eAuxInGains(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::AUXINGAIN_LOW):
                case static_cast<int32_t>(Literal::AUXINGAIN_MID):
                case static_cast<int32_t>(Literal::AUXINGAIN_HIGH):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eAuxInGains &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eAuxInGains &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eAuxInGains &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eAuxInGains &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eAuxInGains &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eAuxInGains &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eBeepTypes : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TYPE_PDC_1 = 0,
            TYPE_PDC_2 = 1,
            TYPE_RINGTONE_1 = 2,
            TYPE_RINGTONE_2 = 3,
            TYPE_BEEP_CONFIRM = 4,
            TYPE_BEEP_CANCEL = 5,
            TYPE_BEEP_TOUCH = 6,
            TYPE_BEEP_TRIGGER = 7,
            TYPE_GONG = 8,
            TYPE_BEEP_PDC_1 = 9
        };
        
        eBeepTypes() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TYPE_PDC_1)) {}
        eBeepTypes(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TYPE_PDC_1):
                case static_cast<int32_t>(Literal::TYPE_PDC_2):
                case static_cast<int32_t>(Literal::TYPE_RINGTONE_1):
                case static_cast<int32_t>(Literal::TYPE_RINGTONE_2):
                case static_cast<int32_t>(Literal::TYPE_BEEP_CONFIRM):
                case static_cast<int32_t>(Literal::TYPE_BEEP_CANCEL):
                case static_cast<int32_t>(Literal::TYPE_BEEP_TOUCH):
                case static_cast<int32_t>(Literal::TYPE_BEEP_TRIGGER):
                case static_cast<int32_t>(Literal::TYPE_GONG):
                case static_cast<int32_t>(Literal::TYPE_BEEP_PDC_1):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eBeepTypes &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eBeepTypes &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eBeepTypes &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eBeepTypes &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eBeepTypes &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eBeepTypes &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eVoiceAlertState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            VOICEALERT_NOALERT = 0,
            VOICEALERT_ADDED = 1,
            VOICEALERT_SUSPENDED = 2,
            VOICEALERT_ACTIVATED = 3,
            VOICEALERT_CANCEL = 4,
            VOICEALERT_COMPLETED = 5,
            VOICEALERT_ABORTED = 6
        };
        
        eVoiceAlertState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::VOICEALERT_NOALERT)) {}
        eVoiceAlertState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::VOICEALERT_NOALERT):
                case static_cast<int32_t>(Literal::VOICEALERT_ADDED):
                case static_cast<int32_t>(Literal::VOICEALERT_SUSPENDED):
                case static_cast<int32_t>(Literal::VOICEALERT_ACTIVATED):
                case static_cast<int32_t>(Literal::VOICEALERT_CANCEL):
                case static_cast<int32_t>(Literal::VOICEALERT_COMPLETED):
                case static_cast<int32_t>(Literal::VOICEALERT_ABORTED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eVoiceAlertState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eVoiceAlertState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eVoiceAlertState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eVoiceAlertState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eVoiceAlertState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eVoiceAlertState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct eToggleEntSrcDirection : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            PREVIOUS = 0,
            NEXT = 1
        };
        
        eToggleEntSrcDirection() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::PREVIOUS)) {}
        eToggleEntSrcDirection(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::PREVIOUS):
                case static_cast<int32_t>(Literal::NEXT):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eToggleEntSrcDirection &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eToggleEntSrcDirection &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eToggleEntSrcDirection &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eToggleEntSrcDirection &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eToggleEntSrcDirection &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eToggleEntSrcDirection &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ConnectionState_e : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            CS_UNKNOWN = 0,
            CS_CONNECTING = 1,
            CS_CONNECTED = 2,
            CS_DISCONNECTING = 3,
            CS_DISCONNECTED = 4,
            CS_SUSPENDED = 5,
            CS_MAX = 6
        };
        
        ConnectionState_e() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::CS_UNKNOWN)) {}
        ConnectionState_e(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::CS_UNKNOWN):
                case static_cast<int32_t>(Literal::CS_CONNECTING):
                case static_cast<int32_t>(Literal::CS_CONNECTED):
                case static_cast<int32_t>(Literal::CS_DISCONNECTING):
                case static_cast<int32_t>(Literal::CS_DISCONNECTED):
                case static_cast<int32_t>(Literal::CS_SUSPENDED):
                case static_cast<int32_t>(Literal::CS_MAX):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ConnectionState_e &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ConnectionState_e &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ConnectionState_e &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ConnectionState_e &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ConnectionState_e &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ConnectionState_e &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    /**
     * description: Struct describing main sound property.
     */
    struct apres_SourceConnectionState_s : CommonAPI::Struct<uint16_t, ConnectionState_e> {
    	
    	apres_SourceConnectionState_s() {
    	}
    	apres_SourceConnectionState_s(const uint16_t &_sourceId, const ConnectionState_e &_srcState)
    	{
    		std::get<0>(values_) = _sourceId;
    		std::get<1>(values_) = _srcState;
    	}
    	/**
    	 * description: source Id.
    	 */
    	inline const uint16_t &getSourceId() const { return std::get<0>(values_); }
    	inline void setSourceId(const uint16_t &_value) { std::get<0>(values_) = _value; }
    	/**
    	 * description: Source Connection State
    	 */
    	inline const ConnectionState_e &getSrcState() const { return std::get<1>(values_); }
    	inline void setSrcState(const ConnectionState_e &_value) { std::get<1>(values_) = _value; }
    	inline bool operator==(const apres_SourceConnectionState_s& _other) const {
                return (getSourceId() == _other.getSourceId() && getSrcState() == _other.getSrcState());
        }
    	inline bool operator!=(const apres_SourceConnectionState_s &_other) const {
    		return !((*this) == _other);
    	}
    
    };
    typedef std::vector<audioPresPluginTypes::apres_SourceConnectionState_s> apres_SourceConnectionState_L;
    
    struct eSourceGroup : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            TUNER = 0,
            MEDIA = 1,
            AUX = 2,
            PROJECTION = 3
        };
        
        eSourceGroup() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::TUNER)) {}
        eSourceGroup(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::TUNER):
                case static_cast<int32_t>(Literal::MEDIA):
                case static_cast<int32_t>(Literal::AUX):
                case static_cast<int32_t>(Literal::PROJECTION):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const eSourceGroup &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const eSourceGroup &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const eSourceGroup &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const eSourceGroup &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const eSourceGroup &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const eSourceGroup &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.audiopres.plugin.audioPresPluginTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct audioPresPluginTypes

} // namespace plugin
} // namespace audiopres
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for eAudioPresPluginErrors
    template<>
    struct hash<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors> {
        inline size_t operator()(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAudioPresPluginErrors& eAudioPresPluginErrors) const {
            return static_cast<int32_t>(eAudioPresPluginErrors);
        }
    };
    //Hash for eAuxInGains
    template<>
    struct hash<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAuxInGains> {
        inline size_t operator()(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eAuxInGains& eAuxInGains) const {
            return static_cast<int32_t>(eAuxInGains);
        }
    };
    //Hash for eBeepTypes
    template<>
    struct hash<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eBeepTypes> {
        inline size_t operator()(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eBeepTypes& eBeepTypes) const {
            return static_cast<int32_t>(eBeepTypes);
        }
    };
    //Hash for eVoiceAlertState
    template<>
    struct hash<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eVoiceAlertState> {
        inline size_t operator()(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eVoiceAlertState& eVoiceAlertState) const {
            return static_cast<int32_t>(eVoiceAlertState);
        }
    };
    //Hash for eToggleEntSrcDirection
    template<>
    struct hash<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eToggleEntSrcDirection> {
        inline size_t operator()(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eToggleEntSrcDirection& eToggleEntSrcDirection) const {
            return static_cast<int32_t>(eToggleEntSrcDirection);
        }
    };
    //Hash for ConnectionState_e
    template<>
    struct hash<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::ConnectionState_e> {
        inline size_t operator()(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::ConnectionState_e& connectionState_e) const {
            return static_cast<int32_t>(connectionState_e);
        }
    };
    //Hash for eSourceGroup
    template<>
    struct hash<::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eSourceGroup> {
        inline size_t operator()(const ::v0::com::harman::audiopres::plugin::audioPresPluginTypes::eSourceGroup& eSourceGroup) const {
            return static_cast<int32_t>(eSourceGroup);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_AUDIOPRES_PLUGIN_audio_Pres_Plugin_Types_HPP_
