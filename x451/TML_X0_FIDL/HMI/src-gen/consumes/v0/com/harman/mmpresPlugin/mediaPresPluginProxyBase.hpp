/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_MMPRESPLUGIN_media_Pres_Plugin_PROXY_BASE_HPP_
#define V0_COM_HARMAN_MMPRESPLUGIN_media_Pres_Plugin_PROXY_BASE_HPP_

#include <v0/com/harman/mmpresPlugin/mediaPresPlugin.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_map>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace mmpresPlugin {

class mediaPresPluginProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::mmpresPlugin::mediaPresPlugin::eUsbDeviceError> UsbDeviceErrorAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::mmpresPlugin::mediaPresPlugin::eUsbPlaybackMode> UsbPlaybackModeAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::mmpresPlugin::mediaPresPlugin::sItemsInfo> DeviceItemsInfoAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> BitRateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<std::string> SamplingRateAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::mmpresPlugin::mediaPresPlugin::eAvailabilityStatus> BTMetaDataAvailabilityStatusAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::mmpresPlugin::mediaPresPlugin::sVideoParameters> VideoTestModeParametersAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::mmpresPlugin::mediaPresPlugin::sTEFilesPath> TEFilesPathAttribute;
    typedef CommonAPI::ObservableReadonlyAttribute<::v0::com::harman::mmpresPlugin::mediaPresPlugin::MediaErrorMap> MediaErrorAttribute;
    typedef CommonAPI::Event<
    > TrackSessionChangedEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> ToggleRepeatAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> ToggleShuffleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> NextAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> PreviousAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> PauseAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> ResumeAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> FastforwardAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> FastreverseAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> UpdateRvcStateAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&)> VideoSurfaceControlAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const mediaPresPlugin::eCallResult&, const uint32_t&, const bool&, const uint64_t&)> GetCurrentTrackIndexAsyncCallback;

    /**
     * description: Indicates the error encountered due to USB device connection
     */
    virtual UsbDeviceErrorAttribute& getUsbDeviceErrorAttribute() = 0;
    /**
     * description: Indicates the error encountered by Media
     */
    virtual UsbPlaybackModeAttribute& getUsbPlaybackModeAttribute() = 0;
    /**
     * description: Indicates device items count
     */
    virtual DeviceItemsInfoAttribute& getDeviceItemsInfoAttribute() = 0;
    /**
     * description: Indicates the bit rate of the current song by Media
     */
    virtual BitRateAttribute& getBitRateAttribute() = 0;
    /**
     * description: Indicates the sampling rate of the current song by Media
     */
    virtual SamplingRateAttribute& getSamplingRateAttribute() = 0;
    /**
     * description: Indicates whether metadata of the current song is received or not by Media
     */
    virtual BTMetaDataAvailabilityStatusAttribute& getBTMetaDataAvailabilityStatusAttribute() = 0;
    /**
     * description: Indicates testmode parameters for video
     */
    virtual VideoTestModeParametersAttribute& getVideoTestModeParametersAttribute() = 0;
    /**
     * description: Vr feature, provides media files path
     */
    virtual TEFilesPathAttribute& getTEFilesPathAttribute() = 0;
    /**
     * description: Indicates the error encountered by Media
     */
    virtual MediaErrorAttribute& getMediaErrorAttribute() = 0;

    /**
     * description: track session size/content/order have been changed,                        HMI
     *   needs to fetch updated the contents
     */
    virtual TrackSessionChangedEvent& getTrackSessionChangedEvent() = 0;

    /**
     * description: This method will toggle the repeat state as OFF->All->one. 		 		 Input :  none	
     *   		               returns:	eCallResult:	result
     */
    virtual void toggleRepeat(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> toggleRepeatAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ToggleRepeatAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method will toggle the shuffle state as OFF->All. 		 		 Input :  None     
     *       returns:	eCallResult:	result
     */
    virtual void toggleShuffle(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> toggleShuffleAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ToggleShuffleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to perform the next track operation. 		 		 Input :  UInt64 : step	
     *   		               returns:	  eCallResult:	result
     */
    virtual void next(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> nextAsync(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, NextAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to perform the previous track operation. 		 		 Input :  UInt64 :
     *   step	 		               returns:	  eCallResult:	result
     */
    virtual void previous(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> previousAsync(const uint64_t &_step, const mediaPresPlugin::eButtonStatus &_buttonStatus, PreviousAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to perform the pause operation. 		 		 Input :  Boolean: pressed -
     *   Whether the button is pressed or released.	 		               returns:
     *   eCallResult:	result
     */
    virtual void pause(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> pauseAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, PauseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to perform the resume operation. 		 		 Input :  Boolean: pressed -
     *   Whether the button is pressed or released.	 		               returns:
     *   eCallResult:	result
     */
    virtual void resume(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> resumeAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, ResumeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to perform the FastForward operation. 		 		 Input :  Boolean:
     *   pressed - Whether the button is pressed or released.	 		              
     *   returns: eCallResult:	result
     */
    virtual void fastforward(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> fastforwardAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, FastforwardAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method to perform the FastReverse operation. 		 		 Input :  Boolean:
     *   pressed - Whether the button is pressed or released.	 		              
     *   returns: eCallResult:	result
     */
    virtual void fastreverse(const mediaPresPlugin::eButtonStatus &_buttonStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> fastreverseAsync(const mediaPresPlugin::eButtonStatus &_buttonStatus, FastreverseAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is to receive the RVC status from HMI and enable/disable the video
     *   laye based on this. 		 		 Input :  boolean: rvcStatus : True = RVC engaged,
     *   False = RVC disengaged. 		               returns: eCallResult:result
     */
    virtual void updateRvcState(const bool &_rvcStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> updateRvcStateAsync(const bool &_rvcStatus, UpdateRvcStateAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is to receive the RVC status from HMI and enable/disable the video
     *   laye based on this. 		 		 Input :  eVideoSurfaceDisplayStatus: surfaceStatus 
     *   		               returns:	  String: path
     */
    virtual void videoSurfaceControl(const mediaPresPlugin::eVideoSurfaceDisplayStatus &_surfaceStatus, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> videoSurfaceControlAsync(const mediaPresPlugin::eVideoSurfaceDisplayStatus &_surfaceStatus, VideoSurfaceControlAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: This method is to fetch current playing track index in browse list.  		It will
     *   be required to display the correct pointer for current playing track in case
     *   track changed during browse list display. 		 		 Input :  UInt32      
     *   sessionID 				  UInt32       QueryID	 		               returns: eCallResult
     *   result				 				UInt32       sessionQueryID 				Boolean 	 highlight 				UInt64 
     *   	 trackIndex
     */
    virtual void getCurrentTrackIndex(const uint32_t &_sessionID, const uint32_t &_QueryID, CommonAPI::CallStatus &_internalCallStatus, mediaPresPlugin::eCallResult &_result, uint32_t &_sessionQueryID, bool &_highlight, uint64_t &_trackIndex, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> getCurrentTrackIndexAsync(const uint32_t &_sessionID, const uint32_t &_QueryID, GetCurrentTrackIndexAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace mmpresPlugin
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_MMPRESPLUGIN_media_Pres_Plugin_PROXY_BASE_HPP_
