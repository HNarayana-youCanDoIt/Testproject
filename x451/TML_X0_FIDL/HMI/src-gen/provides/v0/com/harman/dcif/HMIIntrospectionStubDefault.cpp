/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#include <v0/com/harman/dcif/HMIIntrospectionStubDefault.hpp>
#include <assert.h>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

HMIIntrospectionStubDefault::HMIIntrospectionStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(HMIIntrospection::getInterfaceVersion()) {
}

const CommonAPI::Version& HMIIntrospectionStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

HMIIntrospectionStubRemoteEvent* HMIIntrospectionStubDefault::initStubAdapter(const std::shared_ptr<HMIIntrospectionStubAdapter> &_adapter) {
    CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const std::string& HMIIntrospectionStubDefault::getTopScreenAttribute() {
    return topScreenAttributeValue_;
}

const std::string& HMIIntrospectionStubDefault::getTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getTopScreenAttribute();
}

void HMIIntrospectionStubDefault::setTopScreenAttribute(std::string _value) {
    const bool valueChanged = trySetTopScreenAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireTopScreenAttributeChanged(topScreenAttributeValue_);
    }
}

bool HMIIntrospectionStubDefault::trySetTopScreenAttribute(std::string _value) {
    if (!validateTopScreenAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (topScreenAttributeValue_ != _value);
    topScreenAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool HMIIntrospectionStubDefault::validateTopScreenAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}


const std::string& HMIIntrospectionStubDefault::getDrawerTopScreenAttribute() {
    return drawerTopScreenAttributeValue_;
}

const std::string& HMIIntrospectionStubDefault::getDrawerTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getDrawerTopScreenAttribute();
}

void HMIIntrospectionStubDefault::setDrawerTopScreenAttribute(std::string _value) {
    const bool valueChanged = trySetDrawerTopScreenAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDrawerTopScreenAttributeChanged(drawerTopScreenAttributeValue_);
    }
}

bool HMIIntrospectionStubDefault::trySetDrawerTopScreenAttribute(std::string _value) {
    if (!validateDrawerTopScreenAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (drawerTopScreenAttributeValue_ != _value);
    drawerTopScreenAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool HMIIntrospectionStubDefault::validateDrawerTopScreenAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}


const std::string& HMIIntrospectionStubDefault::getPopupTopScreenAttribute() {
    return popupTopScreenAttributeValue_;
}

const std::string& HMIIntrospectionStubDefault::getPopupTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getPopupTopScreenAttribute();
}

void HMIIntrospectionStubDefault::setPopupTopScreenAttribute(std::string _value) {
    const bool valueChanged = trySetPopupTopScreenAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->firePopupTopScreenAttributeChanged(popupTopScreenAttributeValue_);
    }
}

bool HMIIntrospectionStubDefault::trySetPopupTopScreenAttribute(std::string _value) {
    if (!validatePopupTopScreenAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (popupTopScreenAttributeValue_ != _value);
    popupTopScreenAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool HMIIntrospectionStubDefault::validatePopupTopScreenAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}


const std::string& HMIIntrospectionStubDefault::getOverlayTopScreenAttribute() {
    return overlayTopScreenAttributeValue_;
}

const std::string& HMIIntrospectionStubDefault::getOverlayTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getOverlayTopScreenAttribute();
}

void HMIIntrospectionStubDefault::setOverlayTopScreenAttribute(std::string _value) {
    const bool valueChanged = trySetOverlayTopScreenAttribute(std::move(_value));
    if (valueChanged) {
        auto stubAdapter = CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireOverlayTopScreenAttributeChanged(overlayTopScreenAttributeValue_);
    }
}

bool HMIIntrospectionStubDefault::trySetOverlayTopScreenAttribute(std::string _value) {
    if (!validateOverlayTopScreenAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (overlayTopScreenAttributeValue_ != _value);
    overlayTopScreenAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool HMIIntrospectionStubDefault::validateOverlayTopScreenAttributeRequestedValue(const std::string &_value) {
    (void)_value;
	return true;
}



/**
 * description: This method allows for querying the current layout of 		the entire HMI.
 * param: inspectItemType (String) : It tells whether the inspection is for screen or
 *   drawers or popup [DRAWER/POPUP/SCREEN/OVERLAYS]
 * param: screenName (String) : It tells which screen needs to be inspected, if it is
 *   loaded then inspect data is returned otherwise returns null         returns:
 *   success (InspectionResponseCode) : Indicates the success or failure
 *   													of the request         returns: screenInformation (String) :
 *   JSON-encoded data string for inspectionResults
 */
void HMIIntrospectionStubDefault::inspectScreen(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::dcif::HMIIntrospectionTypes::ScreenItemType _type, std::string _screenName, inspectScreenReply_t _reply) {
    (void)_client;
    (void) _type;
    (void) _screenName;
    ::v0::com::harman::dcif::HMIIntrospectionTypes::InspectionResponseCode status = ::v0::com::harman::dcif::HMIIntrospectionTypes::InspectionResponseCode::SUCCESS;
    std::string screenInformation = "";
    if (!status.validate()) {
        return;
    }
    _reply(status, screenInformation);
}


/**
 * description: Indicates that a screen in the HMI has changed.
 */
void HMIIntrospectionStubDefault::fireScreenChangeEvent(const std::string &_screenInformation) {
    assert((CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireScreenChangeEvent(_screenInformation);
}
/**
 * description: Indicates that a drawer screen in the HMI has changed.
 */
void HMIIntrospectionStubDefault::fireDrawerScreenChangeEvent(const std::string &_drawerScreenInformation) {
    assert((CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireDrawerScreenChangeEvent(_drawerScreenInformation);
}
/**
 * description: Indicates that a popup screen in the HMI has changed.
 */
void HMIIntrospectionStubDefault::firePopupScreenChangeEvent(const std::string &_popupScreenInformation) {
    assert((CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->firePopupScreenChangeEvent(_popupScreenInformation);
}
/**
 * description: Indicates that a popup screen in the HMI has changed.
 */
void HMIIntrospectionStubDefault::fireOverlayScreenChangeEvent(const std::string &_overlayScreenInformation) {
    assert((CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireOverlayScreenChangeEvent(_overlayScreenInformation);
}


HMIIntrospectionStubDefault::RemoteEventHandler::RemoteEventHandler(HMIIntrospectionStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0
