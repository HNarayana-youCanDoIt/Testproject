/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: The HMI Service is responsible for providing the information to its consumers
 *   about the screen changes in HMI      and the information about the components
 *   present in the screen           Version: 1.0     Reason:         - Initial
 *   Version     Changes:         1. readonly attributes: topScreen         2.
 *   methods: inspectScreen         3. signal : screenChange
 * author: Gaurav Garg
 */
#ifndef V0_COM_HARMAN_DCIF_HMI_Introspection_STUB_DEFAULT_HPP_
#define V0_COM_HARMAN_DCIF_HMI_Introspection_STUB_DEFAULT_HPP_


#include <v0/com/harman/dcif/HMIIntrospectionStub.hpp>
#include <sstream>

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

/**
 * Provides a default implementation for HMIIntrospectionStubRemoteEvent and
 * HMIIntrospectionStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class HMIIntrospectionStubDefault
    : public virtual HMIIntrospectionStub {
public:
    HMIIntrospectionStubDefault();

    HMIIntrospectionStubRemoteEvent* initStubAdapter(const std::shared_ptr<HMIIntrospectionStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);

    virtual const std::string& getTopScreenAttribute();
    virtual const std::string& getTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setTopScreenAttribute(std::string _value);
    virtual const std::string& getDrawerTopScreenAttribute();
    virtual const std::string& getDrawerTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setDrawerTopScreenAttribute(std::string _value);
    virtual const std::string& getPopupTopScreenAttribute();
    virtual const std::string& getPopupTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setPopupTopScreenAttribute(std::string _value);
    virtual const std::string& getOverlayTopScreenAttribute();
    virtual const std::string& getOverlayTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client);
    virtual void setOverlayTopScreenAttribute(std::string _value);

    /**
     * description: This method allows for querying the current layout of 		the entire HMI.
     * param: inspectItemType (String) : It tells whether the inspection is for screen or
     *   drawers or popup [DRAWER/POPUP/SCREEN/OVERLAYS]
     * param: screenName (String) : It tells which screen needs to be inspected, if it is
     *   loaded then inspect data is returned otherwise returns null         returns:
     *   success (InspectionResponseCode) : Indicates the success or failure
     *   													of the request         returns: screenInformation (String) :
     *   JSON-encoded data string for inspectionResults
     */
    virtual void inspectScreen(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::dcif::HMIIntrospectionTypes::ScreenItemType _type, std::string _screenName, inspectScreenReply_t _reply);

/**
 * description: Indicates that a screen in the HMI has changed.
 */
virtual void fireScreenChangeEvent(const std::string &_screenInformation);
/**
 * description: Indicates that a drawer screen in the HMI has changed.
 */
virtual void fireDrawerScreenChangeEvent(const std::string &_drawerScreenInformation);
/**
 * description: Indicates that a popup screen in the HMI has changed.
 */
virtual void firePopupScreenChangeEvent(const std::string &_popupScreenInformation);
/**
 * description: Indicates that a popup screen in the HMI has changed.
 */
virtual void fireOverlayScreenChangeEvent(const std::string &_overlayScreenInformation);


protected:
    /**
     * description: data string describing the top-most screen 	being shown currently to the user. 
     *   By convention, screen changes which	 	occur underneath the current topScreen
     *   will not be reported.
     */
    virtual bool trySetTopScreenAttribute(std::string _value);
    virtual bool validateTopScreenAttributeRequestedValue(const std::string &_value);
    /**
     * description: data string describing the top-most drawer screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    virtual bool trySetDrawerTopScreenAttribute(std::string _value);
    virtual bool validateDrawerTopScreenAttributeRequestedValue(const std::string &_value);
    /**
     * description: data string describing the top-most popup screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    virtual bool trySetPopupTopScreenAttribute(std::string _value);
    virtual bool validatePopupTopScreenAttributeRequestedValue(const std::string &_value);
    /**
     * description: data string describing the top-most popup screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    virtual bool trySetOverlayTopScreenAttribute(std::string _value);
    virtual bool validateOverlayTopScreenAttributeRequestedValue(const std::string &_value);
    class RemoteEventHandler: public virtual HMIIntrospectionStubRemoteEvent {
    public:
        RemoteEventHandler(HMIIntrospectionStubDefault *_defaultStub);

        /**
         * description: data string describing the top-most screen 	being shown currently to the user. 
         *   By convention, screen changes which	 	occur underneath the current topScreen
         *   will not be reported.
         */

        /**
         * description: data string describing the top-most drawer screen 	being shown currently to the
         *   user.  By convention, screen changes which	 	occur underneath the current
         *   topScreen will not be reported.
         */

        /**
         * description: data string describing the top-most popup screen 	being shown currently to the
         *   user.  By convention, screen changes which	 	occur underneath the current
         *   topScreen will not be reported.
         */

        /**
         * description: data string describing the top-most popup screen 	being shown currently to the
         *   user.  By convention, screen changes which	 	occur underneath the current
         *   topScreen will not be reported.
         */


    private:
        HMIIntrospectionStubDefault *defaultStub_;
    };
private:
    HMIIntrospectionStubDefault::RemoteEventHandler remoteEventHandler_;

    /**
     * description: data string describing the top-most screen 	being shown currently to the user. 
     *   By convention, screen changes which	 	occur underneath the current topScreen
     *   will not be reported.
     */
    std::string topScreenAttributeValue_ {};
    /**
     * description: data string describing the top-most drawer screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    std::string drawerTopScreenAttributeValue_ {};
    /**
     * description: data string describing the top-most popup screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    std::string popupTopScreenAttributeValue_ {};
    /**
     * description: data string describing the top-most popup screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    std::string overlayTopScreenAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_HMI_Introspection_STUB_DEFAULT
