/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: Required types for HMI Service interface.
 * author: Gaurav Garg
 */
#ifndef V0_COM_HARMAN_DCIF_HMI_Introspection_Types_HPP_
#define V0_COM_HARMAN_DCIF_HMI_Introspection_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

struct HMIIntrospectionTypes {
    
    struct InspectionResponseCode : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SUCCESS = 0,
            FAILURE_NOT_SUPPORTED = 1,
            INVALID_ENUM = 2,
            FAILURE_GENERAL = 3
        };
        
        InspectionResponseCode() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SUCCESS)) {}
        InspectionResponseCode(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SUCCESS):
                case static_cast<int32_t>(Literal::FAILURE_NOT_SUPPORTED):
                case static_cast<int32_t>(Literal::INVALID_ENUM):
                case static_cast<int32_t>(Literal::FAILURE_GENERAL):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const InspectionResponseCode &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const InspectionResponseCode &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const InspectionResponseCode &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const InspectionResponseCode &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const InspectionResponseCode &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const InspectionResponseCode &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct ScreenItemType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            SCREEN = 0,
            DRAWER = 1,
            POPUP = 2,
            OVERLAYS = 3
        };
        
        ScreenItemType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::SCREEN)) {}
        ScreenItemType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::SCREEN):
                case static_cast<int32_t>(Literal::DRAWER):
                case static_cast<int32_t>(Literal::POPUP):
                case static_cast<int32_t>(Literal::OVERLAYS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ScreenItemType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ScreenItemType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ScreenItemType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ScreenItemType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ScreenItemType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ScreenItemType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.dcif.HMIIntrospectionTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct HMIIntrospectionTypes

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for InspectionResponseCode
    template<>
    struct hash<::v0::com::harman::dcif::HMIIntrospectionTypes::InspectionResponseCode> {
        inline size_t operator()(const ::v0::com::harman::dcif::HMIIntrospectionTypes::InspectionResponseCode& inspectionResponseCode) const {
            return static_cast<int32_t>(inspectionResponseCode);
        }
    };
    //Hash for ScreenItemType
    template<>
    struct hash<::v0::com::harman::dcif::HMIIntrospectionTypes::ScreenItemType> {
        inline size_t operator()(const ::v0::com::harman::dcif::HMIIntrospectionTypes::ScreenItemType& screenItemType) const {
            return static_cast<int32_t>(screenItemType);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_HMI_Introspection_Types_HPP_
