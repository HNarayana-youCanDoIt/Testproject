/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_HMI_hmi_VR_STUB_HPP_
#define V0_COM_HARMAN_HMI_hmi_VR_STUB_HPP_

#include <functional>



#include <v0/com/harman/hmi/hmiVRTypes.hpp>

#include <v0/com/harman/hmi/hmiVR.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace hmi {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service hmiVR. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class hmiVRStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual hmiVR {
 public:

    /**
     * Sends a broadcast event for activateVR. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireActivateVREvent(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState &_eKeyState, const ::v0::com::harman::hmi::hmiVRTypes::EScreenName &_eScreenName) = 0;
    /**
     * Sends a broadcast event for activateVR. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireActivateVREvent(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState &_eKeyState) = 0;
    /**
     * Sends a broadcast event for cancelVR. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireCancelVREvent() = 0;
    /**
     * Sends a broadcast event for listItemTouch. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireListItemTouchEvent(const int32_t &_iFocusedItem) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for hmiVR.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class hmiVRStubRemoteEvent
{
public:
    virtual ~hmiVRStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service hmiVR to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class hmiVRStub
    : public virtual CommonAPI::Stub<hmiVRStubAdapter, hmiVRStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>showTelePrompterListReply_t;
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>showPickListReply_t;
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>showPickList1Reply_t;
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>hidePickListReply_t;
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>setFocusedItemReply_t;
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>setScreenReply_t;
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>mediaFilterListShowReply_t;
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>showContactReply_t;
    typedef std::function<void (::v0::com::harman::hmi::hmiVRTypes::EResponseType _eResp)>focusSelectedCategoryReply_t;

    virtual ~hmiVRStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: Method to be invoked to display teleprompter list in HMI.
     */
    /// This is the method that will be called on remote calls on the method showTelePrompterList.
    virtual void showTelePrompterList(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<std::string> _strAryTelePrompterlist, showTelePrompterListReply_t _reply) = 0;
    /**
     * description: Method to be invoked to display picklist in HMI.
     */
    /// This is the method that will be called on remote calls on the method showPickList.
    virtual void showPickList(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<std::string> _strAryPicklist, std::string _strContextTitle, showPickListReply_t _reply) = 0;
    /**
     * description: Method to be invoked to display picklist in HMI.
     */
    /// This is the method that will be called on remote calls on the method showPickList.
    virtual void showPickList(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector<std::string> _strAryPicklist, showPickList1Reply_t _reply) = 0;
    /**
     * description: Method to be invoked to remove the picklist from HMI.
     */
    /// This is the method that will be called on remote calls on the method hidePickList.
    virtual void hidePickList(const std::shared_ptr<CommonAPI::ClientId> _client, hidePickListReply_t _reply) = 0;
    /**
     * description: Method to be invoked to select an item from the pick list.
     */
    /// This is the method that will be called on remote calls on the method setFocusedItem.
    virtual void setFocusedItem(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _iLineNo, setFocusedItemReply_t _reply) = 0;
    /**
     * description: Method to be invoked to switch to the required HMI screen.
     */
    /// This is the method that will be called on remote calls on the method setScreen.
    virtual void setScreen(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _strScreenName, setScreenReply_t _reply) = 0;
    /**
     * description: Method to be invoked to switch to different categories during media browse.
     */
    /// This is the method that will be called on remote calls on the method mediaFilterListShow.
    virtual void mediaFilterListShow(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::hmi::hmiVRTypes::EFilterIDType _eFilterType, int64_t _iFilterId, mediaFilterListShowReply_t _reply) = 0;
    /**
     * description: Method to be invoked to display contact details of the particular contact.
     */
    /// This is the method that will be called on remote calls on the method showContact.
    virtual void showContact(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _strDatabaseType, int32_t _iContactId, showContactReply_t _reply) = 0;
    /**
     * description: Method to be invoked to set the focus on a particular category.
     */
    /// This is the method that will be called on remote calls on the method focusSelectedCategory.
    virtual void focusSelectedCategory(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _strCategory, focusSelectedCategoryReply_t _reply) = 0;
    /**
     * description: Signal shall be broadcast to activate VR.
     */
    /// Sends a broadcast event for activateVR.
    virtual void fireActivateVREvent(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState &_eKeyState, const ::v0::com::harman::hmi::hmiVRTypes::EScreenName &_eScreenName) = 0;
    /**
     * description: Signal shall be broadcast to activate VR.
     */
    /// Sends a broadcast event for activateVR.
    virtual void fireActivateVREvent(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState &_eKeyState) = 0;
    /**
     * description: Signal shall be broadcast to de-activate VR.
     */
    /// Sends a broadcast event for cancelVR.
    virtual void fireCancelVREvent() = 0;
    /**
     * description: Signal shall be broadcast when ever any pick list item is selected from HMI.
     */
    /// Sends a broadcast event for listItemTouch.
    virtual void fireListItemTouchEvent(const int32_t &_iFocusedItem) = 0;

    using CommonAPI::Stub<hmiVRStubAdapter, hmiVRStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<hmiVRStubAdapter, hmiVRStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<hmiVRStubAdapter, hmiVRStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef hmiVRStubRemoteEvent RemoteEventType;
    typedef hmiVR StubInterface;
};

} // namespace hmi
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_HMI_hmi_VR_STUB_HPP_
