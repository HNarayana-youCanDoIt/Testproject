/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
#ifndef V0_COM_HARMAN_HMI_hmi_VR_Types_HPP_
#define V0_COM_HARMAN_HMI_hmi_VR_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace hmi {

struct hmiVRTypes {
    
    struct EResponseType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EN_SUCCESS = 0,
            EN_FAILURE = 1,
            EN_PROJECTIONMODE = 2,
            EN_INVALID = 3
        };
        
        EResponseType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EN_SUCCESS)) {}
        EResponseType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EN_SUCCESS):
                case static_cast<int32_t>(Literal::EN_FAILURE):
                case static_cast<int32_t>(Literal::EN_PROJECTIONMODE):
                case static_cast<int32_t>(Literal::EN_INVALID):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EResponseType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EResponseType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EResponseType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EResponseType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EResponseType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EResponseType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EBandType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EN_BAND_FM = 0,
            EN_BAND_AM = 1
        };
        
        EBandType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EN_BAND_FM)) {}
        EBandType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EN_BAND_FM):
                case static_cast<int32_t>(Literal::EN_BAND_AM):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EBandType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EBandType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EBandType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EBandType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EBandType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EBandType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EKeyState : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EN_KEY_SHORT_RELEASE = 0,
            EN_KEY_LONG_PRESS = 1
        };
        
        EKeyState() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EN_KEY_SHORT_RELEASE)) {}
        EKeyState(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EN_KEY_SHORT_RELEASE):
                case static_cast<int32_t>(Literal::EN_KEY_LONG_PRESS):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EKeyState &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EKeyState &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EKeyState &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EKeyState &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EKeyState &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EKeyState &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EFilterIDType : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EN_BROWSEITEM_FOLDERS = 0,
            EN_BROWSEITEM_SONGS = 1,
            EN_BROWSEITEM_ALBUMS = 2,
            EN_BROWSEITEM_ARTISTS = 3,
            EN_BROWSEITEM_GENRE = 4,
            EN_BROWSEITEM_PLAYLISTS = 5,
            EN_BROWSEITEM_PICTURE = 6,
            EN_BROWSEITEM_VIDEOS = 7,
            EN_BROWSEITEM_ITUNES_RADIO = 8,
            EN_BROWSEITEM_AUDIOBOOK = 9,
            EN_BROWSEITEM_PODCAST = 10,
            EN_BROWSEITEM_EPISODE = 11,
            EN_BROWSEITEM_END = 12
        };
        
        EFilterIDType() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EN_BROWSEITEM_FOLDERS)) {}
        EFilterIDType(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_FOLDERS):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_SONGS):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_ALBUMS):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_ARTISTS):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_GENRE):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_PLAYLISTS):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_PICTURE):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_VIDEOS):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_ITUNES_RADIO):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_AUDIOBOOK):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_PODCAST):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_EPISODE):
                case static_cast<int32_t>(Literal::EN_BROWSEITEM_END):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EFilterIDType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EFilterIDType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EFilterIDType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EFilterIDType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EFilterIDType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EFilterIDType &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
    
    struct EScreenName : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            EN_SCREEN_DEFAULT = 0,
            EN_SCREEN_W3W = 1
        };
        
        EScreenName() 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(Literal::EN_SCREEN_DEFAULT)) {}
        EScreenName(Literal _literal) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast<int32_t>(Literal::EN_SCREEN_DEFAULT):
                case static_cast<int32_t>(Literal::EN_SCREEN_W3W):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EScreenName &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EScreenName &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EScreenName &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EScreenName &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EScreenName &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EScreenName &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.harman.hmi.hmiVRTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(0, 1);
}

}; // struct hmiVRTypes

} // namespace hmi
} // namespace harman
} // namespace com
} // namespace v0

namespace CommonAPI {
}


namespace std {
    //Hash for EResponseType
    template<>
    struct hash<::v0::com::harman::hmi::hmiVRTypes::EResponseType> {
        inline size_t operator()(const ::v0::com::harman::hmi::hmiVRTypes::EResponseType& eResponseType) const {
            return static_cast<int32_t>(eResponseType);
        }
    };
    //Hash for EBandType
    template<>
    struct hash<::v0::com::harman::hmi::hmiVRTypes::EBandType> {
        inline size_t operator()(const ::v0::com::harman::hmi::hmiVRTypes::EBandType& eBandType) const {
            return static_cast<int32_t>(eBandType);
        }
    };
    //Hash for EKeyState
    template<>
    struct hash<::v0::com::harman::hmi::hmiVRTypes::EKeyState> {
        inline size_t operator()(const ::v0::com::harman::hmi::hmiVRTypes::EKeyState& eKeyState) const {
            return static_cast<int32_t>(eKeyState);
        }
    };
    //Hash for EFilterIDType
    template<>
    struct hash<::v0::com::harman::hmi::hmiVRTypes::EFilterIDType> {
        inline size_t operator()(const ::v0::com::harman::hmi::hmiVRTypes::EFilterIDType& eFilterIDType) const {
            return static_cast<int32_t>(eFilterIDType);
        }
    };
    //Hash for EScreenName
    template<>
    struct hash<::v0::com::harman::hmi::hmiVRTypes::EScreenName> {
        inline size_t operator()(const ::v0::com::harman::hmi::hmiVRTypes::EScreenName& eScreenName) const {
            return static_cast<int32_t>(eScreenName);
        }
    };
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_HMI_hmi_VR_Types_HPP_
