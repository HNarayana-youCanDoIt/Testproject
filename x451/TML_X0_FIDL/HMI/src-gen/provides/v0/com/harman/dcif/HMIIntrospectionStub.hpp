/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.
* Used org.franca.core 0.9.1.201412191134.
*
* generated by DCIF CodeGen Version: R2_v2.1.0
* generated on: Wed Oct 30 12:44:55 IST 2019
*/
/**
 * description: The HMI Service is responsible for providing the information to its consumers
 *   about the screen changes in HMI      and the information about the components
 *   present in the screen           Version: 1.0     Reason:         - Initial
 *   Version     Changes:         1. readonly attributes: topScreen         2.
 *   methods: inspectScreen         3. signal : screenChange
 * author: Gaurav Garg
 */
#ifndef V0_COM_HARMAN_DCIF_HMI_Introspection_STUB_HPP_
#define V0_COM_HARMAN_DCIF_HMI_Introspection_STUB_HPP_

#include <functional>



#include <v0/com/harman/dcif/HMIIntrospectionTypes.hpp>

#include <v0/com/harman/dcif/HMIIntrospection.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace com {
namespace harman {
namespace dcif {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service HMIIntrospection. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class HMIIntrospectionStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual HMIIntrospection {
 public:
    ///Notifies all remote listeners about a change of value of the attribute topScreen.
    virtual void fireTopScreenAttributeChanged(const std::string& topScreen) = 0;
    ///Notifies all remote listeners about a change of value of the attribute drawerTopScreen.
    virtual void fireDrawerTopScreenAttributeChanged(const std::string& drawerTopScreen) = 0;
    ///Notifies all remote listeners about a change of value of the attribute popupTopScreen.
    virtual void firePopupTopScreenAttributeChanged(const std::string& popupTopScreen) = 0;
    ///Notifies all remote listeners about a change of value of the attribute overlayTopScreen.
    virtual void fireOverlayTopScreenAttributeChanged(const std::string& overlayTopScreen) = 0;

    /**
     * Sends a broadcast event for screenChange. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireScreenChangeEvent(const std::string &_screenInformation) = 0;
    /**
     * Sends a broadcast event for drawerScreenChange. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireDrawerScreenChangeEvent(const std::string &_drawerScreenInformation) = 0;
    /**
     * Sends a broadcast event for popupScreenChange. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void firePopupScreenChangeEvent(const std::string &_popupScreenInformation) = 0;
    /**
     * Sends a broadcast event for overlayScreenChange. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireOverlayScreenChangeEvent(const std::string &_overlayScreenInformation) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for HMIIntrospection.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HMIIntrospectionStubRemoteEvent
{
public:
    virtual ~HMIIntrospectionStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service HMIIntrospection to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HMIIntrospectionStub
    : public virtual CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>
{
public:
    typedef std::function<void (::v0::com::harman::dcif::HMIIntrospectionTypes::InspectionResponseCode _status, std::string _screenInformation)>inspectScreenReply_t;

    virtual ~HMIIntrospectionStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /**
     * description: data string describing the top-most screen 	being shown currently to the user. 
     *   By convention, screen changes which	 	occur underneath the current topScreen
     *   will not be reported.
     */
    /// Provides getter access to the attribute topScreen
    virtual const std::string &getTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: data string describing the top-most drawer screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    /// Provides getter access to the attribute drawerTopScreen
    virtual const std::string &getDrawerTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: data string describing the top-most popup screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    /// Provides getter access to the attribute popupTopScreen
    virtual const std::string &getPopupTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /**
     * description: data string describing the top-most popup screen 	being shown currently to the
     *   user.  By convention, screen changes which	 	occur underneath the current
     *   topScreen will not be reported.
     */
    /// Provides getter access to the attribute overlayTopScreen
    virtual const std::string &getOverlayTopScreenAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /**
     * description: This method allows for querying the current layout of 		the entire HMI.
     * param: inspectItemType (String) : It tells whether the inspection is for screen or
     *   drawers or popup [DRAWER/POPUP/SCREEN/OVERLAYS]
     * param: screenName (String) : It tells which screen needs to be inspected, if it is
     *   loaded then inspect data is returned otherwise returns null         returns:
     *   success (InspectionResponseCode) : Indicates the success or failure
     *   													of the request         returns: screenInformation (String) :
     *   JSON-encoded data string for inspectionResults
     */
    /// This is the method that will be called on remote calls on the method inspectScreen.
    virtual void inspectScreen(const std::shared_ptr<CommonAPI::ClientId> _client, ::v0::com::harman::dcif::HMIIntrospectionTypes::ScreenItemType _type, std::string _screenName, inspectScreenReply_t _reply) = 0;
    /**
     * description: Indicates that a screen in the HMI has changed.
     */
    /// Sends a broadcast event for screenChange.
    virtual void fireScreenChangeEvent(const std::string &_screenInformation) = 0;
    /**
     * description: Indicates that a drawer screen in the HMI has changed.
     */
    /// Sends a broadcast event for drawerScreenChange.
    virtual void fireDrawerScreenChangeEvent(const std::string &_drawerScreenInformation) = 0;
    /**
     * description: Indicates that a popup screen in the HMI has changed.
     */
    /// Sends a broadcast event for popupScreenChange.
    virtual void firePopupScreenChangeEvent(const std::string &_popupScreenInformation) = 0;
    /**
     * description: Indicates that a popup screen in the HMI has changed.
     */
    /// Sends a broadcast event for overlayScreenChange.
    virtual void fireOverlayScreenChangeEvent(const std::string &_overlayScreenInformation) = 0;

    using CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<HMIIntrospectionStubAdapter, HMIIntrospectionStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef HMIIntrospectionStubRemoteEvent RemoteEventType;
    typedef HMIIntrospection StubInterface;
};

} // namespace dcif
} // namespace harman
} // namespace com
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COM_HARMAN_DCIF_HMI_Introspection_STUB_HPP_
